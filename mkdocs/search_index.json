{
    "docs": [
        {
            "location": "/",
            "text": "LCONF-Data-Serialization-Format-Standard\n\n\nThe official LCONF-Data-Serialization-Format-Standard.\n\n\nFor \nofficial\n information visit \nLCONF-Data-Serialization-Format-Standard web site\n.\n\n\nThe LCONF-Data-Serialization-Format in short \nLCONF\n is a lightweight, text-based, data serialization format \nwith\nemphasis on being human-friendly\n.",
            "title": "Home"
        },
        {
            "location": "/#lconf-data-serialization-format-standard",
            "text": "The official LCONF-Data-Serialization-Format-Standard.  For  official  information visit  LCONF-Data-Serialization-Format-Standard web site .  The LCONF-Data-Serialization-Format in short  LCONF  is a lightweight, text-based, data serialization format  with\nemphasis on being human-friendly .",
            "title": "LCONF-Data-Serialization-Format-Standard"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/",
            "text": "LCONF-Data-Serialization-Format-Standard\n\n\n\n\n\n\n2015-09-09: First draft of the renamed and reversioned\n    \nLCONF-Data-Serialization-Format-Standard Documentation v0.1.0\n.\n\n\n\n\n\n\n2014-10-08: the last \nLCONF\n Version 7.0.0  was released by \npeter1000\n.\n\n\n\n\n\n\nIn early 2014: \npeter1000\n \nhttps://github.com/peter1000/\n released a first \nLCONF\n specification and an\n    implementation as python library.\n\n\n\n\n\n\nCopyrights \n Licenses\n\n\nThe \nLCONF-Data-Serialization-Format-Standard Documentation\n and associated documentation\nfiles (the \"DOCUMENTATION\") is licensed under the following terms:\n\n\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\nThe DOCUMENTATION may be freely copied, published and distributed to\nothers, provided that the above copyright notice and this Copyright\nLicense are included on all such copies or substantial portions of the\nDOCUMENTATION.\n\n\nHowever, the content of this DOCUMENTATION itself may not be modified\nin any way, including by removing the copyright notice, except as\nrequired to translate it into languages other than English or into a\ndifferent format.\nIn the event of discrepancies between a translated version and the\nofficial English version, the official English version shall govern.\n\n\nTHIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED\n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE\nUSE OF THE INFORMATION HEREIN.\n\n\n\n\n1. LCONF Introduction\n\n\nThe LCONF-Data-Serialization-Format in short \nLCONF\n is a lightweight, text-based, data serialization format \nwith\nemphasis on being human-friendly\n.\n\n\nLCONF builds upon concepts from \nJSON\n, \nRSONLITE\n,\n\nINI\n and \nYAML\n.\n\n\nLCONF defines a set of structuring rules with \nindentation\n and \nselected characters\n which provide structural\ninformation. This excellent combination allows the data to show itself in a human-friendly, easily readable and\nwriteable format.\n\n\nLCONF was specifically designed to be useful to people working with program configuration and configuration files as\nwell as for other common use cases such as data exchange and lightweight structural data storage.\n\n\nLCONF uses LCONF-Schema-Definitions to descripe the structure and default content as well as any constraints on the\nstructure and content of a LCONF-Section, above and beyond the basic syntactical constraints imposed by LCONF itself.\nLCONF-Schema-Definitions are valid LCONF syntax.\n\n\n1.1. LCONF Preview\n\n\nThis section provides a quick preview into LCONF. It is not expected that the first-time reader understand all\nof the examples but should be seen as motivation for the remainder of the specification.\n\n\nSome of the examples are based on \nYAML's spec preview examples\n.\n\n\n1.1.1. Example: STRUCTURE_PAIR\n\n\nAssociates a LCONF-Key-Name with one data value - mapping key to value.\n\n\nname :: Tony Johnson\nage :: 65\nreg :: true\n\n\n\n\n1.1.2. Example: STRUCTURE_LIST\n\n\nAssociates a LCONF-Key-Name with a list of data values - mapping key to sequence of values.\n\n\n- american\n    Boston\n    Detroit\n    New York\n\n# Compact form of a STRUCTURE_LIST\n- national :: New York, Chicago, Atlanta\n\n\n\n\n1.1.3. Example: STRUCTURE_SINGLE_BLOCK\n\n\nA collection of any of the six LCONF-Structures.\n\n\n# Two STRUCTURE_SINGLE_BLOCKs.\n. player1\n    name :: Mark McGwire\n    hr :: 65\n    avg :: 0.278\n. player2\n    name :: Sammy Sosa\n    hr :: 63\n    avg :: 0.288\n\n\n\n\nExample: Nested Mapping Of Mappings: LanguageSkills has three separate STRUCTURE_SINGLE_BLOCKs.\n\n\n. registry\n    LastName :: Albert\n    FirstName :: Fat\n    Address :: 123 Cartoon Network Way, Hollywood, CA 12345\n    . LanguageSkills\n        . English\n            Listening :: intermediate\n            Speaking :: intermediate\n            Reading :: good\n            Writing :: basic\n        . French\n            Listening :: excellent\n            Speaking :: native speaker\n            Reading :: excellent\n            Writing :: excellent\n        . German\n            Listening :: very good\n            Speaking :: very good\n            Reading :: excellent\n            Writing :: good\n\n\n\n\n1.1.4. Example: STRUCTURE_NAMED_BLOCKS\n\n\nA collection of repeated named STRUCTURE_SINGLE_BLOCKs.\n\n\n# One STRUCTURE_NAMED_BLOCKS with two named STRUCTURE_SINGLE_BLOCKs.\n* players\n    . player1\n        name :: Mark McGwire\n        hr :: 65\n        avg :: 0.278\n    . player2\n        name :: Sammy Sosa\n        hr :: 63\n        avg :: 0.288\n\n\n\n\nExample: Nested Mapping Of Mappings: LanguageSkills usese one STRUCTURE_NAMED_BLOCKS with three named\nSTRUCTURE_SINGLE_BLOCKs.\n\n\n. registry\n    LastName :: Albert\n    FirstName :: Fat\n    Address :: 123 Cartoon Network Way, Hollywood, CA 12345\n    * LanguageSkills\n        . English\n            Listening :: intermediate\n            Speaking :: intermediate\n            Reading :: good\n            Writing :: basic\n        . French\n            Listening :: excellent\n            Speaking :: native speaker\n            Reading :: excellent\n            Writing :: excellent\n        . German\n            Listening :: very good\n            Speaking :: very good\n            Reading :: excellent\n            Writing :: good\n\n\n\n\n1.1.5. Example: STRUCTURE_UNNAMED_BLOCKS\n\n\nA collection of repeated unnamed STRUCTURE_SINGLE_BLOCKs.\n\n\n* players\n    .\n        name :: Mark McGwire\n        hr :: 65\n        avg :: 0.278\n    .\n        name :: Sammy Sosa\n        hr :: 63\n        avg :: 0.288\n\n\n\n\n1.1.6. Example: LCONF_SINGLE_BLOCK_REUSE\n\n\nAssigns in a STRUCTURE_NAMED_BLOCKS sequence the settings of a previous STRUCTURE_SINGLE_BLOCK to a new\nSTRUCTURE_SINGLE_BLOCK.\n\n\n* Adresses\n    . bill_to\n        FirstName :: Mary\n        LastName :: Watson\n        Street :: 768 5th Ave # 1332\n        City :: New York\n        State :: NY\n        ZIPCode :: 10019\n        EmailAddress :: mary_watson@mail.go\n        Phone :: +1 212-759-3000\n    # LCONF_SINGLE_BLOCK_REUSE\n    . ship_to == bill_to\n        Street :: 175 E 62nd St APT 16A\n        ZIPCode :: 10065\n\n\n\n\n1.1.7. Example: STRUCTURE_TABLE\n\n\nAssociates a LCONF-Key-Name with tabular-data (columns and rows).\n\n\n| players\n    | Mark McGwire | 65 | 0.278 |\n    | Sammy Sosa   | 63 | 0.288 |\n\n\n\n\n1.1.8. Example: Two LCONF-Sections In One LCONF-Text\n\n\n___SECTION :: 4 :: LCONF :: Ranking of 1998 home runs\n- players\n    Mark McGwire\n    Sammy Sosa\n    Ken Griffey\n___END\n\n___SECTION :: 4 :: LCONF :: Team ranking\n- Ranking\n    Chicago Cubs\n    St Louis Cardinals\n___END\n\n\n\n\n1.1.9. Example: Full Length Example (Invoice)\n\n\n___SECTION :: 4 :: LCONF :: tag:clarkevans.com,2002:invoice\n\ninvoice :: 34843\ndate :: 2001-01-23\n* Adresses\n    . bill_to\n        given :: Chris\n        family :: Dumars\n        . address\n            lines: 458 Walkman Dr. \\nSuite #292\n            city :: Royal Oak\n            state :: MI\n            postal :: 48046\n    . ship_to == bill_to\n* product\n    .\n        sku :: BL394D\n        quantity :: 4\n        description :: Basketball\n        price :: 450.00\n    .\n        sku :: BL4438H\n        quantity :: 1\n        description :: Super Hoop\n        price :: 2392.00\ntax :: 251.42\ntotal :: 4443.52\n# a list of comments which are part of the data\n- comments\n    Late afternoon is best.\n    Backup contact is Nancy\n    Billsmer @ 338-4338.\n___END\n\n\n\n\n1.2. LCONF Summary\n\n\n1.2.1. Indentation\n\n\nThe indentation per Indentation-Level MUST be minimum 2 and maximum 8 spaces and MUST be specified in the\nLCONF-Section-Start-Line.\n\n\n1.2.2. LCONF_SECTION_FORMAT\n\n\nLCONF uses LCONF-Schema-Definitions to descripe the structure and default content of a LCONF-Section.\nIn the LCONF-Section-Start-Line it MUST be specified if the LCONF-Section is a:\n\n\n\n\nLCONF\n: a regular LCONF-Section with data.\n\n\nSTRICT\n: a special LCONF-Section which contains only LCONF-Schema-Definitions.\n\n\nFLEXIBLE\n: a special LCONF-Section which contains only LCONF-Schema-Definitions.\n\n\n\n\nExamples\n\n\n___SECTION :: 4 :: LCONF :: Example Literal Name Tokens\nregistered :: true\n___END\n\n\n\n\n___SECTION :: 4 :: STRICT :: Example Literal Name Tokens\n. registered | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_BOOLEAN\n    DEFAULT :: NOTSET\n    EMPTY_REPLACEMENT :: NOTSET\n___END\n\n\n\n\n___SECTION :: 4 :: FLEXIBLE :: Example Literal Name Tokens\n. registered | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_BOOLEAN\n    DEFAULT :: NOTSET\n    EMPTY_REPLACEMENT :: NOTSET\n___END\n\n\n\n\n1.2.3. Literal Name Tokens\n\n\n\n\nLCONF_SECTION_START:  \n___SECTION\n\n\nLCONF_SECTION_END: \n___END\n\n\nLCONF_SECTION_FORMAT:  \nLCONF\n\n\nLCONF_SCHEMA_STRICT_FORMAT: \nSTRICT\n\n\nLCONF_SCHEMA_FLEXIBLE_FORMAT: \nFLEXIBLE\n\n\nLCONF_TRUE: \ntrue\n\n\nLCONF_FALSE: \nfalse\n\n\nLCONF_NOTSET: \nNOTSET\n\n\nLCONF_FORCE: \nFORCE\n\n\n\n\n___SECTION :: 4 :: LCONF :: Example Literal Name Tokens\nregistered :: true\nfluent_in_english :: false\nweight :: NOTSET\ninterest_rate_rise :: 100.8|1.27|106|FORCE\n___END\n\n\n\n\n1.2.4. LCONF Structures\n\n\nThe set of six structures includes three simple structures and three collection structures.\n\n\nThe three simple structures are:\n\n\n\n\nSTRUCTURE_PAIR\n\n\nSTRUCTURE_LIST (inclusive Compact_STRUCTURE_LIST notation)\n\n\nSTRUCTURE_TABLE\n\n\n\n\nThe three collection structures are:\n\n\n\n\nSTRUCTURE_SINGLE_BLOCK\n\n\nSTRUCTURE_NAMED_BLOCKS\n\n\nSTRUCTURE_UNNAMED_BLOCKS\n\n\n\n\n___SECTION :: 4 :: LCONF :: Example The three simple structures\n# STRUCTURE_PAIR\nname :: Max\n\n# STRUCTURE_LIST: STRUCTURE_LIST notation.\n- color_name_list1\n    Red\n    Blue\n    NOTSET\n    Green\n\n# STRUCTURE_LIST: Compact_STRUCTURE_LIST notation.\n- color_name_list2 :: Red, Blue, NOTSET, Green\n\n# STRUCTURE_TABLE: with a comment column names line\n| people_table\n    # name  | height_cm | weight_kg | age    |\n    | Tim   | 178       | 86        | 37     |\n    | Paula | 156       | NOTSET    | NOTSET |\n\n___END\n\n\n\n\n___SECTION :: 4 :: LCONF :: Example The three collection structures\n# STRUCTURE_SINGLE_BLOCK\n. favorites\n    food :: Spaghetti\n    sport :: Soccer\n    color :: Blue\n    - color_name_list\n        Red\n        Blue\n\n# STRUCTURE_NAMED_BLOCKS\n* tests_named\n    . test1\n        score :: 90\n        name :: One\n    . test2\n        score :: 96\n        name :: Two\n\n# STRUCTURE_UNNAMED_BLOCKS\n* tests_unnamed\n    .\n        score :: 90\n        name :: One\n    .\n        score :: 96\n        name :: Two\n___END\n\n\n\n\n1.2.5. LCONF-Value-Types\n\n\nThe set of six main value types includes NOTSET, String, Boolean, Number, Date \n Time and Range.\n\n\n\n\n\n\nNOTSET\n\n\n\n\nTYPE_NOTSET: is the Literal Name Token \nNOTSET\n and is used to indicate the lack of a value and is different\n    from an Empty-Value.\n\n\n\n\n\n\n\n\nString\n\n\n\n\nTYPE_STRING: A sequence of zero or more Unicode characters.\n\n\nTYPE_DIGITS: A TYPE_STRING constraint to only LCONF_DIGITS. \n0-9\n\n\nTYPE_PATTERN_DIGITS: A TYPE_STRING constraint to a pattern where only the individual LCONF_DIGITS MAY change.\n    \n@@@-@@-@@@@\n  could be used as pattern for \n123-55-6678\n.\n\n\n\n\n\n\n\n\nBoolean\n\n\n\n\nTYPE_BOOLEAN: LCONF_TRUE or LCONF_FALSE.  Literal Name Token: \ntrue\n or \nfalse\n.\n\n\n\n\n\n\n\n\nNumber\n\n\n\n\n\n\nTYPE_INTEGER: MUST contain only LCONF_DIGITS. It MAY have a preceding LCONF_PLUS or LCONF_MINUS.\n    64 bit (signed long) range expected (\n-9223372036854775808\n to \n+9223372036854775807\n).\n\n\n\n\n\n\nTYPE_FLOAT: supports four different notations.\n\n\n\n\nFractional: \n+3.1415\n, \n-3.1415\n\n\nExponent: \n5e+22\n, \n-2E-2\n\n\nFractional And Exponent Mixed: \n6.196E63\n, \n-1.54e-003\n\n\nFraction P/Q Of Two Integers: \n+3/4\n, \n-93/16\n, \n1/8\n, \n2789/-598\n\n\n\n\n\n\n\n\nTYPE_NUMBER: can be any of TYPE_INTEGER or TYPE_FLOAT.\n\n\n\n\n\n\n\n\n\n\nDate \n Time\n\n\n\n\n\n\nTYPE_MONTH: \nYYYY-MM\n e.g.: \n1945-03\n\n\n\n\n\n\nTYPE_DAY: \nYYYY-MM-DD\n e.g. \n2014-11-15\n\n\n\n\n\n\nTYPE_MINUTE: \nhh:mm\n e.g: \n12:30\n\n\n\n\n\n\nTYPE_SECOND: \nhh:mm:ss\n e.g: \n02:30:42\n\n\n\n\n\n\nTYPE_SECOND_FRACTION: \nhh:mm:ss.fff\n e.g: \n12:30:59.001\n, \n04:02:00.000156\n, \n18:53:16.1\n\n\n\n\n\n\nTYPE_DAY_MINUTE1: \nYYYY-MM-DD hh:mm\n e.g: \n2013-07-01 12:30\n\n\n\n\n\n\nTYPE_DAY_MINUTE2: \nYYYY-MM-DDThh:mm\n e.g: \n2013-07-01T12:30\n\n\n\n\n\n\nTYPE_DAY_SECOND1: \nYYYY-MM-DD hh:mm:ss\n e.g: \n2013-07-01 12:30:59\n\n\n\n\n\n\nTYPE_DAY_SECOND2: \nYYYY-MM-DDThh:mm:ss\n e.g: \n2013-07-01T12:30:59\n\n\n\n\n\n\nTYPE_DAY_SECOND_FRACTION1: \nYYYY-MM-DD hh:mm:ss.fff\n e.g: \n2013-07-01 04:02:00.000156\n\n\n\n\n\n\nTYPE_DAY_SECOND_FRACTION2: \nYYYY-MM-DDThh:mm:ss.fff\n e.g: \n2013-07-01T12:30:59.001\n\n\n\n\n\n\n\n\n\n\nRange\n\n\nA range defines an arithmetic sequence where the first element is the LCONF-Range-Start-Number.\n\n\nTo force always the inclusion of the \nLCONF-Range-End-Number\n the Literal Name Token \nFORCE\n is set.\n\n\n\n\n\n\nTYPE_RANGE_OF_ELEMENTS:\n\n\n\n\nStart-Number|Step-Number|Number-Of-Elements \n\n    Example: \n-10|1|*21\n, \n512.4|0.125|*8\n\n\n\n\n\n\n\n\nTYPE_RANGE_BY_END_VALUE:\n\n\n\n\nStart-Number|Step-Number|End-Number \n\n    \n100.8|1.27|106\n\n\nStart-Number|Step-Number|Number|FORCE \n\n    \n100.8|1.27|106|FORCE\n\n\n\n\n\n\n\n\n\n\n\n\n___SECTION :: 4 :: LCONF :: LCONF_Value_Types\n# TYPE_NOTSET\nkey1 :: NOTSET\n\n# TYPE_STRING\nkey2 :: Any text\n\n# TYPE_DIGITS\nregistration_number :: 778945215643219945167845123689\n\n# TYPE_PATTERN_DIGITS: `@@@-@@-@@@@`\nsocial_security_number :: 123-55-6678\n\n# TYPE_BOOLEAN\nkey3 :: true\nkey4 :: false\n\n# TYPE_INTEGER\nkey5 :: +9223372036854775807\nkey6 :: -9223372036854775808\n\n# TYPE_FLOAT\nkey7 :: -0.01\nkey8 :: 0.0\nkey9 :: +3.1415\n\nkey10 :: 5e+22\nkey11 :: -2E-2\n\nkey12 :: -1.54e-003\nkey13 :: 6.196E63\n\nkey14 :: 1/8\nkey15 :: +3/4\n\n# TYPE_NUMBER\nkey16 :: +92\nkey17 :: -2E-2\nkey18 :: 1/100\n\n# TYPE_MONTH\nkey19 :: 1932-08\nkey20 :: 2014-11\n\n# TYPE_DAY\nkey19 :: 1932-08-27\nkey20 :: 2014-11-15\n\n# TYPE_MINUTE\nkey21 :: 12:30\n\n# TYPE_SECOND\nkey22 :: 02:30:42\n\n# TYPE_SECOND_FRACTION\nkey23 :: 18:53:16.145\n\n# TYPE_DAY_MINUTE1\nkey24 :: 2013-07-01 12:30\n\n# TYPE_DAY_MINUTE2\nkey25 :: 2013-07-01T12:30\n\n# TYPE_DAY_SECOND1\nkey26 :: 2013-07-01 12:30:59\n\n# TYPE_DAY_SECOND2\nkey27:: 2013-07-01T12:30:59\n\n# TYPE_DAY_SECOND_FRACTION1\nkey28 :: 2013-07-01 12:30:59.001\n\n# TYPE_DAY_SECOND_FRACTION2\nkey29 :: 2013-07-01T12:30:59.001\n\n# TYPE_RANGE_OF_ELEMENTS\n# 21 elements: `-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10`\nkey29 :: -10|1|*21\n\n# TYPE_RANGE_BY_END_VALUE\n# elements: `-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5`\nkey30 :: -10|1|5\n\n# elements: `100.8, 99.53, 98.26, 96.99, 95.72, 94.45, 93.18, 92.1`\nkey31 :: 100.8|-1.27|92.1|FORCE\n___END\n\n\n\n\n1.2.6. Summary of Restrictions\n\n\n\n\nLCONF-Sections MUST NOT contain any lines with \nTrailing Space\n.\n\n\nLCONF_BLANK_LINE: A line that contains only whitespace characters (zero or more) is not parsed.\n\n\nLCONF_SECTION_START Token \n___SECTION\n is a reserved LCONF character sequence.\n\n\nLCONF_SECTION_END Token \n___END\n is a reserved LCONF character sequence.\n\n\nTYPE_NOTSET \nNOTSET\n is a reserved LCONF character sequence.\n\n\n\n\n1.2.6.1. First None White Character Of A Line\n\n\nSome first none white character of a line are \nreserved\n as special purpose \nIdentifiers\n. Most of them are permitted\nin values.\n\n\nFirst None White Character Of A Line are reserved:\n\n\n\n\nLCONF_NUMBER_SIGN \n#\n is reserved only for \nLCONF_COMMENT_LINE_IDENTIFIER\n\n\nLCONF_SLASH \n/\n is reserved only for \nLCONF_SCHEMA_COMMENT_LINE_IDENTIFIER\n\n\nLCONF_VERTICAL_LINE \n|\n is reserved only for \nSTRUCTURE_TABLE_IDENTIFIER\n and also used as\n    \nSTRUCTURE_TABLE_VALUE_SEPARATOR\n.\n\n\nLCONF_MINUS \n-\n is reserved only for \nSTRUCTURE_LIST_IDENTIFIER\n.\n\n\nLCONF_PERIOD \n.\n is reserved only for \nSTRUCTURE_SINGLE_BLOCK_IDENTIFIER\n.\n\n\nLCONF_ASTERISK \n*\n is reserved only for \nSTRUCTURE_NAMED_BLOCKS_IDENTIFIER\n \n \nSTRUCTURE_UNNAMED_BLOCKS_IDENTIFIER\n.\n\n\n\n\n1.2.6.2. Unique LCONF-Key-Names\n\n\n\n\n\n\nWithin a \nSTRUCTURE_SINGLE_BLOCK\n all direct child LCONF-Key-Names (keys with one additional indentation level) MUST\n    be unique.\n\n\n\n\n\n\nA \nLCONF-Root\n is a special STRUCTURE_SINGLE_BLOCK and all direct child LCONF-Key-Names (keys with no indentation\n    level) MUST be unique.\n\n\n\n\n\n\nWithin a \nSTRUCTURE_NAMED_BLOCKS\n all direct child LCONF-Key-Names (keys with one additional indentation level) MUST\n    be unique.\n\n\n\n\n\n\nLCONF-Column-Names (STRUCTURE_TABLE's Column-Names are also considered to be LCONF-Key-Names) MUST be unique within\n    a STRUCTURE_TABLE.\n\n\n\n\n\n\n1.2.6.3. LCONF-Key-Names\n\n\nThe default LCONF_SCHEMA_STRICT_FORMAT \nSTRICT\n adds some contraints to LCONF-Key-Names.\n\n\nA LCONF_SCHEMA_STRICT_FORMAT LCONF-Key-Name (STRUCTURE_TABLE's LCONF-Column-Name are also considered to be\nLCONF-Key-Names):\n\n\nMUST be a sequence of one or more (but maximum thirty-one '31') characters of these groups:\n\n\n\n\nLCONF_UNDERSCORE\n\n\nLCONF_CAPITAL_LETTERS\n\n\nLCONF_SMALL_LETTERS\n\n\nLCONF_DIGITS\n\n\n\n\nAdditionally constraints:\n\n\n\n\nThe first character MUST NOT be a LCONF_DIGITS\n\n\nThe name SHOULD NOT be one of LCONF's Literal Name Tokens\n\n\nThe name SHOULD NOT be one of common reserved programming words\n\n\n\n\n1.2.7. LCONF-Schema-Definitions\n\n\nLCONF uses LCONF-Schema-Definitions to descripe the structure and default content as well as any constraints on the\nstructure and content of a LCONF-Section, above and beyond the basic syntactical constraints imposed by LCONF itself.\nLCONF-Schema-Definitions are valid LCONF syntax.\n\n\n1.2.7.1. Full Length Example (Invoice)\n\n\nA example LCONF-Schema for the: Full Length Example (Invoice)\n\n\n___SECTION :: 4 :: STRICT :: Schema: Full Length Example (Invoice)\n\n. invoice | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER\n\n. date | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_DAY\n\n. Adresses | STRUCTURE_NAMED_BLOCKS (1,2)\n\n    . TEMPLATE_BLOCK | STRUCTURE_SINGLE_BLOCK\n\n        . given | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n        . family | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n        . address | STRUCTURE_SINGLE_BLOCK\n\n            . lines | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n            . city | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n            . state | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING (2,2)\n\n            . postal | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER (10000,99999)\n\n. product | STRUCTURE_UNNAMED_BLOCKS (1,NOTSET)\n\n    . TEMPLATE_BLOCK | STRUCTURE_SINGLE_BLOCK\n\n        . sku | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING (6,6)\n\n        . quantity | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER (1,NOTSET)\n\n        . description | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n        . price | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_FLOAT\n\n. tax | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_FLOAT\n\n. total | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_FLOAT\n\n# This Comment line will not be parsed but\n# the next one starting with a slah is a LCONF-Schema-Comment-Line and is parsed\n/ a list of comments which are part of the data\n. comments | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n___END",
            "title": "1. LCONF-Standard"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#lconf-data-serialization-format-standard",
            "text": "2015-09-09: First draft of the renamed and reversioned\n     LCONF-Data-Serialization-Format-Standard Documentation v0.1.0 .    2014-10-08: the last  LCONF  Version 7.0.0  was released by  peter1000 .    In early 2014:  peter1000   https://github.com/peter1000/  released a first  LCONF  specification and an\n    implementation as python library.",
            "title": "LCONF-Data-Serialization-Format-Standard"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#copyrights-licenses",
            "text": "The  LCONF-Data-Serialization-Format-Standard Documentation  and associated documentation\nfiles (the \"DOCUMENTATION\") is licensed under the following terms:   Copyright (c) 2014 - 2015,  peter1000    https://github.com/peter1000 .  The DOCUMENTATION may be freely copied, published and distributed to\nothers, provided that the above copyright notice and this Copyright\nLicense are included on all such copies or substantial portions of the\nDOCUMENTATION.  However, the content of this DOCUMENTATION itself may not be modified\nin any way, including by removing the copyright notice, except as\nrequired to translate it into languages other than English or into a\ndifferent format.\nIn the event of discrepancies between a translated version and the\nofficial English version, the official English version shall govern.  THIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED\n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE\nUSE OF THE INFORMATION HEREIN.",
            "title": "Copyrights &amp; Licenses"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#1-lconf-introduction",
            "text": "The LCONF-Data-Serialization-Format in short  LCONF  is a lightweight, text-based, data serialization format  with\nemphasis on being human-friendly .  LCONF builds upon concepts from  JSON ,  RSONLITE , INI  and  YAML .  LCONF defines a set of structuring rules with  indentation  and  selected characters  which provide structural\ninformation. This excellent combination allows the data to show itself in a human-friendly, easily readable and\nwriteable format.  LCONF was specifically designed to be useful to people working with program configuration and configuration files as\nwell as for other common use cases such as data exchange and lightweight structural data storage.  LCONF uses LCONF-Schema-Definitions to descripe the structure and default content as well as any constraints on the\nstructure and content of a LCONF-Section, above and beyond the basic syntactical constraints imposed by LCONF itself.\nLCONF-Schema-Definitions are valid LCONF syntax.",
            "title": "1. LCONF Introduction"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#11-lconf-preview",
            "text": "This section provides a quick preview into LCONF. It is not expected that the first-time reader understand all\nof the examples but should be seen as motivation for the remainder of the specification.  Some of the examples are based on  YAML's spec preview examples .",
            "title": "1.1. LCONF Preview"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#111-example-structure_pair",
            "text": "Associates a LCONF-Key-Name with one data value - mapping key to value.  name :: Tony Johnson\nage :: 65\nreg :: true",
            "title": "1.1.1. Example: STRUCTURE_PAIR"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#112-example-structure_list",
            "text": "Associates a LCONF-Key-Name with a list of data values - mapping key to sequence of values.  - american\n    Boston\n    Detroit\n    New York\n\n# Compact form of a STRUCTURE_LIST\n- national :: New York, Chicago, Atlanta",
            "title": "1.1.2. Example: STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#113-example-structure_single_block",
            "text": "A collection of any of the six LCONF-Structures.  # Two STRUCTURE_SINGLE_BLOCKs.\n. player1\n    name :: Mark McGwire\n    hr :: 65\n    avg :: 0.278\n. player2\n    name :: Sammy Sosa\n    hr :: 63\n    avg :: 0.288  Example: Nested Mapping Of Mappings: LanguageSkills has three separate STRUCTURE_SINGLE_BLOCKs.  . registry\n    LastName :: Albert\n    FirstName :: Fat\n    Address :: 123 Cartoon Network Way, Hollywood, CA 12345\n    . LanguageSkills\n        . English\n            Listening :: intermediate\n            Speaking :: intermediate\n            Reading :: good\n            Writing :: basic\n        . French\n            Listening :: excellent\n            Speaking :: native speaker\n            Reading :: excellent\n            Writing :: excellent\n        . German\n            Listening :: very good\n            Speaking :: very good\n            Reading :: excellent\n            Writing :: good",
            "title": "1.1.3. Example: STRUCTURE_SINGLE_BLOCK"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#114-example-structure_named_blocks",
            "text": "A collection of repeated named STRUCTURE_SINGLE_BLOCKs.  # One STRUCTURE_NAMED_BLOCKS with two named STRUCTURE_SINGLE_BLOCKs.\n* players\n    . player1\n        name :: Mark McGwire\n        hr :: 65\n        avg :: 0.278\n    . player2\n        name :: Sammy Sosa\n        hr :: 63\n        avg :: 0.288  Example: Nested Mapping Of Mappings: LanguageSkills usese one STRUCTURE_NAMED_BLOCKS with three named\nSTRUCTURE_SINGLE_BLOCKs.  . registry\n    LastName :: Albert\n    FirstName :: Fat\n    Address :: 123 Cartoon Network Way, Hollywood, CA 12345\n    * LanguageSkills\n        . English\n            Listening :: intermediate\n            Speaking :: intermediate\n            Reading :: good\n            Writing :: basic\n        . French\n            Listening :: excellent\n            Speaking :: native speaker\n            Reading :: excellent\n            Writing :: excellent\n        . German\n            Listening :: very good\n            Speaking :: very good\n            Reading :: excellent\n            Writing :: good",
            "title": "1.1.4. Example: STRUCTURE_NAMED_BLOCKS"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#115-example-structure_unnamed_blocks",
            "text": "A collection of repeated unnamed STRUCTURE_SINGLE_BLOCKs.  * players\n    .\n        name :: Mark McGwire\n        hr :: 65\n        avg :: 0.278\n    .\n        name :: Sammy Sosa\n        hr :: 63\n        avg :: 0.288",
            "title": "1.1.5. Example: STRUCTURE_UNNAMED_BLOCKS"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#116-example-lconf_single_block_reuse",
            "text": "Assigns in a STRUCTURE_NAMED_BLOCKS sequence the settings of a previous STRUCTURE_SINGLE_BLOCK to a new\nSTRUCTURE_SINGLE_BLOCK.  * Adresses\n    . bill_to\n        FirstName :: Mary\n        LastName :: Watson\n        Street :: 768 5th Ave # 1332\n        City :: New York\n        State :: NY\n        ZIPCode :: 10019\n        EmailAddress :: mary_watson@mail.go\n        Phone :: +1 212-759-3000\n    # LCONF_SINGLE_BLOCK_REUSE\n    . ship_to == bill_to\n        Street :: 175 E 62nd St APT 16A\n        ZIPCode :: 10065",
            "title": "1.1.6. Example: LCONF_SINGLE_BLOCK_REUSE"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#117-example-structure_table",
            "text": "Associates a LCONF-Key-Name with tabular-data (columns and rows).  | players\n    | Mark McGwire | 65 | 0.278 |\n    | Sammy Sosa   | 63 | 0.288 |",
            "title": "1.1.7. Example: STRUCTURE_TABLE"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#118-example-two-lconf-sections-in-one-lconf-text",
            "text": "___SECTION :: 4 :: LCONF :: Ranking of 1998 home runs\n- players\n    Mark McGwire\n    Sammy Sosa\n    Ken Griffey\n___END\n\n___SECTION :: 4 :: LCONF :: Team ranking\n- Ranking\n    Chicago Cubs\n    St Louis Cardinals\n___END",
            "title": "1.1.8. Example: Two LCONF-Sections In One LCONF-Text"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#119-example-full-length-example-invoice",
            "text": "___SECTION :: 4 :: LCONF :: tag:clarkevans.com,2002:invoice\n\ninvoice :: 34843\ndate :: 2001-01-23\n* Adresses\n    . bill_to\n        given :: Chris\n        family :: Dumars\n        . address\n            lines: 458 Walkman Dr. \\nSuite #292\n            city :: Royal Oak\n            state :: MI\n            postal :: 48046\n    . ship_to == bill_to\n* product\n    .\n        sku :: BL394D\n        quantity :: 4\n        description :: Basketball\n        price :: 450.00\n    .\n        sku :: BL4438H\n        quantity :: 1\n        description :: Super Hoop\n        price :: 2392.00\ntax :: 251.42\ntotal :: 4443.52\n# a list of comments which are part of the data\n- comments\n    Late afternoon is best.\n    Backup contact is Nancy\n    Billsmer @ 338-4338.\n___END",
            "title": "1.1.9. Example: Full Length Example (Invoice)"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#12-lconf-summary",
            "text": "",
            "title": "1.2. LCONF Summary"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#121-indentation",
            "text": "The indentation per Indentation-Level MUST be minimum 2 and maximum 8 spaces and MUST be specified in the\nLCONF-Section-Start-Line.",
            "title": "1.2.1. Indentation"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#122-lconf_section_format",
            "text": "LCONF uses LCONF-Schema-Definitions to descripe the structure and default content of a LCONF-Section.\nIn the LCONF-Section-Start-Line it MUST be specified if the LCONF-Section is a:   LCONF : a regular LCONF-Section with data.  STRICT : a special LCONF-Section which contains only LCONF-Schema-Definitions.  FLEXIBLE : a special LCONF-Section which contains only LCONF-Schema-Definitions.   Examples  ___SECTION :: 4 :: LCONF :: Example Literal Name Tokens\nregistered :: true\n___END  ___SECTION :: 4 :: STRICT :: Example Literal Name Tokens\n. registered | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_BOOLEAN\n    DEFAULT :: NOTSET\n    EMPTY_REPLACEMENT :: NOTSET\n___END  ___SECTION :: 4 :: FLEXIBLE :: Example Literal Name Tokens\n. registered | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_BOOLEAN\n    DEFAULT :: NOTSET\n    EMPTY_REPLACEMENT :: NOTSET\n___END",
            "title": "1.2.2. LCONF_SECTION_FORMAT"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#123-literal-name-tokens",
            "text": "LCONF_SECTION_START:   ___SECTION  LCONF_SECTION_END:  ___END  LCONF_SECTION_FORMAT:   LCONF  LCONF_SCHEMA_STRICT_FORMAT:  STRICT  LCONF_SCHEMA_FLEXIBLE_FORMAT:  FLEXIBLE  LCONF_TRUE:  true  LCONF_FALSE:  false  LCONF_NOTSET:  NOTSET  LCONF_FORCE:  FORCE   ___SECTION :: 4 :: LCONF :: Example Literal Name Tokens\nregistered :: true\nfluent_in_english :: false\nweight :: NOTSET\ninterest_rate_rise :: 100.8|1.27|106|FORCE\n___END",
            "title": "1.2.3. Literal Name Tokens"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#124-lconf-structures",
            "text": "The set of six structures includes three simple structures and three collection structures.  The three simple structures are:   STRUCTURE_PAIR  STRUCTURE_LIST (inclusive Compact_STRUCTURE_LIST notation)  STRUCTURE_TABLE   The three collection structures are:   STRUCTURE_SINGLE_BLOCK  STRUCTURE_NAMED_BLOCKS  STRUCTURE_UNNAMED_BLOCKS   ___SECTION :: 4 :: LCONF :: Example The three simple structures\n# STRUCTURE_PAIR\nname :: Max\n\n# STRUCTURE_LIST: STRUCTURE_LIST notation.\n- color_name_list1\n    Red\n    Blue\n    NOTSET\n    Green\n\n# STRUCTURE_LIST: Compact_STRUCTURE_LIST notation.\n- color_name_list2 :: Red, Blue, NOTSET, Green\n\n# STRUCTURE_TABLE: with a comment column names line\n| people_table\n    # name  | height_cm | weight_kg | age    |\n    | Tim   | 178       | 86        | 37     |\n    | Paula | 156       | NOTSET    | NOTSET |\n\n___END  ___SECTION :: 4 :: LCONF :: Example The three collection structures\n# STRUCTURE_SINGLE_BLOCK\n. favorites\n    food :: Spaghetti\n    sport :: Soccer\n    color :: Blue\n    - color_name_list\n        Red\n        Blue\n\n# STRUCTURE_NAMED_BLOCKS\n* tests_named\n    . test1\n        score :: 90\n        name :: One\n    . test2\n        score :: 96\n        name :: Two\n\n# STRUCTURE_UNNAMED_BLOCKS\n* tests_unnamed\n    .\n        score :: 90\n        name :: One\n    .\n        score :: 96\n        name :: Two\n___END",
            "title": "1.2.4. LCONF Structures"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#125-lconf-value-types",
            "text": "The set of six main value types includes NOTSET, String, Boolean, Number, Date   Time and Range.    NOTSET   TYPE_NOTSET: is the Literal Name Token  NOTSET  and is used to indicate the lack of a value and is different\n    from an Empty-Value.     String   TYPE_STRING: A sequence of zero or more Unicode characters.  TYPE_DIGITS: A TYPE_STRING constraint to only LCONF_DIGITS.  0-9  TYPE_PATTERN_DIGITS: A TYPE_STRING constraint to a pattern where only the individual LCONF_DIGITS MAY change.\n     @@@-@@-@@@@   could be used as pattern for  123-55-6678 .     Boolean   TYPE_BOOLEAN: LCONF_TRUE or LCONF_FALSE.  Literal Name Token:  true  or  false .     Number    TYPE_INTEGER: MUST contain only LCONF_DIGITS. It MAY have a preceding LCONF_PLUS or LCONF_MINUS.\n    64 bit (signed long) range expected ( -9223372036854775808  to  +9223372036854775807 ).    TYPE_FLOAT: supports four different notations.   Fractional:  +3.1415 ,  -3.1415  Exponent:  5e+22 ,  -2E-2  Fractional And Exponent Mixed:  6.196E63 ,  -1.54e-003  Fraction P/Q Of Two Integers:  +3/4 ,  -93/16 ,  1/8 ,  2789/-598     TYPE_NUMBER: can be any of TYPE_INTEGER or TYPE_FLOAT.      Date   Time    TYPE_MONTH:  YYYY-MM  e.g.:  1945-03    TYPE_DAY:  YYYY-MM-DD  e.g.  2014-11-15    TYPE_MINUTE:  hh:mm  e.g:  12:30    TYPE_SECOND:  hh:mm:ss  e.g:  02:30:42    TYPE_SECOND_FRACTION:  hh:mm:ss.fff  e.g:  12:30:59.001 ,  04:02:00.000156 ,  18:53:16.1    TYPE_DAY_MINUTE1:  YYYY-MM-DD hh:mm  e.g:  2013-07-01 12:30    TYPE_DAY_MINUTE2:  YYYY-MM-DDThh:mm  e.g:  2013-07-01T12:30    TYPE_DAY_SECOND1:  YYYY-MM-DD hh:mm:ss  e.g:  2013-07-01 12:30:59    TYPE_DAY_SECOND2:  YYYY-MM-DDThh:mm:ss  e.g:  2013-07-01T12:30:59    TYPE_DAY_SECOND_FRACTION1:  YYYY-MM-DD hh:mm:ss.fff  e.g:  2013-07-01 04:02:00.000156    TYPE_DAY_SECOND_FRACTION2:  YYYY-MM-DDThh:mm:ss.fff  e.g:  2013-07-01T12:30:59.001      Range  A range defines an arithmetic sequence where the first element is the LCONF-Range-Start-Number.  To force always the inclusion of the  LCONF-Range-End-Number  the Literal Name Token  FORCE  is set.    TYPE_RANGE_OF_ELEMENTS:   Start-Number|Step-Number|Number-Of-Elements  \n    Example:  -10|1|*21 ,  512.4|0.125|*8     TYPE_RANGE_BY_END_VALUE:   Start-Number|Step-Number|End-Number  \n     100.8|1.27|106  Start-Number|Step-Number|Number|FORCE  \n     100.8|1.27|106|FORCE       ___SECTION :: 4 :: LCONF :: LCONF_Value_Types\n# TYPE_NOTSET\nkey1 :: NOTSET\n\n# TYPE_STRING\nkey2 :: Any text\n\n# TYPE_DIGITS\nregistration_number :: 778945215643219945167845123689\n\n# TYPE_PATTERN_DIGITS: `@@@-@@-@@@@`\nsocial_security_number :: 123-55-6678\n\n# TYPE_BOOLEAN\nkey3 :: true\nkey4 :: false\n\n# TYPE_INTEGER\nkey5 :: +9223372036854775807\nkey6 :: -9223372036854775808\n\n# TYPE_FLOAT\nkey7 :: -0.01\nkey8 :: 0.0\nkey9 :: +3.1415\n\nkey10 :: 5e+22\nkey11 :: -2E-2\n\nkey12 :: -1.54e-003\nkey13 :: 6.196E63\n\nkey14 :: 1/8\nkey15 :: +3/4\n\n# TYPE_NUMBER\nkey16 :: +92\nkey17 :: -2E-2\nkey18 :: 1/100\n\n# TYPE_MONTH\nkey19 :: 1932-08\nkey20 :: 2014-11\n\n# TYPE_DAY\nkey19 :: 1932-08-27\nkey20 :: 2014-11-15\n\n# TYPE_MINUTE\nkey21 :: 12:30\n\n# TYPE_SECOND\nkey22 :: 02:30:42\n\n# TYPE_SECOND_FRACTION\nkey23 :: 18:53:16.145\n\n# TYPE_DAY_MINUTE1\nkey24 :: 2013-07-01 12:30\n\n# TYPE_DAY_MINUTE2\nkey25 :: 2013-07-01T12:30\n\n# TYPE_DAY_SECOND1\nkey26 :: 2013-07-01 12:30:59\n\n# TYPE_DAY_SECOND2\nkey27:: 2013-07-01T12:30:59\n\n# TYPE_DAY_SECOND_FRACTION1\nkey28 :: 2013-07-01 12:30:59.001\n\n# TYPE_DAY_SECOND_FRACTION2\nkey29 :: 2013-07-01T12:30:59.001\n\n# TYPE_RANGE_OF_ELEMENTS\n# 21 elements: `-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10`\nkey29 :: -10|1|*21\n\n# TYPE_RANGE_BY_END_VALUE\n# elements: `-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5`\nkey30 :: -10|1|5\n\n# elements: `100.8, 99.53, 98.26, 96.99, 95.72, 94.45, 93.18, 92.1`\nkey31 :: 100.8|-1.27|92.1|FORCE\n___END",
            "title": "1.2.5. LCONF-Value-Types"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#126-summary-of-restrictions",
            "text": "LCONF-Sections MUST NOT contain any lines with  Trailing Space .  LCONF_BLANK_LINE: A line that contains only whitespace characters (zero or more) is not parsed.  LCONF_SECTION_START Token  ___SECTION  is a reserved LCONF character sequence.  LCONF_SECTION_END Token  ___END  is a reserved LCONF character sequence.  TYPE_NOTSET  NOTSET  is a reserved LCONF character sequence.",
            "title": "1.2.6. Summary of Restrictions"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#1261-first-none-white-character-of-a-line",
            "text": "Some first none white character of a line are  reserved  as special purpose  Identifiers . Most of them are permitted\nin values.  First None White Character Of A Line are reserved:   LCONF_NUMBER_SIGN  #  is reserved only for  LCONF_COMMENT_LINE_IDENTIFIER  LCONF_SLASH  /  is reserved only for  LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER  LCONF_VERTICAL_LINE  |  is reserved only for  STRUCTURE_TABLE_IDENTIFIER  and also used as\n     STRUCTURE_TABLE_VALUE_SEPARATOR .  LCONF_MINUS  -  is reserved only for  STRUCTURE_LIST_IDENTIFIER .  LCONF_PERIOD  .  is reserved only for  STRUCTURE_SINGLE_BLOCK_IDENTIFIER .  LCONF_ASTERISK  *  is reserved only for  STRUCTURE_NAMED_BLOCKS_IDENTIFIER     STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER .",
            "title": "1.2.6.1. First None White Character Of A Line"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#1262-unique-lconf-key-names",
            "text": "Within a  STRUCTURE_SINGLE_BLOCK  all direct child LCONF-Key-Names (keys with one additional indentation level) MUST\n    be unique.    A  LCONF-Root  is a special STRUCTURE_SINGLE_BLOCK and all direct child LCONF-Key-Names (keys with no indentation\n    level) MUST be unique.    Within a  STRUCTURE_NAMED_BLOCKS  all direct child LCONF-Key-Names (keys with one additional indentation level) MUST\n    be unique.    LCONF-Column-Names (STRUCTURE_TABLE's Column-Names are also considered to be LCONF-Key-Names) MUST be unique within\n    a STRUCTURE_TABLE.",
            "title": "1.2.6.2. Unique LCONF-Key-Names"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#1263-lconf-key-names",
            "text": "The default LCONF_SCHEMA_STRICT_FORMAT  STRICT  adds some contraints to LCONF-Key-Names.  A LCONF_SCHEMA_STRICT_FORMAT LCONF-Key-Name (STRUCTURE_TABLE's LCONF-Column-Name are also considered to be\nLCONF-Key-Names):  MUST be a sequence of one or more (but maximum thirty-one '31') characters of these groups:   LCONF_UNDERSCORE  LCONF_CAPITAL_LETTERS  LCONF_SMALL_LETTERS  LCONF_DIGITS   Additionally constraints:   The first character MUST NOT be a LCONF_DIGITS  The name SHOULD NOT be one of LCONF's Literal Name Tokens  The name SHOULD NOT be one of common reserved programming words",
            "title": "1.2.6.3. LCONF-Key-Names"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#127-lconf-schema-definitions",
            "text": "LCONF uses LCONF-Schema-Definitions to descripe the structure and default content as well as any constraints on the\nstructure and content of a LCONF-Section, above and beyond the basic syntactical constraints imposed by LCONF itself.\nLCONF-Schema-Definitions are valid LCONF syntax.",
            "title": "1.2.7. LCONF-Schema-Definitions"
        },
        {
            "location": "/lconf-specification/1-lconf-standard/#1271-full-length-example-invoice",
            "text": "A example LCONF-Schema for the: Full Length Example (Invoice)  ___SECTION :: 4 :: STRICT :: Schema: Full Length Example (Invoice)\n\n. invoice | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER\n\n. date | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_DAY\n\n. Adresses | STRUCTURE_NAMED_BLOCKS (1,2)\n\n    . TEMPLATE_BLOCK | STRUCTURE_SINGLE_BLOCK\n\n        . given | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n        . family | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n        . address | STRUCTURE_SINGLE_BLOCK\n\n            . lines | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n            . city | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n            . state | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING (2,2)\n\n            . postal | STRUCTURE_PAIR\n                ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER (10000,99999)\n\n. product | STRUCTURE_UNNAMED_BLOCKS (1,NOTSET)\n\n    . TEMPLATE_BLOCK | STRUCTURE_SINGLE_BLOCK\n\n        . sku | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING (6,6)\n\n        . quantity | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER (1,NOTSET)\n\n        . description | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n\n        . price | STRUCTURE_PAIR\n            ITEM :: REQUIRED_NOT_EMPTY | TYPE_FLOAT\n\n. tax | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_FLOAT\n\n. total | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_FLOAT\n\n# This Comment line will not be parsed but\n# the next one starting with a slah is a LCONF-Schema-Comment-Line and is parsed\n/ a list of comments which are part of the data\n. comments | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n___END",
            "title": "1.2.7.1. Full Length Example (Invoice)"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/",
            "text": "This file is part of the \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\n\n\n2. LCONF Terminology\n\n\nA collection of most LCONF terms and base definitions used in the\n\nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\n2.1. Characters\n\n\n2.1.1. Single Characters\n\n\n\n\n\n\n\n\nName\n\n\nUnicode\n\n\nUnicode Name\n\n\nASCII Dec\n\n\n\n\n\n\n\n\n\n\nLCONF_SPACE\n\n\nU+0020\n\n\nSPACE\n\n\n32\n\n\n\n\n\n\nLCONF_NUMBER_SIGN\n\n\nU+0023\n\n\nNUMBER SIGN\n\n\n35\n\n\n\n\n\n\nLCONF_LEFT_PARENTHESIS\n\n\nU+0028\n\n\nLEFT PARENTHESIS\n\n\n40\n\n\n\n\n\n\nLCONF_RIGHT_PARENTHESIS\n\n\nU+0029\n\n\nRIGHT PARENTHESIS\n\n\n41\n\n\n\n\n\n\nLCONF_ASTERISK\n\n\nU+002A\n\n\nASTERISK\n\n\n42\n\n\n\n\n\n\nLCONF_PLUS\n\n\nU+002B\n\n\nPLUS SIGN\n\n\n43\n\n\n\n\n\n\nLCONF_COMMA\n\n\nU+002C\n\n\nCOMMA\n\n\n44\n\n\n\n\n\n\nLCONF_MINUS\n\n\nU+002D\n\n\nHYPHEN-MINUS\n\n\n45\n\n\n\n\n\n\nLCONF_PERIOD\n\n\nU+002E\n\n\nFULL STOP\n\n\n46\n\n\n\n\n\n\nLCONF_SLASH\n\n\nU+002F\n\n\nSOLIDUS\n\n\n47\n\n\n\n\n\n\nLCONF_COLON\n\n\nU+003A\n\n\nCOLON\n\n\n58\n\n\n\n\n\n\nLCONF_LESS_THAN_SIGN\n\n\nU+003C\n\n\nLESS-THAN SIGN\n\n\n60\n\n\n\n\n\n\nLCONF_EQUALS_SIGN\n\n\nU+003D\n\n\nEQUALS SIGN\n\n\n61\n\n\n\n\n\n\nLCONF_GREATER_THAN_SIGN\n\n\nGREATER-THAN SIGN\n\n\nVERTICAL LINE\n\n\n62\n\n\n\n\n\n\nLCONF_AT_SIGN\n\n\nU+0040\n\n\nCOMMERCIAL AT\n\n\n64\n\n\n\n\n\n\nLCONF_LEFT_SQUARE_BRACKET\n\n\nU+005B\n\n\nLEFT SQUARE BRACKET\n\n\n91\n\n\n\n\n\n\nLCONF_RIGHT_SQUARE_BRACKET\n\n\nU+005D\n\n\nRIGHT SQUARE BRACKET\n\n\n93\n\n\n\n\n\n\nLCONF_UNDERSCORE\n\n\nU+005F\n\n\nLOW LINE\n\n\n95\n\n\n\n\n\n\nLCONF_VERTICAL_LINE\n\n\nU+007C\n\n\nVERTICAL LINE\n\n\n124\n\n\n\n\n\n\n\n\n2.1.2. Character Group\n\n\n\n\n\n\n\n\nName\n\n\nUnicode\n\n\nUnicode Name\n\n\nASCII Dec\n\n\n\n\n\n\n\n\n\n\nLCONF_DIGITS\n\n\nThe code points U+0030 through U+0039\n\n\nDIGIT ZERO through DIGIT NINE\n\n\n48 through 57\n\n\n\n\n\n\nLCONF_CAPITAL_LETTERS\n\n\nThe code points U+0041 through U+005A\n\n\nLATIN CAPITAL LETTER A through LATIN CAPITAL LETTER Z\n\n\n65 through 90\n\n\n\n\n\n\nLCONF_SMALL_LETTERS\n\n\nThe code points U+0061 through U+007A\n\n\nLATIN SMALL LETTER A through LATIN SMALL LETTER Z\n\n\n97 through 122\n\n\n\n\n\n\n\n\n2.2. Literal Name Tokens\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nLCONF_SECTION_START\n\n\nU+005F U+005F U+005F U+0053 U+0045 U+0043 U+0054 U+0049 U+004F U+004E\n\n\n___SECTION\n\n\n\n\n\n\nLCONF_SECTION_END\n\n\nU+005F U+005F U+005F U+0045 U+004E U+0044\n\n\n___END\n\n\n\n\n\n\nLCONF_SECTION_FORMAT\n\n\nU+004C U+0043 U+004F U+004E U+0046\n\n\nLCONF\n\n\n\n\n\n\nLCONF_SCHEMA_STRICT_FORMAT\n\n\nU+0053 U+0054 U+0052 U+0049 U+0043 U+0054\n\n\nSTRICT\n\n\n\n\n\n\nLCONF_SCHEMA_FLEXIBLE_FORMAT\n\n\nU+0046 U+004C U+0045 U+0058 U+0049 U+0042 U+004C U+0045\n\n\nFLEXIBLE\n\n\n\n\n\n\nLCONF_TRUE\n\n\nU+0074 U+0072 U+0075 U+0065\n\n\ntrue\n\n\n\n\n\n\nLCONF_FALSE\n\n\nU+0066 U+0061 U+006C U+0073 U+0065\n\n\nfalse\n\n\n\n\n\n\nLCONF_NOTSET\n\n\nU+004E U+004F U+0054 U+0053 U+0045 U+0054\n\n\nNOTSET\n\n\n\n\n\n\nLCONF_FORCE\n\n\nU+0046 U+004F U+0052 U+0043 U+0045\n\n\nFORCE\n\n\n\n\n\n\n\n\n\n\n___SECTION\n is a reserved LCONF character sequence.\n\n\n___END\n is a reserved LCONF character sequence.\n\n\nNOTSET\n is a reserved LCONF character sequence.\n\n\n\n\n2.3. LCONF Structures\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nSTRUCTURE_PAIR\n\n\nAssociates a LCONF-Key-Name with one data value.\n\n\n\n\n\n\nSTRUCTURE_TABLE\n\n\nAssociates a LCONF-Key-Name with ordered tabular-data (columns and rows).\n\n\n\n\n\n\nSTRUCTURE_LIST\n\n\nAssociates a LCONF-Key-Name with an ordered sequence (list) of data values.\n\n\n\n\n\n\nSTRUCTURE_SINGLE_BLOCK\n\n\nA collection of any of the six LCONF-Structures.\n\n\n\n\n\n\nSTRUCTURE_NAMED_BLOCKS\n\n\nA collection of repeated named STRUCTURE_SINGLE_BLOCKs.\n\n\n\n\n\n\nSTRUCTURE_UNNAMED_BLOCKS\n\n\nA collection of repeated unnamed STRUCTURE_SINGLE_BLOCKs.\n\n\n\n\n\n\n\n\n2.4. Structural Tokens\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nSTRUCTURE_LIST_IDENTIFIER\n\n\nLCONF_MINUS\n\n\n\n\n\n\n\n\nSTRUCTURE_LIST_VALUE_SEPARATOR\n\n\nLCONF_COMMA\n\n\n\n\n\n\n\n\nSTRUCTURE_TABLE_IDENTIFIER\n\n\nLCONF_VERTICAL_LINE\n\n\n\n\n\n\n\n\nSTRUCTURE_TABLE_VALUE_SEPARATOR\n\n\nLCONF_VERTICAL_LINE\n\n\n\n\n\n\n\n\nSTRUCTURE_SINGLE_BLOCK_IDENTIFIER\n\n\nLCONF_PERIOD\n\n\n\n\n\n\n\n\nSTRUCTURE_NAMED_BLOCKS_IDENTIFIER\n\n\nLCONF_ASTERISK\n\n\n\n\n\n\n\n\nSTRUCTURE_UNNAMED_BLOCKS_IDENTIFIER\n\n\nLCONF_ASTERISK\n\n\n\n\n\n\n\n\nLCONF_SINGLE_BLOCK_REUSE\n\n\nDouble LCONF_EQUALS_SIGN\n\n\n==\n\n\n\n\n\n\nLCONF_SCHEMA_SEPARATOR\n\n\nLCONF_VERTICAL_LINE\n\n\n\n\n\n\n\n\nLCONF_SCHEMA_COMMENT_LINE_IDENTIFIER\n\n\nLCONF_SLASH\n\n\n\n\n\n\n\n\nLCONF_COMMENT_LINE_IDENTIFIER\n\n\nLCONF_NUMBER_SIGN\n\n\n\n\n\n\n\n\nLCONF_KEY_VALUE_SEPARATOR\n\n\nDouble LCONF_COLON\n\n\n::\n\n\n\n\n\n\n\n\n2.4.1. Optional Structural Tokens\n\n\nLCONF-Schema-Definitions uses optional constrain structural tokens:\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nLCONF-Constrain-Digits-Pattern\n\n\nLCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS\n\n\n(+@ @@@ @@@ @@@@)\n\n\n\n\n\n\nLCONF-Constrain-Predefined-Values\n\n\nLCONF_LEFT_SQUARE_BRACKET and LCONF_RIGHT_SQUARE_BRACKET\n\n\n[value1, Value2]\n\n\n\n\n\n\nLCONF-Constrain-Min-Max\n\n\nLCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS\n\n\n(1,12)\n\n\n\n\n\n\n\n\n2.5. LCONF Key-Names\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Key-Name\n\n\nA sequence of one or more Unicode characters and is case-sensitive. A LCONF-Key-Name MUST NOT contain any LCONF_VERTICAL_LINE.\n\n\n\n\n\n\nLCONF-Column-Name\n\n\nSTRUCTURE_TABLE's Column-Names are also considered to be LCONF-Key-Names.\n\n\n\n\n\n\n\n\nNOTE:\n LCONF-Schema-Definitions MAY add additional constraints to LCONF-Key-Names.\n\n\n2.6. LCONF Value Types\n\n\n2.6.1. NOTSET\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_NOTSET\n\n\nThe literal name token LCONF_NOTSET (\nNOTSET\n).\n\n\n\n\n\n\n\n\nTYPE_NOTSET: is used to indicate the lack of a value and is different from an Empty-Value.\n\n\n2.6.2. String\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_STRING\n\n\nA sequence of zero or more Unicode characters.\n\n\n\n\n\n\nTYPE_DIGITS\n\n\nA TYPE_STRING constraint to only LCONF_DIGITS.\n\n\n\n\n\n\nTYPE_PATTERN_DIGITS\n\n\nA TYPE_STRING constraint to a pattern where only the individual LCONF_DIGITS MAY change.\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE_PATTERN_DIGITS\n format uses the LCONF_AT_SIGN \n@\n as placeholder for expected digits.\n\n\n@@@-@@-@@@@\n  could be used as pattern for \n123-55-6678\n\n\n\n\n\n\n2.6.3. Booleans\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_BOOLEAN\n\n\nLCONF_TRUE or LCONF_FALSE.  Literal Name Token: \ntrue\n or \nfalse\n.\n\n\n\n\n\n\n\n\n2.6.4. Numbers\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Number-Fractional-Part\n\n\nA LCONF_PERIOD followed by one or more LCONF_DIGITS.\n\n\n\n\n\n\nLCONF-Number-E_Exponent\n\n\nThe code point U+0065 (LATIN SMALL LETTER E) or U+0045 (LATIN CAPITAL LETTER E)\n\n\n\n\n\n\nLCONF-Number-Exponent-Part\n\n\nA LCONF-Number-E_Exponent followed by one or more LCONF_DIGITS optionally prefixed by a LCONF_PLUS or LCONF_MINUS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_INTEGER\n\n\nMUST contain only LCONF_DIGITS. It MAY have a preceding LCONF_PLUS or LCONF_MINUS.\n\n\n\n\n\n\nTYPE_FLOAT\n\n\nsupports four different notations.\n\n\n\n\n\n\nTYPE_NUMBER\n\n\ncan be any of TYPE_INTEGER or TYPE_FLOAT.\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE_INTEGER: 64 bit (signed long) range expected (\n-9223372036854775808\n to \n+9223372036854775807\n).\n\n\n\n\n\n\nTYPE_FLOAT: supports four different notations.\n\n\n\n\nFractional: \n+3.1415\n, \n-3.1415\n\n\nExponent: \n5e+22\n, \n-2E-2\n\n\nFractional And Exponent Mixed: \n6.196E63\n, \n-1.54e-003\n\n\nFraction P/Q Of Two Integers: \n+3/4\n, \n-93/16\n, \n1/8\n, \n2789/-598\ns\n\n\n\n\n\n\n\n\n2.6.5.  Date / Time Separators\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Date-Separator\n\n\nA LCONF_MINUS is used as separator for date parts.\n\n\n\n\n\n\nLCONF-Time-Separator\n\n\nA LCONF_COLON is used as separator for time parts.\n\n\n\n\n\n\nLCONF-Date-Time-Separator\n\n\nA code point U+0054 (LATIN CAPITAL LETTER T) \n\" T \"\n or LCONF_SPACE.\n\n\n\n\n\n\n\n\n2.6.6.  Dates\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Year\n\n\n[YYYY] indicates a four-digit year, 0000 through 9999.\n\n\n\n\n\n\nLCONF-Month\n\n\n[MM] indicates a two-digit month of that year, 01 through 12.\n\n\n\n\n\n\nLCONF-Day\n\n\n[DD] indicates a two-digit day of that month, 01 through 31.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_MONTH\n\n\nYYYY-MM\n e.g.: \n1945-03\n\n\n\n\n\n\nTYPE_DAY\n\n\nYYYY-MM-DD\n e.g. \n2014-11-15\n\n\n\n\n\n\n\n\n2.6.7. Times\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Hour\n\n\n[hh] refers to a zero-padded hour between 00 and 24 (24 only to denote midnight at the end of a day)\n\n\n\n\n\n\nLCONF-Minute\n\n\n[mm] refers to a zero-padded minute between 00 and 59.\n\n\n\n\n\n\nLCONF-Second\n\n\n[ss] refers to a zero-padded second between 00 and 60 (60 only to denote an added leap second).\n\n\n\n\n\n\nLCONF-Second-Fraction-Part\n\n\n[fff] refers to LCONF_PERIOD followed by one or more LCONF_DIGITS representing a decimal fraction of a second.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_MINUTE\n\n\nhh:mm\n e.g: \n12:30\n\n\n\n\n\n\nTYPE_SECOND\n\n\nhh:mm:ss\n e.g: \n02:30:42\n\n\n\n\n\n\nTYPE_SECOND_FRACTION\n\n\nhh:mm:ss.fff\n e.g: \n12:30:59.001\n, \n04:02:00.000156\n, \n18:53:16.1\n\n\n\n\n\n\n\n\n2.6.8. Date/Times\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nTYPE_DAY_MINUTE1\n\n\nYYYY-MM-DD hh:mm\n e.g: \n2013-07-01 12:30\n\n\n\n\n\n\nTYPE_DAY_MINUTE2\n\n\nYYYY-MM-DDThh:mm\n e.g: \n2013-07-01T12:30\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE_DAY_SECOND1\n\n\nYYYY-MM-DD hh:mm:ss\n e.g: \n2013-07-01 12:30:59\n\n\n\n\n\n\nTYPE_DAY_SECOND2\n\n\nYYYY-MM-DDThh:mm:ss\n e.g: \n2013-07-01T12:30:59\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE_DAY_SECOND_FRACTION1\n\n\nYYYY-MM-DD hh:mm:ss.fff\n e.g: \n2013-07-01 04:02:00.000156\n\n\n\n\n\n\nTYPE_DAY_SECOND_FRACTION2\n\n\nYYYY-MM-DDThh:mm:ss.fff\n e.g: \n2013-07-01T12:30:59.001\n\n\n\n\n\n\n\n\n2.6.8. Ranges\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Range-Part-Separator\n\n\nA LCONF_VERTICAL_LINE is used as separator for range parts.\n\n\n\n\n\n\nLCONF-Range-Start-Number\n\n\nA LCONF-Number\n\n\n\n\n\n\nLCONF-Range-Step-Number\n\n\nAny LCONF-Number MUST NOT be equal to 0 (zero)\n\n\n\n\n\n\nLCONF-Range-End-Number\n\n\nA LCONF-Number\n\n\n\n\n\n\nLCONF-Range-Number-Of-Elements\n\n\nLCONF_ASTERISK followed by a LCONF-Integer greater than zero without LCONF_PLUS.\n\n\n\n\n\n\n\n\n\n\n\n\nTYPE_RANGE_OF_ELEMENTS:\n\n\n\n\nLCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-Number-Of-Elements \n\n    Example: \n-10|1|*21\n, \n512.4|0.125|*8\n\n\n\n\n\n\n\n\nTYPE_RANGE_BY_END_VALUE:\n\n\n\n\nLCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number \n\n    \n100.8|1.27|106\n\n\nLCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number|FORCE \n\n    \n100.8|1.27|106|FORCE\n\n\n\n\n\n\n\n\n2.7. LCONF-Item-Requirement-Option\n\n\n\n\n\n\nOPTIONAL\n\n\n\n\nItem is NOT REQUIRED to be defined in a LCONF-Section\n\n\nItem COULD be defined but set \nNOTSET\n\n\nItem COULD be defined and set empty (which will overwrite any defaults)\n\n\nItem COULD be defined and have set a value in accordance to the expected LCONF-Value-Type\n\n\n\n\n\n\n\n\nREQUIRED (this CAN be an Empty-Value)\n\n\n\n\nItem MUST be defined in a LCONF-Section and MUST NOT be set \nNOTSET\n\n\nItem MUST be defined and can be set empty (which will overwrite any defaults)\n\n\nItem MUST be defined and can set a value in accordance to the expected LCONF-Value-Type\n\n\n\n\n\n\n\n\nREQUIRED_NOT_EMPTY (this MUST NOT be an Empty-Value)\n\n\n\n\nItem MUST be defined in a LCONF-Section and MUST NOT be set \nNOTSET\n and MUST NOT be set empty\n\n\nItem MUST be defined and MUST set a value in accordance to the expected LCONF-Value-Type\n\n\n\n\n\n\n\n\n2.8. Diverse Other Terms\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nLCONF-Text\n\n\nA sequence of Unicode characters that MUST contain one or more LCONF-Sections.\n\n\n\n\n\n\nLCONF-Section\n\n\nA sequence of Unicode characters starting with a LCONF_SECTION_START token and ending with the first found LCONF_SECTION_END token.\n\n\n\n\n\n\nLCONF-Schema\n\n\nA sequence of Unicode characters starting with a LCONF_SECTION_START token and ending with the first found LCONF_SECTION_END token.\n\n\n\n\n\n\nLCONF-Section-Name\n\n\nA sequence of one or more Unicode characters.\n\n\n\n\n\n\nLCONF-Indentation-Per-Level\n\n\nOne LCONF-Digit (DIGIT TWO THROUGH DIGIT EIGHT) minimum 2 and maximum 8.\n\n\n\n\n\n\nLCONF_BLANK_LINE\n\n\nA line that contains only whitespace characters (zero or more).\n\n\n\n\n\n\nLCONF_NONE_BLANK_LINE\n\n\nA line that contains one or more none whitespace characters.\n\n\n\n\n\n\nLCONF_EMPTY_STRING\n\n\nA sequence of zero Unicode characters.\n\n\n\n\n\n\nLCONF_EMPTY_LIST\n\n\nAn empty sequence.\n\n\n\n\n\n\nLCONF_EMPTY_TABLE\n\n\nAn empty sequence of tabular-data (columns and rows): no table rows.\n\n\n\n\n\n\nLCONF_EMPTY_REPEATED_BLOCK\n\n\nSTRUCTURE_NAMED_BLOCKS or STRUCTURE_UNNAMED_BLOCKS: An empty collection.\n\n\n\n\n\n\nLCONF_EMPTY_SINGLE_BLOCK\n\n\nSTRUCTURE_SINGLE_BLOCK: An empty collection.\n\n\n\n\n\n\nLCONF-File-Extension\n\n\nThe official extension for LCONF-Data-Serialization-Format files is \n.lconf\n (U+002E U+006C U+0063 U+006F U+006E U+0066)\n\n\n\n\n\n\nLCONFDS-File-Extension\n\n\nThe official extension for LCONF-Data-Serialization-Format Schema-Definition files is \n.STRICT\n (U+002E U+006C U+0063 U+006F U+006E U+0066 U+0073 U+0064)\n\n\n\n\n\n\nLCONF-Template-Structure\n\n\nA specific implementation of a LCONF-Section related code portion with all default values and value types based on corresponding LCONF-Data-Serialization-Format Schema-Definitions.",
            "title": "2. LCONF-Terminology"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#2-lconf-terminology",
            "text": "A collection of most LCONF terms and base definitions used in the LCONF-Data-Serialization-Format-Standard Documentation .",
            "title": "2. LCONF Terminology"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#21-characters",
            "text": "",
            "title": "2.1. Characters"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#211-single-characters",
            "text": "Name  Unicode  Unicode Name  ASCII Dec      LCONF_SPACE  U+0020  SPACE  32    LCONF_NUMBER_SIGN  U+0023  NUMBER SIGN  35    LCONF_LEFT_PARENTHESIS  U+0028  LEFT PARENTHESIS  40    LCONF_RIGHT_PARENTHESIS  U+0029  RIGHT PARENTHESIS  41    LCONF_ASTERISK  U+002A  ASTERISK  42    LCONF_PLUS  U+002B  PLUS SIGN  43    LCONF_COMMA  U+002C  COMMA  44    LCONF_MINUS  U+002D  HYPHEN-MINUS  45    LCONF_PERIOD  U+002E  FULL STOP  46    LCONF_SLASH  U+002F  SOLIDUS  47    LCONF_COLON  U+003A  COLON  58    LCONF_LESS_THAN_SIGN  U+003C  LESS-THAN SIGN  60    LCONF_EQUALS_SIGN  U+003D  EQUALS SIGN  61    LCONF_GREATER_THAN_SIGN  GREATER-THAN SIGN  VERTICAL LINE  62    LCONF_AT_SIGN  U+0040  COMMERCIAL AT  64    LCONF_LEFT_SQUARE_BRACKET  U+005B  LEFT SQUARE BRACKET  91    LCONF_RIGHT_SQUARE_BRACKET  U+005D  RIGHT SQUARE BRACKET  93    LCONF_UNDERSCORE  U+005F  LOW LINE  95    LCONF_VERTICAL_LINE  U+007C  VERTICAL LINE  124",
            "title": "2.1.1. Single Characters"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#212-character-group",
            "text": "Name  Unicode  Unicode Name  ASCII Dec      LCONF_DIGITS  The code points U+0030 through U+0039  DIGIT ZERO through DIGIT NINE  48 through 57    LCONF_CAPITAL_LETTERS  The code points U+0041 through U+005A  LATIN CAPITAL LETTER A through LATIN CAPITAL LETTER Z  65 through 90    LCONF_SMALL_LETTERS  The code points U+0061 through U+007A  LATIN SMALL LETTER A through LATIN SMALL LETTER Z  97 through 122",
            "title": "2.1.2. Character Group"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#22-literal-name-tokens",
            "text": "Name  Definition  Example      LCONF_SECTION_START  U+005F U+005F U+005F U+0053 U+0045 U+0043 U+0054 U+0049 U+004F U+004E  ___SECTION    LCONF_SECTION_END  U+005F U+005F U+005F U+0045 U+004E U+0044  ___END    LCONF_SECTION_FORMAT  U+004C U+0043 U+004F U+004E U+0046  LCONF    LCONF_SCHEMA_STRICT_FORMAT  U+0053 U+0054 U+0052 U+0049 U+0043 U+0054  STRICT    LCONF_SCHEMA_FLEXIBLE_FORMAT  U+0046 U+004C U+0045 U+0058 U+0049 U+0042 U+004C U+0045  FLEXIBLE    LCONF_TRUE  U+0074 U+0072 U+0075 U+0065  true    LCONF_FALSE  U+0066 U+0061 U+006C U+0073 U+0065  false    LCONF_NOTSET  U+004E U+004F U+0054 U+0053 U+0045 U+0054  NOTSET    LCONF_FORCE  U+0046 U+004F U+0052 U+0043 U+0045  FORCE      ___SECTION  is a reserved LCONF character sequence.  ___END  is a reserved LCONF character sequence.  NOTSET  is a reserved LCONF character sequence.",
            "title": "2.2. Literal Name Tokens"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#23-lconf-structures",
            "text": "Name  Definition      STRUCTURE_PAIR  Associates a LCONF-Key-Name with one data value.    STRUCTURE_TABLE  Associates a LCONF-Key-Name with ordered tabular-data (columns and rows).    STRUCTURE_LIST  Associates a LCONF-Key-Name with an ordered sequence (list) of data values.    STRUCTURE_SINGLE_BLOCK  A collection of any of the six LCONF-Structures.    STRUCTURE_NAMED_BLOCKS  A collection of repeated named STRUCTURE_SINGLE_BLOCKs.    STRUCTURE_UNNAMED_BLOCKS  A collection of repeated unnamed STRUCTURE_SINGLE_BLOCKs.",
            "title": "2.3. LCONF Structures"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#24-structural-tokens",
            "text": "Name  Definition  Example      STRUCTURE_LIST_IDENTIFIER  LCONF_MINUS     STRUCTURE_LIST_VALUE_SEPARATOR  LCONF_COMMA     STRUCTURE_TABLE_IDENTIFIER  LCONF_VERTICAL_LINE     STRUCTURE_TABLE_VALUE_SEPARATOR  LCONF_VERTICAL_LINE     STRUCTURE_SINGLE_BLOCK_IDENTIFIER  LCONF_PERIOD     STRUCTURE_NAMED_BLOCKS_IDENTIFIER  LCONF_ASTERISK     STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER  LCONF_ASTERISK     LCONF_SINGLE_BLOCK_REUSE  Double LCONF_EQUALS_SIGN  ==    LCONF_SCHEMA_SEPARATOR  LCONF_VERTICAL_LINE     LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER  LCONF_SLASH     LCONF_COMMENT_LINE_IDENTIFIER  LCONF_NUMBER_SIGN     LCONF_KEY_VALUE_SEPARATOR  Double LCONF_COLON  ::",
            "title": "2.4. Structural Tokens"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#241-optional-structural-tokens",
            "text": "LCONF-Schema-Definitions uses optional constrain structural tokens:     Name  Definition  Example      LCONF-Constrain-Digits-Pattern  LCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS  (+@ @@@ @@@ @@@@)    LCONF-Constrain-Predefined-Values  LCONF_LEFT_SQUARE_BRACKET and LCONF_RIGHT_SQUARE_BRACKET  [value1, Value2]    LCONF-Constrain-Min-Max  LCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS  (1,12)",
            "title": "2.4.1. Optional Structural Tokens"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#25-lconf-key-names",
            "text": "Name  Definition      LCONF-Key-Name  A sequence of one or more Unicode characters and is case-sensitive. A LCONF-Key-Name MUST NOT contain any LCONF_VERTICAL_LINE.    LCONF-Column-Name  STRUCTURE_TABLE's Column-Names are also considered to be LCONF-Key-Names.     NOTE:  LCONF-Schema-Definitions MAY add additional constraints to LCONF-Key-Names.",
            "title": "2.5. LCONF Key-Names"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#26-lconf-value-types",
            "text": "",
            "title": "2.6. LCONF Value Types"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#261-notset",
            "text": "Name  Definition      TYPE_NOTSET  The literal name token LCONF_NOTSET ( NOTSET ).     TYPE_NOTSET: is used to indicate the lack of a value and is different from an Empty-Value.",
            "title": "2.6.1. NOTSET"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#262-string",
            "text": "Name  Definition      TYPE_STRING  A sequence of zero or more Unicode characters.    TYPE_DIGITS  A TYPE_STRING constraint to only LCONF_DIGITS.    TYPE_PATTERN_DIGITS  A TYPE_STRING constraint to a pattern where only the individual LCONF_DIGITS MAY change.       TYPE_PATTERN_DIGITS  format uses the LCONF_AT_SIGN  @  as placeholder for expected digits.  @@@-@@-@@@@   could be used as pattern for  123-55-6678",
            "title": "2.6.2. String"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#263-booleans",
            "text": "Name  Definition      TYPE_BOOLEAN  LCONF_TRUE or LCONF_FALSE.  Literal Name Token:  true  or  false .",
            "title": "2.6.3. Booleans"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#264-numbers",
            "text": "Name  Definition      LCONF-Number-Fractional-Part  A LCONF_PERIOD followed by one or more LCONF_DIGITS.    LCONF-Number-E_Exponent  The code point U+0065 (LATIN SMALL LETTER E) or U+0045 (LATIN CAPITAL LETTER E)    LCONF-Number-Exponent-Part  A LCONF-Number-E_Exponent followed by one or more LCONF_DIGITS optionally prefixed by a LCONF_PLUS or LCONF_MINUS.        Name  Definition      TYPE_INTEGER  MUST contain only LCONF_DIGITS. It MAY have a preceding LCONF_PLUS or LCONF_MINUS.    TYPE_FLOAT  supports four different notations.    TYPE_NUMBER  can be any of TYPE_INTEGER or TYPE_FLOAT.       TYPE_INTEGER: 64 bit (signed long) range expected ( -9223372036854775808  to  +9223372036854775807 ).    TYPE_FLOAT: supports four different notations.   Fractional:  +3.1415 ,  -3.1415  Exponent:  5e+22 ,  -2E-2  Fractional And Exponent Mixed:  6.196E63 ,  -1.54e-003  Fraction P/Q Of Two Integers:  +3/4 ,  -93/16 ,  1/8 ,  2789/-598 s",
            "title": "2.6.4. Numbers"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#265-date-time-separators",
            "text": "Name  Definition      LCONF-Date-Separator  A LCONF_MINUS is used as separator for date parts.    LCONF-Time-Separator  A LCONF_COLON is used as separator for time parts.    LCONF-Date-Time-Separator  A code point U+0054 (LATIN CAPITAL LETTER T)  \" T \"  or LCONF_SPACE.",
            "title": "2.6.5.  Date / Time Separators"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#266-dates",
            "text": "Name  Definition      LCONF-Year  [YYYY] indicates a four-digit year, 0000 through 9999.    LCONF-Month  [MM] indicates a two-digit month of that year, 01 through 12.    LCONF-Day  [DD] indicates a two-digit day of that month, 01 through 31.        Name  Definition      TYPE_MONTH  YYYY-MM  e.g.:  1945-03    TYPE_DAY  YYYY-MM-DD  e.g.  2014-11-15",
            "title": "2.6.6.  Dates"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#267-times",
            "text": "Name  Definition      LCONF-Hour  [hh] refers to a zero-padded hour between 00 and 24 (24 only to denote midnight at the end of a day)    LCONF-Minute  [mm] refers to a zero-padded minute between 00 and 59.    LCONF-Second  [ss] refers to a zero-padded second between 00 and 60 (60 only to denote an added leap second).    LCONF-Second-Fraction-Part  [fff] refers to LCONF_PERIOD followed by one or more LCONF_DIGITS representing a decimal fraction of a second.        Name  Definition      TYPE_MINUTE  hh:mm  e.g:  12:30    TYPE_SECOND  hh:mm:ss  e.g:  02:30:42    TYPE_SECOND_FRACTION  hh:mm:ss.fff  e.g:  12:30:59.001 ,  04:02:00.000156 ,  18:53:16.1",
            "title": "2.6.7. Times"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#268-datetimes",
            "text": "Name  Definition      TYPE_DAY_MINUTE1  YYYY-MM-DD hh:mm  e.g:  2013-07-01 12:30    TYPE_DAY_MINUTE2  YYYY-MM-DDThh:mm  e.g:  2013-07-01T12:30        TYPE_DAY_SECOND1  YYYY-MM-DD hh:mm:ss  e.g:  2013-07-01 12:30:59    TYPE_DAY_SECOND2  YYYY-MM-DDThh:mm:ss  e.g:  2013-07-01T12:30:59        TYPE_DAY_SECOND_FRACTION1  YYYY-MM-DD hh:mm:ss.fff  e.g:  2013-07-01 04:02:00.000156    TYPE_DAY_SECOND_FRACTION2  YYYY-MM-DDThh:mm:ss.fff  e.g:  2013-07-01T12:30:59.001",
            "title": "2.6.8. Date/Times"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#268-ranges",
            "text": "Name  Definition      LCONF-Range-Part-Separator  A LCONF_VERTICAL_LINE is used as separator for range parts.    LCONF-Range-Start-Number  A LCONF-Number    LCONF-Range-Step-Number  Any LCONF-Number MUST NOT be equal to 0 (zero)    LCONF-Range-End-Number  A LCONF-Number    LCONF-Range-Number-Of-Elements  LCONF_ASTERISK followed by a LCONF-Integer greater than zero without LCONF_PLUS.       TYPE_RANGE_OF_ELEMENTS:   LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-Number-Of-Elements  \n    Example:  -10|1|*21 ,  512.4|0.125|*8     TYPE_RANGE_BY_END_VALUE:   LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number  \n     100.8|1.27|106  LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number|FORCE  \n     100.8|1.27|106|FORCE",
            "title": "2.6.8. Ranges"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#27-lconf-item-requirement-option",
            "text": "OPTIONAL   Item is NOT REQUIRED to be defined in a LCONF-Section  Item COULD be defined but set  NOTSET  Item COULD be defined and set empty (which will overwrite any defaults)  Item COULD be defined and have set a value in accordance to the expected LCONF-Value-Type     REQUIRED (this CAN be an Empty-Value)   Item MUST be defined in a LCONF-Section and MUST NOT be set  NOTSET  Item MUST be defined and can be set empty (which will overwrite any defaults)  Item MUST be defined and can set a value in accordance to the expected LCONF-Value-Type     REQUIRED_NOT_EMPTY (this MUST NOT be an Empty-Value)   Item MUST be defined in a LCONF-Section and MUST NOT be set  NOTSET  and MUST NOT be set empty  Item MUST be defined and MUST set a value in accordance to the expected LCONF-Value-Type",
            "title": "2.7. LCONF-Item-Requirement-Option"
        },
        {
            "location": "/lconf-specification/2-lconf-terminology/#28-diverse-other-terms",
            "text": "Name  Definition      LCONF-Text  A sequence of Unicode characters that MUST contain one or more LCONF-Sections.    LCONF-Section  A sequence of Unicode characters starting with a LCONF_SECTION_START token and ending with the first found LCONF_SECTION_END token.    LCONF-Schema  A sequence of Unicode characters starting with a LCONF_SECTION_START token and ending with the first found LCONF_SECTION_END token.    LCONF-Section-Name  A sequence of one or more Unicode characters.    LCONF-Indentation-Per-Level  One LCONF-Digit (DIGIT TWO THROUGH DIGIT EIGHT) minimum 2 and maximum 8.    LCONF_BLANK_LINE  A line that contains only whitespace characters (zero or more).    LCONF_NONE_BLANK_LINE  A line that contains one or more none whitespace characters.    LCONF_EMPTY_STRING  A sequence of zero Unicode characters.    LCONF_EMPTY_LIST  An empty sequence.    LCONF_EMPTY_TABLE  An empty sequence of tabular-data (columns and rows): no table rows.    LCONF_EMPTY_REPEATED_BLOCK  STRUCTURE_NAMED_BLOCKS or STRUCTURE_UNNAMED_BLOCKS: An empty collection.    LCONF_EMPTY_SINGLE_BLOCK  STRUCTURE_SINGLE_BLOCK: An empty collection.    LCONF-File-Extension  The official extension for LCONF-Data-Serialization-Format files is  .lconf  (U+002E U+006C U+0063 U+006F U+006E U+0066)    LCONFDS-File-Extension  The official extension for LCONF-Data-Serialization-Format Schema-Definition files is  .STRICT  (U+002E U+006C U+0063 U+006F U+006E U+0066 U+0073 U+0064)    LCONF-Template-Structure  A specific implementation of a LCONF-Section related code portion with all default values and value types based on corresponding LCONF-Data-Serialization-Format Schema-Definitions.",
            "title": "2.8. Diverse Other Terms"
        },
        {
            "location": "/lconf-specification/3-lconf-text/",
            "text": "This file is part of the \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\n\n\n3. LCONF Text\n\n\nA sequence of Unicode characters that MUST contain one or more named LCONF-Sections.\n\n\nWARNING:\n LCONF-Text MUST NOT contain any LCONF_SECTION_START or LCONF_SECTION_END token in any form except for the\ndefined purpose. Each LCONF_SECTION_START token MUST be closed by a LCONF_SECTION_END token.\n\n\nThe set of tokens includes structural tokens, literal name tokens as well as diverse LCONF-Value-Types.\n\n\n3.1. Structural Tokens\n\n\nThe structural tokens:\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nSTRUCTURE_LIST_IDENTIFIER\n\n\nLCONF_MINUS\n\n\n\n\n\n\n\n\nSTRUCTURE_LIST_VALUE_SEPARATOR\n\n\nLCONF_COMMA\n\n\n\n\n\n\n\n\nSTRUCTURE_TABLE_IDENTIFIER\n\n\nLCONF_VERTICAL_LINE\n\n\n\n\n\n\n\n\nSTRUCTURE_TABLE_VALUE_SEPARATOR\n\n\nLCONF_VERTICAL_LINE\n\n\n\n\n\n\n\n\nSTRUCTURE_SINGLE_BLOCK_IDENTIFIER\n\n\nLCONF_PERIOD\n\n\n\n\n\n\n\n\nSTRUCTURE_NAMED_BLOCKS_IDENTIFIER\n\n\nLCONF_ASTERISK\n\n\n\n\n\n\n\n\nSTRUCTURE_UNNAMED_BLOCKS_IDENTIFIER\n\n\nLCONF_ASTERISK\n\n\n\n\n\n\n\n\nLCONF_SINGLE_BLOCK_REUSE\n\n\nDouble LCONF_EQUALS_SIGN\n\n\n==\n\n\n\n\n\n\nLCONF_SCHEMA_SEPARATOR\n\n\nLCONF_VERTICAL_LINE\n\n\n\n\n\n\n\n\nLCONF_SCHEMA_COMMENT_LINE_IDENTIFIER\n\n\nLCONF_SLASH\n\n\n\n\n\n\n\n\nLCONF_COMMENT_LINE_IDENTIFIER\n\n\nLCONF_NUMBER_SIGN\n\n\n\n\n\n\n\n\nLCONF_KEY_VALUE_SEPARATOR\n\n\nDouble LCONF_COLON\n\n\n::\n\n\n\n\n\n\n\n\n3.1.1 Optional Structural Tokens\n\n\nLCONF-Schema-Definitions uses optional constrain structural tokens:\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nLCONF-Constrain-Digits-Pattern\n\n\nLCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS\n\n\n(+@ @@@ @@@ @@@@)\n\n\n\n\n\n\nLCONF-Constrain-Predefined-Values\n\n\nLCONF_LEFT_SQUARE_BRACKET and LCONF_RIGHT_SQUARE_BRACKET\n\n\n[value1, Value2]\n\n\n\n\n\n\nLCONF-Constrain-Min-Max\n\n\nLCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS\n\n\n(1,12)\n\n\n\n\n\n\n\n\n3.2. Literal Name Tokens\n\n\nThe literal name tokens:\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nLCONF_SECTION_START\n\n\nU+005F U+005F U+005F U+0053 U+0045 U+0043 U+0054 U+0049 U+004F U+004E\n\n\n___SECTION\n\n\n\n\n\n\nLCONF_SECTION_END\n\n\nU+005F U+005F U+005F U+0045 U+004E U+0044\n\n\n___END\n\n\n\n\n\n\nLCONF_SECTION_FORMAT\n\n\nU+004C U+0043 U+004F U+004E U+0046\n\n\nLCONF\n\n\n\n\n\n\nLCONF_SCHEMA_FLEXIBLE_FORMAT\n\n\nU+004C U+0043 U+004F U+004E U+0046 U+0053 U+0044\n\n\nSTRICT\n\n\n\n\n\n\nLCONF_SCHEMA_STRICT_FORMAT\n\n\nU+004C U+0043 U+004F U+004E U+0046 U+0053 U+0044 U+005F U+0053 U+0054 U+0052 U+0049 U+0043 U+0054\n\n\nFLEXIBLE\n\n\n\n\n\n\nLCONF_TRUE\n\n\nU+0074 U+0072 U+0075 U+0065\n\n\ntrue\n\n\n\n\n\n\nLCONF_FALSE\n\n\nU+0066 U+0061 U+006C U+0073 U+0065\n\n\nfalse\n\n\n\n\n\n\nLCONF_NOTSET\n\n\nU+004E U+004F U+0054 U+0053 U+0045 U+0054\n\n\nNOTSET\n\n\n\n\n\n\nLCONF_FORCE\n\n\nU+0046 U+004F U+0052 U+0043 U+0045\n\n\nFORCE",
            "title": "3. LCONF-Text"
        },
        {
            "location": "/lconf-specification/3-lconf-text/#3-lconf-text",
            "text": "A sequence of Unicode characters that MUST contain one or more named LCONF-Sections.  WARNING:  LCONF-Text MUST NOT contain any LCONF_SECTION_START or LCONF_SECTION_END token in any form except for the\ndefined purpose. Each LCONF_SECTION_START token MUST be closed by a LCONF_SECTION_END token.  The set of tokens includes structural tokens, literal name tokens as well as diverse LCONF-Value-Types.",
            "title": "3. LCONF Text"
        },
        {
            "location": "/lconf-specification/3-lconf-text/#31-structural-tokens",
            "text": "The structural tokens:     Name  Definition  Example      STRUCTURE_LIST_IDENTIFIER  LCONF_MINUS     STRUCTURE_LIST_VALUE_SEPARATOR  LCONF_COMMA     STRUCTURE_TABLE_IDENTIFIER  LCONF_VERTICAL_LINE     STRUCTURE_TABLE_VALUE_SEPARATOR  LCONF_VERTICAL_LINE     STRUCTURE_SINGLE_BLOCK_IDENTIFIER  LCONF_PERIOD     STRUCTURE_NAMED_BLOCKS_IDENTIFIER  LCONF_ASTERISK     STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER  LCONF_ASTERISK     LCONF_SINGLE_BLOCK_REUSE  Double LCONF_EQUALS_SIGN  ==    LCONF_SCHEMA_SEPARATOR  LCONF_VERTICAL_LINE     LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER  LCONF_SLASH     LCONF_COMMENT_LINE_IDENTIFIER  LCONF_NUMBER_SIGN     LCONF_KEY_VALUE_SEPARATOR  Double LCONF_COLON  ::",
            "title": "3.1. Structural Tokens"
        },
        {
            "location": "/lconf-specification/3-lconf-text/#311-optional-structural-tokens",
            "text": "LCONF-Schema-Definitions uses optional constrain structural tokens:     Name  Definition  Example      LCONF-Constrain-Digits-Pattern  LCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS  (+@ @@@ @@@ @@@@)    LCONF-Constrain-Predefined-Values  LCONF_LEFT_SQUARE_BRACKET and LCONF_RIGHT_SQUARE_BRACKET  [value1, Value2]    LCONF-Constrain-Min-Max  LCONF_LEFT_PARENTHESIS  and LCONF_RIGHT_PARENTHESIS  (1,12)",
            "title": "3.1.1 Optional Structural Tokens"
        },
        {
            "location": "/lconf-specification/3-lconf-text/#32-literal-name-tokens",
            "text": "The literal name tokens:     Name  Definition  Example      LCONF_SECTION_START  U+005F U+005F U+005F U+0053 U+0045 U+0043 U+0054 U+0049 U+004F U+004E  ___SECTION    LCONF_SECTION_END  U+005F U+005F U+005F U+0045 U+004E U+0044  ___END    LCONF_SECTION_FORMAT  U+004C U+0043 U+004F U+004E U+0046  LCONF    LCONF_SCHEMA_FLEXIBLE_FORMAT  U+004C U+0043 U+004F U+004E U+0046 U+0053 U+0044  STRICT    LCONF_SCHEMA_STRICT_FORMAT  U+004C U+0043 U+004F U+004E U+0046 U+0053 U+0044 U+005F U+0053 U+0054 U+0052 U+0049 U+0043 U+0054  FLEXIBLE    LCONF_TRUE  U+0074 U+0072 U+0075 U+0065  true    LCONF_FALSE  U+0066 U+0061 U+006C U+0073 U+0065  false    LCONF_NOTSET  U+004E U+004F U+0054 U+0053 U+0045 U+0054  NOTSET    LCONF_FORCE  U+0046 U+004F U+0052 U+0043 U+0045  FORCE",
            "title": "3.2. Literal Name Tokens"
        },
        {
            "location": "/lconf-specification/4-lconf-section/",
            "text": "This file is part of the \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\n\n\n4. LCONF Section\n\n\nA sequence of Unicode characters starting with a LCONF_SECTION_START token and ending with the first found\nLCONF_SECTION_END token. A LCONF-Section MUST NOT contain any additional LCONF_SECTION_START\ntokens.\n\n\n\n\nAny text before or after a valid LCONF-Section is considered additional text.\n\n\nThe LCONF_SECTION_START and  LCONF_SECTION_END token lines MUST NOT contain any indentation and MUST NOT be on the\n    same line.\n\n\n\n\nBelow is an example of a LCONF-Text containing two LCONF-Sections and additional text.\n\n\nAny text before or after a valid LCONF-Section is considered additional text.\n\n___SECTION :: 4 :: LCONF :: Example1\nColor :: Blue\nFONT :: Liberation Mono\n___END\n\nSome more intermitten text followed by a second LCONF-Section.\n\n___SECTION :: 4 :: LCONF :: Example2\nColor :: Red\nFONT :: Open Sans\n___END\n\n\n\n\nA valid but Empty LCONF-Section.\n\n\n___SECTION :: 2 :: LCONF :: Example\n___END\n\n\n\n\nA valid but \nnot recommendet\n LCONF-Section. It is valid because any Text befor the LCONF_SECTION_START token is\ndisregarded - so the actual data starts without any indentation and is the same as the previous Example.\n\n\nAny text before or after a valid LCONF-Section is considered additional text.___SECTION :: 2 :: LCONF :: Example\n___END\n\n\n\n\nEvery LCONF-Section has a LCONF-Section-Name defined in the LCONF-Section-Start-Line.\n\n\n___SECTION :: 2 :: LCONF :: Example Section Name\n___END\n\n\n\n\n4.1. Section Start Line\n\n\n___SECTION :: LCONF-Indentation-Per-Level :: LCONF_SECTION_FORMAT or LCONF_SCHEMA_FLEXIBLE_FORMAT or LCONF_SCHEMA_STRICT_FORMAT:: LCONF-Section-Name\n\n\n\n\nEach LCONF-Section-Start-Line MUST\n\n\n\n\nstart with the LCONF_SECTION_START token\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Indentation-Per-Level\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed be a LCONF_SECTION_FORMAT or LCONF_SCHEMA_STRICT_FORMAT or LCONF_SCHEMA_FLEXIBLE_FORMAT\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Section-Name\n\n\n\n\nExample of a LCONF-Section-Start-Line.\n\n\n___SECTION :: 4 :: LCONF :: Menu Configuration`\n\n\n\n\n___SECTION :: 4 :: STRICT :: Menu Configuration Schema Definition`\n\n\n\n\n___SECTION :: 4 :: FLEXIBLE :: Menu Configuration Schema Definition`\n\n\n\n\n4.2. Blank \n NONE Blank Line\n\n\n\n\nLCONF_BLANK_LINE: A line that contains only whitespace characters (zero or more).\n\n\nLCONF_NONE_BLANK_LINE: A line that contains one or more none whitespace characters.\n\n\n\n\n4.3. Indentation Level\n\n\nLeading whitespace (LCONF_SPACEs) at the beginning of a LCONF-Section-Line is used to compute the indentation level of\nthe line. Within a LCONF-Section only LCONF_SPACEs can be used as indentation. The number of LCONF_SPACEs used per\nLCONF-Indentation-Level is set as part of the LCONF-Section-Start-Line.\n\n\nThe total number of spaces preceding the first non-blank character then determines the line\u2019s indentation.\n\n\nThe LCONF-Data-Serialization-Format uses LCONF-Indentation for readability and as part of its structure.\n\n\n4.4. Trailing Space\n\n\nLCONF-Sections MUST NOT contain any lines with \nTrailing Space\n.\n\n\n4.5. Comment Line\n\n\nLCONF-Comment-Lines SHOULD have the indentation level of the following LCONF_NONE_BLANK_LINE.\n\n\nThe LCONF-Data-Serialization-Format makes a distinction between two types of LCONF-Comment-Lines:\n\n\n\n\n\n\nLCONF-Section-Comment-Line\n: If a LCONF-Section-Line first none whitespace character is a\n    LCONF_COMMENT_LINE_IDENTIFIER it is considered a LCONF-Section-Comment-Line which are not parsed.\n    The usual purpose of a comment line is to communicate between the human maintainers of a file. A typical example is\n    comments in a configuration file.\n\n\n\n\n\n\nLCONF-Schema-Comment-Line\n: If a LCONF-Schema-Line first none whitespace character is a\n    LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER it is considered a LCONF-Schema-Comment-Line which are parsed.\n    The purpose of such LCONF-Schema-Comment-Lines is to emit an example LCONF-Section with additional information.\n\n\nNOTE\n: LCONF-Schema MAY also contain regular LCONF-Section-Comment-Line which are not parsed.\n\n\n\n\n\n\nExample of a LCONF-Section-Comment-Line.\n\n\n___SECTION :: 4 :: LCONF :: Example\n# Comment-Line more info: Registry is a STRUCTURE_SINGLE_BLOCK\n. Registry\n    Name :: Tom Serjo\n    - EmailAddresses\n        # Comment-Line should have the indentation level of the following LCONF_NONE_BLANK_LINE\n        tom1@nomail.net\n        tom2@nomail.net\n\n    # Comment-Line should have the indentation level of the following LCONF_NONE_BLANK_LINE\n\n    City :: Paris\n___END\n\n\n\n\nIt is RECOMMENDED that any LCONF-Comment-Line uses at least one LCONF_SPACE after the LCONF_COMMENT_LINE_IDENTIFIER.\n\n\n___SECTION :: 4 :: LCONF :: Example\n#Comment-Line without space between the Identifier and the comment is valid but SHOUD BE AVOIDED.\nName :: Tom Serjo\n\n# EmailAddresses: Usually one should use one space between the Identifier and the comment text.\n#                 But sometimes one wants to aline a multi-line comment in a certain style.\n- EmailAddresses\n    tom1@nomail.net\n    tom2@nomail.net\nCity :: Paris\n___END\n\n\n\n\nExample of LCONF-Schema-Comment-Lines which are parsed.\n\n\n___SECTION :: 4 :: STRICT :: lconf_standard_example1\n/ \nFamilyName\n: Please use for the first letter uppercase followed by lowercase letters.\n/               e.g. `Williams`\n. FamilyName | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n    DEFAULT ::\n    EMPTY_REPLACEMENT ::\n___END",
            "title": "4. LCONF-Section"
        },
        {
            "location": "/lconf-specification/4-lconf-section/#4-lconf-section",
            "text": "A sequence of Unicode characters starting with a LCONF_SECTION_START token and ending with the first found\nLCONF_SECTION_END token. A LCONF-Section MUST NOT contain any additional LCONF_SECTION_START\ntokens.   Any text before or after a valid LCONF-Section is considered additional text.  The LCONF_SECTION_START and  LCONF_SECTION_END token lines MUST NOT contain any indentation and MUST NOT be on the\n    same line.   Below is an example of a LCONF-Text containing two LCONF-Sections and additional text.  Any text before or after a valid LCONF-Section is considered additional text.\n\n___SECTION :: 4 :: LCONF :: Example1\nColor :: Blue\nFONT :: Liberation Mono\n___END\n\nSome more intermitten text followed by a second LCONF-Section.\n\n___SECTION :: 4 :: LCONF :: Example2\nColor :: Red\nFONT :: Open Sans\n___END  A valid but Empty LCONF-Section.  ___SECTION :: 2 :: LCONF :: Example\n___END  A valid but  not recommendet  LCONF-Section. It is valid because any Text befor the LCONF_SECTION_START token is\ndisregarded - so the actual data starts without any indentation and is the same as the previous Example.  Any text before or after a valid LCONF-Section is considered additional text.___SECTION :: 2 :: LCONF :: Example\n___END  Every LCONF-Section has a LCONF-Section-Name defined in the LCONF-Section-Start-Line.  ___SECTION :: 2 :: LCONF :: Example Section Name\n___END",
            "title": "4. LCONF Section"
        },
        {
            "location": "/lconf-specification/4-lconf-section/#41-section-start-line",
            "text": "___SECTION :: LCONF-Indentation-Per-Level :: LCONF_SECTION_FORMAT or LCONF_SCHEMA_FLEXIBLE_FORMAT or LCONF_SCHEMA_STRICT_FORMAT:: LCONF-Section-Name  Each LCONF-Section-Start-Line MUST   start with the LCONF_SECTION_START token  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF-Indentation-Per-Level  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed be a LCONF_SECTION_FORMAT or LCONF_SCHEMA_STRICT_FORMAT or LCONF_SCHEMA_FLEXIBLE_FORMAT  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF-Section-Name   Example of a LCONF-Section-Start-Line.  ___SECTION :: 4 :: LCONF :: Menu Configuration`  ___SECTION :: 4 :: STRICT :: Menu Configuration Schema Definition`  ___SECTION :: 4 :: FLEXIBLE :: Menu Configuration Schema Definition`",
            "title": "4.1. Section Start Line"
        },
        {
            "location": "/lconf-specification/4-lconf-section/#42-blank-none-blank-line",
            "text": "LCONF_BLANK_LINE: A line that contains only whitespace characters (zero or more).  LCONF_NONE_BLANK_LINE: A line that contains one or more none whitespace characters.",
            "title": "4.2. Blank &amp; NONE Blank Line"
        },
        {
            "location": "/lconf-specification/4-lconf-section/#43-indentation-level",
            "text": "Leading whitespace (LCONF_SPACEs) at the beginning of a LCONF-Section-Line is used to compute the indentation level of\nthe line. Within a LCONF-Section only LCONF_SPACEs can be used as indentation. The number of LCONF_SPACEs used per\nLCONF-Indentation-Level is set as part of the LCONF-Section-Start-Line.  The total number of spaces preceding the first non-blank character then determines the line\u2019s indentation.  The LCONF-Data-Serialization-Format uses LCONF-Indentation for readability and as part of its structure.",
            "title": "4.3. Indentation Level"
        },
        {
            "location": "/lconf-specification/4-lconf-section/#44-trailing-space",
            "text": "LCONF-Sections MUST NOT contain any lines with  Trailing Space .",
            "title": "4.4. Trailing Space"
        },
        {
            "location": "/lconf-specification/4-lconf-section/#45-comment-line",
            "text": "LCONF-Comment-Lines SHOULD have the indentation level of the following LCONF_NONE_BLANK_LINE.  The LCONF-Data-Serialization-Format makes a distinction between two types of LCONF-Comment-Lines:    LCONF-Section-Comment-Line : If a LCONF-Section-Line first none whitespace character is a\n    LCONF_COMMENT_LINE_IDENTIFIER it is considered a LCONF-Section-Comment-Line which are not parsed.\n    The usual purpose of a comment line is to communicate between the human maintainers of a file. A typical example is\n    comments in a configuration file.    LCONF-Schema-Comment-Line : If a LCONF-Schema-Line first none whitespace character is a\n    LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER it is considered a LCONF-Schema-Comment-Line which are parsed.\n    The purpose of such LCONF-Schema-Comment-Lines is to emit an example LCONF-Section with additional information.  NOTE : LCONF-Schema MAY also contain regular LCONF-Section-Comment-Line which are not parsed.    Example of a LCONF-Section-Comment-Line.  ___SECTION :: 4 :: LCONF :: Example\n# Comment-Line more info: Registry is a STRUCTURE_SINGLE_BLOCK\n. Registry\n    Name :: Tom Serjo\n    - EmailAddresses\n        # Comment-Line should have the indentation level of the following LCONF_NONE_BLANK_LINE\n        tom1@nomail.net\n        tom2@nomail.net\n\n    # Comment-Line should have the indentation level of the following LCONF_NONE_BLANK_LINE\n\n    City :: Paris\n___END  It is RECOMMENDED that any LCONF-Comment-Line uses at least one LCONF_SPACE after the LCONF_COMMENT_LINE_IDENTIFIER.  ___SECTION :: 4 :: LCONF :: Example\n#Comment-Line without space between the Identifier and the comment is valid but SHOUD BE AVOIDED.\nName :: Tom Serjo\n\n# EmailAddresses: Usually one should use one space between the Identifier and the comment text.\n#                 But sometimes one wants to aline a multi-line comment in a certain style.\n- EmailAddresses\n    tom1@nomail.net\n    tom2@nomail.net\nCity :: Paris\n___END  Example of LCONF-Schema-Comment-Lines which are parsed.  ___SECTION :: 4 :: STRICT :: lconf_standard_example1\n/  FamilyName : Please use for the first letter uppercase followed by lowercase letters.\n/               e.g. `Williams`\n. FamilyName | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING\n    DEFAULT ::\n    EMPTY_REPLACEMENT ::\n___END",
            "title": "4.5. Comment Line"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/",
            "text": "This file is part of the \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\n\n\n5. LCONF Structures\n\n\nThe set of six structures includes three simple structures and three collection structures.\n\n\nThe three simple structures are:\n\n\n\n\nSTRUCTURE_PAIR\n\n\nSTRUCTURE_LIST (inclusive Compact_STRUCTURE_LIST notation)\n\n\nSTRUCTURE_TABLE\n\n\n\n\nThe three collection structures are:\n\n\n\n\nSTRUCTURE_SINGLE_BLOCK\n\n\nSTRUCTURE_NAMED_BLOCKS\n\n\nSTRUCTURE_UNNAMED_BLOCKS\n\n\n\n\nThe \nLCONF-Root\n (Structure) is a special STRUCTURE_SINGLE_BLOCK which exists in every valid LCONF-Section.\nIt is special in the sense that there is no STRUCTURE_SINGLE_BLOCK_IDENTIFIER line and that it is an unnamed\nSTRUCTURE_SINGLE_BLOCK.\n\n\n5.1. LCONF-Key-Name\n\n\nNearly all LCONF-Key-Names will be implemented in a corresponding LCONF-Schema-Definition.\nOnly few e.g. STRUCTURE_NAMED_BLOCKS-Item (STRUCTURE_SINGLE_BLOCKs) Key-Names will be defined within a LCONF-Section.\n\n\n5.2. STRUCTURE_PAIR\n\n\nAssociates a LCONF-Key-Name with one data value. \n\nThe STRUCTURE_PAIR-Value MUST be a sequence of \nzero or more\n Unicode characters and includes all till the end of\nthe line. The STRUCTURE_PAIR-Value MAY be a TYPE_NOTSET. (This can be contraint in the LCONF-Schema) \n\nThe first value character MUST NOT be any whitespace.\n\n\nLCONF-Key-Name LCONF_KEY_VALUE_SEPARATOR Value\n\nFirstName :: Mary\n\n\n\n\n5.2.1. STRUCTURE_PAIR With Empty-Value\n\n\nThis is an exception and MUST use an \nempty sequence\n of Unicode characters and to avoid a Trailing Whitespace there\nMUST be no additional LCONF_SPACE after the LCONF_KEY_VALUE_SEPARATOR.\n\n\nSTRUCTURE_PAIR with an Empty-Value set MUST\n\n\n\n\nstart with a LCONF-Key-Name\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\n\n\nThis will overwrite the default value with whatever the implementation for an Empty-Value for this STRUCTURE_PAIR\nis.\n\n\nregistered ::\n\n\n\n\n5.2.2. STRUCTURE_PAIR With NOTSET Value\n\n\nThe Value MUST be a TYPE_NOTSET.\n\n\nSTRUCTURE_PAIR with NOTSET value MUST\n\n\n\n\nstart with a LCONF-Key-Name\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF_NOTSET\n\n\n\n\nThis will keep the default STRUCTURE_PAIR value as implemented in a LCONF-Schema-Definition and is the same as\nif the STRUCTURE_PAIR was not included in a LCONF-Section.\n\n\nregistered :: NOTSET\n\n\n\n\n5.2.3. STRUCTURE_PAIR With Assigned Value\n\n\nThe Value MUST be a sequence of \none or more\n Unicode characters and includes all till the end of the line.\n\n\nSTRUCTURE_PAIR with assigned value MUST\n\n\n\n\nstart with a LCONF-Key-Name\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a TYPE_NOTSET\n\n\n\n\nThis will overwrite the default value with \ntrue\n.\n\n\nregistered :: true\n\n\n\n\n5.3. STRUCTURE_LIST\n\n\nAssociates a LCONF-Key-Name with an ordered sequence (list) of data values. \n\nThe first List-Value character MUST NOT be any whitespace.\n\n\nThe STRUCTURE_LIST Value MUST be a sequence of \none or more\n Unicode characters and includes all till the end of\nthe line. The List-Value MAY be a TYPE_NOTSET. (This can be contraint in the LCONF-Schema) \n\nSTRUCTURE_LIST-Values use one additional LCONF-Indentation-Per-Level and each List-Value MUST start on a separate line.\n\n\nA STRUCTURE_LIST_IDENTIFIER-Line MUST\n\n\n\n\nstart with a STRUCTURE_LIST_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name\n\n\n\n\n- Color_List\n\n\n\n\nValues are separate lines.\n\n\n- Color_List\n    Black\n    White\n    NOTSET\n    Blue\n\n\n\n\n5.3.1. Default STRUCTURE_LIST\n\n\nTo keep the default STRUCTURE_LIST values as implemented in a LCONF-Schema-Definition the STRUCTURE_LIST\nMUST NOT be included in a LCONF-Section.\n\n\n5.3.2. Empty STRUCTURE_LIST\n\n\nEmpty STRUCTURE_LIST MUST only define the STRUCTURE_LIST_IDENTIFIER-Line and MUST NOT set any\nSTRUCTURE_LIST-Value-Lines.\n\n\n- color_list\n\n\n\n\nThis will overwrite the default value with an empty List (with values).\n\n\n5.3.3.  Compact_STRUCTURE_LIST notation\n\n\nAny STRUCTURE_LIST can also be written in a oneline compact notation:  Compact_STRUCTURE_LIST Value MUST be a sequence\nof \none or more\n Unicode characters and MAY be a TYPE_NOTSET. Multiple Values are separated by\nSTRUCTURE_LIST_VALUE_SEPARATOR. The Compact_STRUCTURE_LIST MUST NOT end with a STRUCTURE_LIST_VALUE_SEPARATOR. \n\nLeading or ending whitespace of Compact_STRUCTURE_LIST Values is stripped.\n\n\nSTRUCTURE_LIST_IDENTIFIER Compact_STRUCTURE_LIST-Key-Name LCONF_KEY_VALUE_SEPARATOR Value1, Value2, Value3\n\n- colors :: red, blue, green\n\n\n\n\n5.3.3.1. Default Compact_STRUCTURE_LIST\n\n\nTo keep the default Compact_STRUCTURE_LIST values as implemented in a LCONF-Schema-Definition the\nCompact_STRUCTURE_LIST MUST NOT be included in a LCONF-Section.\n\n\n5.3.3.2. Empty Compact_STRUCTURE_LIST\n\n\nThere is NO Empty Compact_STRUCTURE_LISTt notation. Just use a Empty General-List.\n\n\n- color_list\n\n\n\n\n5.3.3.3. Compact-List With Assigned Value\n\n\nLCONF-Compact-List with assigned value MUST\n\n\n\n\nstart with a STRUCTURE_LIST_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one or more List-Value (multiple List-Values are separated by STRUCTURE_LIST_VALUE_SEPARATOR)\n\n\n\n\nThis will overwrite the default value for the List with \nTim, Tom\n.\n\n\n- registered :: Tim, Tom\n\n- registered :: Tim,Tom\n\n- registered :: Tim     ,     Tom\n\n\n\n\n5.4. STRUCTURE_TABLE\n\n\nAssociates a LCONF-Key-Name with ordered tabular-data (columns and rows).  \n\nA Column-Value MUST be a sequence of \nzero or more\n Unicode characters and MAY be a TYPE_NOTSET. (This can be\ncontraint in the LCONF-Schema) \n\nThe STRUCTURE_TABLE_IDENTIFIER-Line MUST NOT end with a STRUCTURE_TABLE_VALUE_SEPARATOR.\n\n\nLCONF-Column-Names MUST be unique within one STRUCTURE_TABLE.\n\n\nA STRUCTURE_TABLE_IDENTIFIER-Line MUST\n\n\n\n\nstart with a STRUCTURE_TABLE_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name\n\n\n\n\n| ColorTable\n\n\n\n\nSTRUCTURE_TABLE-Rows use one additional LCONF-Indentation-Per-Level and each row MUST start on a separate line.\nColumn-Values of Table-Rows are embraced and separated by STRUCTURE_TABLE_VALUE_SEPARATORs. A STRUCTURE_TABLE-Row MUST\ncontain the same number of values as column-names specified in the LCONF-Schema-Definition. \n\nLeading or ending whitespace of STRUCTURE_TABLE Column-Values is stripped.\n\n\nA STRUCTURE_TABLE-Row-Line MUST\n\n\n\n\nstart with one additional LCONF-Indentation-Per-Level\n\n\nfollowed by one STRUCTURE_TABLE_VALUE_SEPARATOR\n\n\nfollowed by a Column-Value which MAY contain leading and ending spaces which will be stripped.\n\n\nfollowed by one STRUCTURE_TABLE_VALUE_SEPARATOR\n\n\nfollowed by any additional Column-Value and STRUCTURE_TABLE_VALUE_SEPARATOR\n\n\n\n\nSTRUCTURE_TABLE_IDENTIFIER LCONF-Key-Name\n    STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR\n    STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR\n\n| TableKeyName_example\n    | Value Column1 Row1 | Value Column2 Row1 |\n    | Value Column1 Row2 | Value Column2 Row2 |\n\n\n\n\n5.4.1. Default STRUCTURE_TABLE\n\n\nTo keep the default STRUCTURE_TABLE values as implemented in a LCONF-Schema-Definition the STRUCTURE_TABLE MUST NOT be\nincluded in a LCONF-Section.\n\n\n5.4.2. Empty STRUCTURE_TABLE\n\n\nEmpty STRUCTURE_TABLEs MUST only define the STRUCTURE_TABLE_IDENTIFIER-Line and MUST NOT set any\nSTRUCTURE_TABLE-Row-Lines.\n\n\nThis will overwrite the default value with an empty table (with no rows).\n\n\n| Colors_RGB\n\n\n\n\n5.4.3. STRUCTURE_TABLE With Rows\n\n\n# Comment: below is a STRUCTURE_TABLE with a Comment-Line of Column-Name\n| Colors_RGB\n    #   Color Name| Red| Green| Blue|\n    |  forestgreen|  34|   139|   34|\n    |        brick| 156|   102|   31|\n\n# Comment: Alignment is not important\n| Colors_RGB2\n    |forestgreen|34|139|34|\n    |brick|156|102|31|\n\n# COMMENT: all Column-Value are empty (missing) - both Table-Rows will be the same.\n| Colors_RGB3\n    |||||\n    |     |     |     |     |\n\n# Comment: below is STRUCTURE_TABLE with empty Column-Values and TYPE_NOTSET Column-Values\n#          It uses also 2 Comment-Lines given additional information about the Column-Names so that the whole\n#          STRUCTURE_TABLE looks very similar to an markdown table.\n| people_table\n    # ID | name  | height_cm | weight_kg | age    | registered |\n    #:---|:------|:----------|:----------|:-------|:-----------|\n    | 1  | Tim   | 178       | 86        | 37     | true       |\n    | 2  | Paula | 156       | NOTSET    | NOTSET |            |\n    | 3  |       | 186       | 84        | 23     |            |\n    | 4  | Dora  | 173       | NOTSET    | 45     | false      |\n\n\n\n\n\n\n\n\nColumns With Empty Column-Values\n: e.g. Row:3, Column2: \nname\n - has an empty Column-Value\n\n\nThis will overwrite the default value for the \nColumn2: name\n with whatever the implementation for an empty\nColumn-Value is (example it could be an empty String). Usually it will depend on the Column LCONF-Value-Type.\n\n\ne.g. Row:2, Column6: \nregistered\n - has an empty Column-Value \n\n\nThis Column might have a TYPE_BOOLEAN Value-Type implemented with the Default-Value set to \nfalse\n and an\nEmpty-Value implemented as \nTYPE_NOTSET\n.\n\n\n\n\n\n\nColumns With TYPE_NOTSET Column-Values\n:\n\n\nThis will use the default value for the \nColumn2: name\n (example it could be: \nAnonymous\n).\n\n\n\n\n\n\nColumns With Column-Values\n: e.g. Row:1, Column2: \nname\n - has a set Column-Value (more than one Unicode\n    character)\n\n\nThis will overwrite the default value for the \nColumn: name\n with \nTim\n.\n\n\n\n\n\n\n5.5. STRUCTURE_SINGLE_BLOCK\n\n\nA collection of any of the six LCONF-Structures. All STRUCTURE_SINGLE_BLOCK-Items (Key-Names) MUST be unique. A\nLCONF-Library MUST implement an option to loop over the collection in order as defined in the corresponding\nLCONF-Schema. STRUCTURE_SINGLE_BLOCK-Items use one additional LCONF-Indentation-Per-Level and each Block-Item MUST\nstart on a separate line.\n\n\n\n\n\n\nLCONF-Root\n\n\nThe LCONF-Root (Structure) is a special STRUCTURE_SINGLE_BLOCK which exists in every valid LCONF-Section.\nIt is special in the sense that there is no STRUCTURE_SINGLE_BLOCK_IDENTIFIER line and that it is an unnamed\nSTRUCTURE_SINGLE_BLOCK.\n\n\n\n\n\n\nA STRUCTURE_SINGLE_BLOCK-Identifier-Line MUST\n\n\n\n\nstart with a STRUCTURE_SINGLE_BLOCK_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name\n\n\n\n\n. Color\n\n\n\n\nBlock-Items are separate lines in the example below these are: \nName :: Blue, - rgb_list, menu :: false\n.\n\n\n. Color\n    Name :: Blue\n    - rgb_list\n        157\n        174\n        235\n    menu :: false\n\n\n\n\n5.5.1. Default STRUCTURE_SINGLE_BLOCK\n\n\nTo keep the default STRUCTURE_SINGLE_BLOCK values as implemented in a LCONF-Schema-Definition the\nSTRUCTURE_SINGLE_BLOCK SHOULD NOT be included in a LCONF-Section. (This also depends if any Block-Items are\n\nREQUIRED\n.)\n\n\nIt is PERMITTED to include an Empty STRUCTURE_SINGLE_BLOCK which will also keep the default STRUCTURE_SINGLE_BLOCK\nvalues as implemented in a LCONF-Schema-Definition.\nIn some cases this might be useful: e.g. if one wants previous comment lines.\n\n\nEmpty STRUCTURE_SINGLE_BLOCK MUST only define the STRUCTURE_SINGLE_BLOCK-Identifier-Line and MUST NOT set any\nLCONF-Block-Item-Lines.\n\n\n. Color\n\n\n\n\n___SECTION :: 4 :: LCONF :: SectionName\n. STRUCTURE_SINGLE_BLOCK_Identifier_name\n    single_block_item1_key :: single_block_item1_value\n    - single_block_item2_key list\n        my List-Item 1\n        my List-Item 2\n    # Comment: Blocks can also have other (nested) Blocks\n    . inner_single_block_item3_key\n        inner_single_block_item1_key :: inner_single_block_item1_value\n# Comment: below a permitted empty `STRUCTURE_SINGLE_BLOCK_IDENTIFIER` which will use all default values\n. STRUCTURE_SINGLE_BLOCK_2\n___END\n\n\n\n\n5.5.1.1. STRUCTURE_SINGLE_BLOCK With Block-Items\n\n\nIn a LCONF-Section STRUCTURE_SINGLE_BLOCK-Items MAY be defined in any order and are NOT REQUIRED to follow the\nimplemented order of a corresponding LCONF-Schema.\n\n\n. Color_Block_1\n    color :: Blue\n    - rgb_list\n        157\n        174\n        235\n    menu :: false\n\n\n\n\n# The Block could also be defined as\n. Color_Block_1\n    menu :: false\n    - rgb_list\n        157\n        174\n        235\n    color :: Blue\n\n\n\n\n# The Block could also define only some of the Block-Items: depending on their requirement settings.\n#  all other implmented Block-Items would have there implemented default values.\n. Color STRUCTURE_SINGLE_BLOCK\n    - rgb_list\n        157\n        174\n        235\n\n\n\n\n5.6. STRUCTURE_NAMED_BLOCKS\n\n\nA collection of repeated named STRUCTURE_SINGLE_BLOCKs. A LCONF-Library MUST implement an option to loop over the\ncollection in order as defined in the corresponding LCONF-Schema. BLOCKS-Items use one additional\nLCONF-Indentation-Per-Level and each Block-Item MUST start on a separate line. All Block-Items MUST be\nSTRUCTURE_SINGLE_BLOCKs with unique names.\n\n\nA STRUCTURE_NAMED_BLOCKS_IDENTIFIER-Line MUST\n\n\n\n\nstart with a STRUCTURE_NAMED_BLOCKS_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name\n\n\n\n\n* Color\n\n\n\n\nBlock-Items are separate lines and use one additional LCONF-Indentation-Per-Level.\nIn the example below these are: \n. BlueBlock, . RedBlock\n.\n\n\n* Color\n    . BlueBlock\n        Name :: Blue\n        - rgb_list\n            157\n            174\n            235\n        menu :: NOTSET\n    . RedBlock\n        Name :: Red\n        - rgb_list\n            227\n            155\n            155\n        menu :: on\n\n\n\n\nA LCONF-Schema-Definition MUST implement one reference STRUCTURE_SINGLE_BLOCK with default values\n(TEMPLATE_BLOCK) which will be used as the base for each defined Repeated-Block-Item.\n\n\nAny number of Block-Items can be defined but this can also be limited in a LCONF-Schema-Definition. e.g.:\n\n\n\n\nLCONF_NUMBER_MIN_REQUIRED_BLOCKS\n\n\nLCONF_NUMBER_MAX_ALLOWED_BLOCKS\n\n\n\n\n5.6.1. Default STRUCTURE_NAMED_BLOCKS\n\n\nThe Default STRUCTURE_NAMED_BLOCKS is always an empty collection.\n\n\nIt is PERMITTED to include an Empty STRUCTURE_NAMED_BLOCKS which will keep the default value as implemented in a\nLCONF-Schema-Definition (which is always an empty collection). This is the same as if one does not define the\nSTRUCTURE_NAMED_BLOCKS in a LCONF-Section.\n\n\nIn some cases it might be useful to include an empty STRUCTURE_NAMED_BLOCKS: e.g. if one wants previous comment lines.\n\n\nEmpty STRUCTURE_NAMED_BLOCKS MUST only define the STRUCTURE_NAMED_BLOCKS_IDENTIFIER-Line and MUST NOT set any\nLCONF-Block-Item-Lines.\n\n\n* Color\n\n\n\n\n___SECTION :: 4 :: LCONF :: SectionName\n* RepeatedBlock_Identifier_name\n    # Comment: Named STRUCTURE_SINGLE_BLOCK\n    . single_block_item3_key1\n        single_block_item1_key :: single_block_item1_value\n    . single_block_item3_key2\n        single_block_item1_key :: single_block_item1_value\n# Comment: below a permitted empty `Repeated-Block-Identifier` which will use the default value\n#          which is always an empty collection.\n* RepeatedBlock_2\n___END\n\n\n\n\n5.6.1.1. LCONF_SINGLE_BLOCK_REUSE\n\n\nOnly in a STRUCTURE_NAMED_BLOCKS collection (sequence) one MAY use LCONF_SINGLE_BLOCK_REUSE to assign the settings\nof a previous named STRUCTURE_SINGLE_BLOCK to a new named STRUCTURE_SINGLE_BLOCK.\n\n\n. New_STRUCTURE_SINGLE_BLOCK-Key-Name LCONF_SINGLE_BLOCK_REUSE Other_STRUCTURE_SINGLE_BLOCK-Key-Name\n\n. New_STRUCTURE_SINGLE_BLOCK-Key-Name == Other_STRUCTURE_SINGLE_BLOCK-Key-Name\n\n\n\n\nExample of a LCONF_SINGLE_BLOCK_REUSE.\n\n\n* RepeatedBlock\n    . STRUCTURE_SINGLE_BLOCK_Key_Name_1\n        FirstName :: Mary\n        LastName :: Jackson\n        Age :: 35\n        Street :: 768 5th Ave # 1332\n        City :: New York\n        State :: NY\n        ZIPCode :: 10019\n    # Comment: the second Block will have the same `Last Name, Street, City, State and ZIPCode as the first Block`\n    . STRUCTURE_SINGLE_BLOCK Key-Name 2 == STRUCTURE_SINGLE_BLOCK Key-Name 1\n        FirstName :: Tim\n        Age :: 38\n\n\n\n\n5.7. STRUCTURE_UNNAMED_BLOCKS\n\n\nA collection of repeated unnamed STRUCTURE_SINGLE_BLOCKs. A LCONF-Library MUST implement an option to loop over the\ncollection in order as defined in the corresponding LCONF-Schema. BLOCKS-Items use one additional\nLCONF-Indentation-Per-Level and each Block-Item MUST start on a separate line.\n\n\nA STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER-Line MUST\n\n\n\n\nstart with a STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name\n\n\n\n\n* Color\n\n\n\n\nAn STRUCTURE_UNNAMED_BLOCKS MUST use as STRUCTURE_SINGLE_BLOCK-Identifier-Line:\n\n\n\n\nonly a STRUCTURE_SINGLE_BLOCK-Identifier\n\n\n\n\n* RepeatedBlock\n    .\n        FirstName :: Mary\n    .\n        FirstName :: Tom\n    .\n        FirstName :: Dora\n\n\n\n\nBlock-Items are separate lines and use one additional LCONF-Indentation-Per-Level.\n\n\n* Color\n    .\n        Name :: Blue\n        - rgb_list\n            157\n            174\n            235\n        menu :: NOTSET\n    .\n        Name :: Red\n        - rgb_list\n            227\n            155\n            155\n        menu :: on\n\n\n\n\nA LCONF-Schema-Definition MUST implement one reference STRUCTURE_SINGLE_BLOCK with default values\n(TEMPLATE_BLOCK) which will be used as the base for each defined Repeated-Block-Item.\n\n\nAny number of Block-Items can be defined but this can also be limited in a LCONF-Schema-Definition. e.g.:\n\n\n\n\nLCONF_NUMBER_MIN_REQUIRED_BLOCKS\n\n\nLCONF_NUMBER_MAX_ALLOWED_BLOCKS\n\n\n\n\n5.7.1. Default STRUCTURE_UNNAMED_BLOCKS\n\n\nThe Default STRUCTURE_UNNAMED_BLOCKS is always an empty collection.\n\n\nIt is PERMITTED to include an Empty STRUCTURE_UNNAMED_BLOCKS which will keep the default value as implemented in a\nLCONF-Schema-Definition (which is always an empty collection). This is the same as if one does not define the\nSTRUCTURE_UNNAMED_BLOCKS in a LCONF-Section.\n\n\nIn some cases it might be useful to include an empty STRUCTURE_UNNAMED_BLOCKS: e.g. if one wants previous comment lines.\n\n\nEmpty STRUCTURE_UNNAMED_BLOCKS MUST only define the STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER-Line and MUST NOT set any\nLCONF-Block-Item-Lines.\n\n\n* Color\n\n\n\n\n___SECTION :: 4 :: LCONF :: SectionName\n* RepeatedBlock_Identifier_name\n    # Comment: UnNamed STRUCTURE_SINGLE_BLOCK\n    .\n        single_block_item1_key :: single_block_item1_value\n    .\n        single_block_item1_key :: single_block_item1_value\n# Comment: below a permitted empty `STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER-Line` which will use the default value\n#          which is always an empty collection.\n* RepeatedBlock_2\n___END",
            "title": "5. LCONF-Structures"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#5-lconf-structures",
            "text": "The set of six structures includes three simple structures and three collection structures.  The three simple structures are:   STRUCTURE_PAIR  STRUCTURE_LIST (inclusive Compact_STRUCTURE_LIST notation)  STRUCTURE_TABLE   The three collection structures are:   STRUCTURE_SINGLE_BLOCK  STRUCTURE_NAMED_BLOCKS  STRUCTURE_UNNAMED_BLOCKS   The  LCONF-Root  (Structure) is a special STRUCTURE_SINGLE_BLOCK which exists in every valid LCONF-Section.\nIt is special in the sense that there is no STRUCTURE_SINGLE_BLOCK_IDENTIFIER line and that it is an unnamed\nSTRUCTURE_SINGLE_BLOCK.",
            "title": "5. LCONF Structures"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#51-lconf-key-name",
            "text": "Nearly all LCONF-Key-Names will be implemented in a corresponding LCONF-Schema-Definition.\nOnly few e.g. STRUCTURE_NAMED_BLOCKS-Item (STRUCTURE_SINGLE_BLOCKs) Key-Names will be defined within a LCONF-Section.",
            "title": "5.1. LCONF-Key-Name"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#52-structure_pair",
            "text": "Associates a LCONF-Key-Name with one data value.  \nThe STRUCTURE_PAIR-Value MUST be a sequence of  zero or more  Unicode characters and includes all till the end of\nthe line. The STRUCTURE_PAIR-Value MAY be a TYPE_NOTSET. (This can be contraint in the LCONF-Schema)  \nThe first value character MUST NOT be any whitespace.  LCONF-Key-Name LCONF_KEY_VALUE_SEPARATOR Value\n\nFirstName :: Mary",
            "title": "5.2. STRUCTURE_PAIR"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#521-structure_pair-with-empty-value",
            "text": "This is an exception and MUST use an  empty sequence  of Unicode characters and to avoid a Trailing Whitespace there\nMUST be no additional LCONF_SPACE after the LCONF_KEY_VALUE_SEPARATOR.  STRUCTURE_PAIR with an Empty-Value set MUST   start with a LCONF-Key-Name  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR   This will overwrite the default value with whatever the implementation for an Empty-Value for this STRUCTURE_PAIR\nis.  registered ::",
            "title": "5.2.1. STRUCTURE_PAIR With Empty-Value"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#522-structure_pair-with-notset-value",
            "text": "The Value MUST be a TYPE_NOTSET.  STRUCTURE_PAIR with NOTSET value MUST   start with a LCONF-Key-Name  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF_NOTSET   This will keep the default STRUCTURE_PAIR value as implemented in a LCONF-Schema-Definition and is the same as\nif the STRUCTURE_PAIR was not included in a LCONF-Section.  registered :: NOTSET",
            "title": "5.2.2. STRUCTURE_PAIR With NOTSET Value"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#523-structure_pair-with-assigned-value",
            "text": "The Value MUST be a sequence of  one or more  Unicode characters and includes all till the end of the line.  STRUCTURE_PAIR with assigned value MUST   start with a LCONF-Key-Name  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by a TYPE_NOTSET   This will overwrite the default value with  true .  registered :: true",
            "title": "5.2.3. STRUCTURE_PAIR With Assigned Value"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#53-structure_list",
            "text": "Associates a LCONF-Key-Name with an ordered sequence (list) of data values.  \nThe first List-Value character MUST NOT be any whitespace.  The STRUCTURE_LIST Value MUST be a sequence of  one or more  Unicode characters and includes all till the end of\nthe line. The List-Value MAY be a TYPE_NOTSET. (This can be contraint in the LCONF-Schema)  \nSTRUCTURE_LIST-Values use one additional LCONF-Indentation-Per-Level and each List-Value MUST start on a separate line.  A STRUCTURE_LIST_IDENTIFIER-Line MUST   start with a STRUCTURE_LIST_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name   - Color_List  Values are separate lines.  - Color_List\n    Black\n    White\n    NOTSET\n    Blue",
            "title": "5.3. STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#531-default-structure_list",
            "text": "To keep the default STRUCTURE_LIST values as implemented in a LCONF-Schema-Definition the STRUCTURE_LIST\nMUST NOT be included in a LCONF-Section.",
            "title": "5.3.1. Default STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#532-empty-structure_list",
            "text": "Empty STRUCTURE_LIST MUST only define the STRUCTURE_LIST_IDENTIFIER-Line and MUST NOT set any\nSTRUCTURE_LIST-Value-Lines.  - color_list  This will overwrite the default value with an empty List (with values).",
            "title": "5.3.2. Empty STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#533-compact_structure_list-notation",
            "text": "Any STRUCTURE_LIST can also be written in a oneline compact notation:  Compact_STRUCTURE_LIST Value MUST be a sequence\nof  one or more  Unicode characters and MAY be a TYPE_NOTSET. Multiple Values are separated by\nSTRUCTURE_LIST_VALUE_SEPARATOR. The Compact_STRUCTURE_LIST MUST NOT end with a STRUCTURE_LIST_VALUE_SEPARATOR.  \nLeading or ending whitespace of Compact_STRUCTURE_LIST Values is stripped.  STRUCTURE_LIST_IDENTIFIER Compact_STRUCTURE_LIST-Key-Name LCONF_KEY_VALUE_SEPARATOR Value1, Value2, Value3\n\n- colors :: red, blue, green",
            "title": "5.3.3.  Compact_STRUCTURE_LIST notation"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#5331-default-compact_structure_list",
            "text": "To keep the default Compact_STRUCTURE_LIST values as implemented in a LCONF-Schema-Definition the\nCompact_STRUCTURE_LIST MUST NOT be included in a LCONF-Section.",
            "title": "5.3.3.1. Default Compact_STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#5332-empty-compact_structure_list",
            "text": "There is NO Empty Compact_STRUCTURE_LISTt notation. Just use a Empty General-List.  - color_list",
            "title": "5.3.3.2. Empty Compact_STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#5333-compact-list-with-assigned-value",
            "text": "LCONF-Compact-List with assigned value MUST   start with a STRUCTURE_LIST_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one or more List-Value (multiple List-Values are separated by STRUCTURE_LIST_VALUE_SEPARATOR)   This will overwrite the default value for the List with  Tim, Tom .  - registered :: Tim, Tom\n\n- registered :: Tim,Tom\n\n- registered :: Tim     ,     Tom",
            "title": "5.3.3.3. Compact-List With Assigned Value"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#54-structure_table",
            "text": "Associates a LCONF-Key-Name with ordered tabular-data (columns and rows).   \nA Column-Value MUST be a sequence of  zero or more  Unicode characters and MAY be a TYPE_NOTSET. (This can be\ncontraint in the LCONF-Schema)  \nThe STRUCTURE_TABLE_IDENTIFIER-Line MUST NOT end with a STRUCTURE_TABLE_VALUE_SEPARATOR.  LCONF-Column-Names MUST be unique within one STRUCTURE_TABLE.  A STRUCTURE_TABLE_IDENTIFIER-Line MUST   start with a STRUCTURE_TABLE_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name   | ColorTable  STRUCTURE_TABLE-Rows use one additional LCONF-Indentation-Per-Level and each row MUST start on a separate line.\nColumn-Values of Table-Rows are embraced and separated by STRUCTURE_TABLE_VALUE_SEPARATORs. A STRUCTURE_TABLE-Row MUST\ncontain the same number of values as column-names specified in the LCONF-Schema-Definition.  \nLeading or ending whitespace of STRUCTURE_TABLE Column-Values is stripped.  A STRUCTURE_TABLE-Row-Line MUST   start with one additional LCONF-Indentation-Per-Level  followed by one STRUCTURE_TABLE_VALUE_SEPARATOR  followed by a Column-Value which MAY contain leading and ending spaces which will be stripped.  followed by one STRUCTURE_TABLE_VALUE_SEPARATOR  followed by any additional Column-Value and STRUCTURE_TABLE_VALUE_SEPARATOR   STRUCTURE_TABLE_IDENTIFIER LCONF-Key-Name\n    STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR\n    STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR Column-Values STRUCTURE_TABLE_VALUE_SEPARATOR\n\n| TableKeyName_example\n    | Value Column1 Row1 | Value Column2 Row1 |\n    | Value Column1 Row2 | Value Column2 Row2 |",
            "title": "5.4. STRUCTURE_TABLE"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#541-default-structure_table",
            "text": "To keep the default STRUCTURE_TABLE values as implemented in a LCONF-Schema-Definition the STRUCTURE_TABLE MUST NOT be\nincluded in a LCONF-Section.",
            "title": "5.4.1. Default STRUCTURE_TABLE"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#542-empty-structure_table",
            "text": "Empty STRUCTURE_TABLEs MUST only define the STRUCTURE_TABLE_IDENTIFIER-Line and MUST NOT set any\nSTRUCTURE_TABLE-Row-Lines.  This will overwrite the default value with an empty table (with no rows).  | Colors_RGB",
            "title": "5.4.2. Empty STRUCTURE_TABLE"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#543-structure_table-with-rows",
            "text": "# Comment: below is a STRUCTURE_TABLE with a Comment-Line of Column-Name\n| Colors_RGB\n    #   Color Name| Red| Green| Blue|\n    |  forestgreen|  34|   139|   34|\n    |        brick| 156|   102|   31|\n\n# Comment: Alignment is not important\n| Colors_RGB2\n    |forestgreen|34|139|34|\n    |brick|156|102|31|\n\n# COMMENT: all Column-Value are empty (missing) - both Table-Rows will be the same.\n| Colors_RGB3\n    |||||\n    |     |     |     |     |\n\n# Comment: below is STRUCTURE_TABLE with empty Column-Values and TYPE_NOTSET Column-Values\n#          It uses also 2 Comment-Lines given additional information about the Column-Names so that the whole\n#          STRUCTURE_TABLE looks very similar to an markdown table.\n| people_table\n    # ID | name  | height_cm | weight_kg | age    | registered |\n    #:---|:------|:----------|:----------|:-------|:-----------|\n    | 1  | Tim   | 178       | 86        | 37     | true       |\n    | 2  | Paula | 156       | NOTSET    | NOTSET |            |\n    | 3  |       | 186       | 84        | 23     |            |\n    | 4  | Dora  | 173       | NOTSET    | 45     | false      |    Columns With Empty Column-Values : e.g. Row:3, Column2:  name  - has an empty Column-Value  This will overwrite the default value for the  Column2: name  with whatever the implementation for an empty\nColumn-Value is (example it could be an empty String). Usually it will depend on the Column LCONF-Value-Type.  e.g. Row:2, Column6:  registered  - has an empty Column-Value   This Column might have a TYPE_BOOLEAN Value-Type implemented with the Default-Value set to  false  and an\nEmpty-Value implemented as  TYPE_NOTSET .    Columns With TYPE_NOTSET Column-Values :  This will use the default value for the  Column2: name  (example it could be:  Anonymous ).    Columns With Column-Values : e.g. Row:1, Column2:  name  - has a set Column-Value (more than one Unicode\n    character)  This will overwrite the default value for the  Column: name  with  Tim .",
            "title": "5.4.3. STRUCTURE_TABLE With Rows"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#55-structure_single_block",
            "text": "A collection of any of the six LCONF-Structures. All STRUCTURE_SINGLE_BLOCK-Items (Key-Names) MUST be unique. A\nLCONF-Library MUST implement an option to loop over the collection in order as defined in the corresponding\nLCONF-Schema. STRUCTURE_SINGLE_BLOCK-Items use one additional LCONF-Indentation-Per-Level and each Block-Item MUST\nstart on a separate line.    LCONF-Root  The LCONF-Root (Structure) is a special STRUCTURE_SINGLE_BLOCK which exists in every valid LCONF-Section.\nIt is special in the sense that there is no STRUCTURE_SINGLE_BLOCK_IDENTIFIER line and that it is an unnamed\nSTRUCTURE_SINGLE_BLOCK.    A STRUCTURE_SINGLE_BLOCK-Identifier-Line MUST   start with a STRUCTURE_SINGLE_BLOCK_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name   . Color  Block-Items are separate lines in the example below these are:  Name :: Blue, - rgb_list, menu :: false .  . Color\n    Name :: Blue\n    - rgb_list\n        157\n        174\n        235\n    menu :: false",
            "title": "5.5. STRUCTURE_SINGLE_BLOCK"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#551-default-structure_single_block",
            "text": "To keep the default STRUCTURE_SINGLE_BLOCK values as implemented in a LCONF-Schema-Definition the\nSTRUCTURE_SINGLE_BLOCK SHOULD NOT be included in a LCONF-Section. (This also depends if any Block-Items are REQUIRED .)  It is PERMITTED to include an Empty STRUCTURE_SINGLE_BLOCK which will also keep the default STRUCTURE_SINGLE_BLOCK\nvalues as implemented in a LCONF-Schema-Definition.\nIn some cases this might be useful: e.g. if one wants previous comment lines.  Empty STRUCTURE_SINGLE_BLOCK MUST only define the STRUCTURE_SINGLE_BLOCK-Identifier-Line and MUST NOT set any\nLCONF-Block-Item-Lines.  . Color  ___SECTION :: 4 :: LCONF :: SectionName\n. STRUCTURE_SINGLE_BLOCK_Identifier_name\n    single_block_item1_key :: single_block_item1_value\n    - single_block_item2_key list\n        my List-Item 1\n        my List-Item 2\n    # Comment: Blocks can also have other (nested) Blocks\n    . inner_single_block_item3_key\n        inner_single_block_item1_key :: inner_single_block_item1_value\n# Comment: below a permitted empty `STRUCTURE_SINGLE_BLOCK_IDENTIFIER` which will use all default values\n. STRUCTURE_SINGLE_BLOCK_2\n___END",
            "title": "5.5.1. Default STRUCTURE_SINGLE_BLOCK"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#5511-structure_single_block-with-block-items",
            "text": "In a LCONF-Section STRUCTURE_SINGLE_BLOCK-Items MAY be defined in any order and are NOT REQUIRED to follow the\nimplemented order of a corresponding LCONF-Schema.  . Color_Block_1\n    color :: Blue\n    - rgb_list\n        157\n        174\n        235\n    menu :: false  # The Block could also be defined as\n. Color_Block_1\n    menu :: false\n    - rgb_list\n        157\n        174\n        235\n    color :: Blue  # The Block could also define only some of the Block-Items: depending on their requirement settings.\n#  all other implmented Block-Items would have there implemented default values.\n. Color STRUCTURE_SINGLE_BLOCK\n    - rgb_list\n        157\n        174\n        235",
            "title": "5.5.1.1. STRUCTURE_SINGLE_BLOCK With Block-Items"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#56-structure_named_blocks",
            "text": "A collection of repeated named STRUCTURE_SINGLE_BLOCKs. A LCONF-Library MUST implement an option to loop over the\ncollection in order as defined in the corresponding LCONF-Schema. BLOCKS-Items use one additional\nLCONF-Indentation-Per-Level and each Block-Item MUST start on a separate line. All Block-Items MUST be\nSTRUCTURE_SINGLE_BLOCKs with unique names.  A STRUCTURE_NAMED_BLOCKS_IDENTIFIER-Line MUST   start with a STRUCTURE_NAMED_BLOCKS_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name   * Color  Block-Items are separate lines and use one additional LCONF-Indentation-Per-Level.\nIn the example below these are:  . BlueBlock, . RedBlock .  * Color\n    . BlueBlock\n        Name :: Blue\n        - rgb_list\n            157\n            174\n            235\n        menu :: NOTSET\n    . RedBlock\n        Name :: Red\n        - rgb_list\n            227\n            155\n            155\n        menu :: on  A LCONF-Schema-Definition MUST implement one reference STRUCTURE_SINGLE_BLOCK with default values\n(TEMPLATE_BLOCK) which will be used as the base for each defined Repeated-Block-Item.  Any number of Block-Items can be defined but this can also be limited in a LCONF-Schema-Definition. e.g.:   LCONF_NUMBER_MIN_REQUIRED_BLOCKS  LCONF_NUMBER_MAX_ALLOWED_BLOCKS",
            "title": "5.6. STRUCTURE_NAMED_BLOCKS"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#561-default-structure_named_blocks",
            "text": "The Default STRUCTURE_NAMED_BLOCKS is always an empty collection.  It is PERMITTED to include an Empty STRUCTURE_NAMED_BLOCKS which will keep the default value as implemented in a\nLCONF-Schema-Definition (which is always an empty collection). This is the same as if one does not define the\nSTRUCTURE_NAMED_BLOCKS in a LCONF-Section.  In some cases it might be useful to include an empty STRUCTURE_NAMED_BLOCKS: e.g. if one wants previous comment lines.  Empty STRUCTURE_NAMED_BLOCKS MUST only define the STRUCTURE_NAMED_BLOCKS_IDENTIFIER-Line and MUST NOT set any\nLCONF-Block-Item-Lines.  * Color  ___SECTION :: 4 :: LCONF :: SectionName\n* RepeatedBlock_Identifier_name\n    # Comment: Named STRUCTURE_SINGLE_BLOCK\n    . single_block_item3_key1\n        single_block_item1_key :: single_block_item1_value\n    . single_block_item3_key2\n        single_block_item1_key :: single_block_item1_value\n# Comment: below a permitted empty `Repeated-Block-Identifier` which will use the default value\n#          which is always an empty collection.\n* RepeatedBlock_2\n___END",
            "title": "5.6.1. Default STRUCTURE_NAMED_BLOCKS"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#5611-lconf_single_block_reuse",
            "text": "Only in a STRUCTURE_NAMED_BLOCKS collection (sequence) one MAY use LCONF_SINGLE_BLOCK_REUSE to assign the settings\nof a previous named STRUCTURE_SINGLE_BLOCK to a new named STRUCTURE_SINGLE_BLOCK.  . New_STRUCTURE_SINGLE_BLOCK-Key-Name LCONF_SINGLE_BLOCK_REUSE Other_STRUCTURE_SINGLE_BLOCK-Key-Name\n\n. New_STRUCTURE_SINGLE_BLOCK-Key-Name == Other_STRUCTURE_SINGLE_BLOCK-Key-Name  Example of a LCONF_SINGLE_BLOCK_REUSE.  * RepeatedBlock\n    . STRUCTURE_SINGLE_BLOCK_Key_Name_1\n        FirstName :: Mary\n        LastName :: Jackson\n        Age :: 35\n        Street :: 768 5th Ave # 1332\n        City :: New York\n        State :: NY\n        ZIPCode :: 10019\n    # Comment: the second Block will have the same `Last Name, Street, City, State and ZIPCode as the first Block`\n    . STRUCTURE_SINGLE_BLOCK Key-Name 2 == STRUCTURE_SINGLE_BLOCK Key-Name 1\n        FirstName :: Tim\n        Age :: 38",
            "title": "5.6.1.1. LCONF_SINGLE_BLOCK_REUSE"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#57-structure_unnamed_blocks",
            "text": "A collection of repeated unnamed STRUCTURE_SINGLE_BLOCKs. A LCONF-Library MUST implement an option to loop over the\ncollection in order as defined in the corresponding LCONF-Schema. BLOCKS-Items use one additional\nLCONF-Indentation-Per-Level and each Block-Item MUST start on a separate line.  A STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER-Line MUST   start with a STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name   * Color  An STRUCTURE_UNNAMED_BLOCKS MUST use as STRUCTURE_SINGLE_BLOCK-Identifier-Line:   only a STRUCTURE_SINGLE_BLOCK-Identifier   * RepeatedBlock\n    .\n        FirstName :: Mary\n    .\n        FirstName :: Tom\n    .\n        FirstName :: Dora  Block-Items are separate lines and use one additional LCONF-Indentation-Per-Level.  * Color\n    .\n        Name :: Blue\n        - rgb_list\n            157\n            174\n            235\n        menu :: NOTSET\n    .\n        Name :: Red\n        - rgb_list\n            227\n            155\n            155\n        menu :: on  A LCONF-Schema-Definition MUST implement one reference STRUCTURE_SINGLE_BLOCK with default values\n(TEMPLATE_BLOCK) which will be used as the base for each defined Repeated-Block-Item.  Any number of Block-Items can be defined but this can also be limited in a LCONF-Schema-Definition. e.g.:   LCONF_NUMBER_MIN_REQUIRED_BLOCKS  LCONF_NUMBER_MAX_ALLOWED_BLOCKS",
            "title": "5.7. STRUCTURE_UNNAMED_BLOCKS"
        },
        {
            "location": "/lconf-specification/5-lconf-structures/#571-default-structure_unnamed_blocks",
            "text": "The Default STRUCTURE_UNNAMED_BLOCKS is always an empty collection.  It is PERMITTED to include an Empty STRUCTURE_UNNAMED_BLOCKS which will keep the default value as implemented in a\nLCONF-Schema-Definition (which is always an empty collection). This is the same as if one does not define the\nSTRUCTURE_UNNAMED_BLOCKS in a LCONF-Section.  In some cases it might be useful to include an empty STRUCTURE_UNNAMED_BLOCKS: e.g. if one wants previous comment lines.  Empty STRUCTURE_UNNAMED_BLOCKS MUST only define the STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER-Line and MUST NOT set any\nLCONF-Block-Item-Lines.  * Color  ___SECTION :: 4 :: LCONF :: SectionName\n* RepeatedBlock_Identifier_name\n    # Comment: UnNamed STRUCTURE_SINGLE_BLOCK\n    .\n        single_block_item1_key :: single_block_item1_value\n    .\n        single_block_item1_key :: single_block_item1_value\n# Comment: below a permitted empty `STRUCTURE_UNNAMED_BLOCKS_IDENTIFIER-Line` which will use the default value\n#          which is always an empty collection.\n* RepeatedBlock_2\n___END",
            "title": "5.7.1. Default STRUCTURE_UNNAMED_BLOCKS"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/",
            "text": "This file is part of the \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\n\n\n6. LCONF-Value-Types\n\n\nThe set of six main value types includes NOTSET, String, Boolean, Number, Date \n Time and Range.\n\n\n\n\n\n\nNOTSET\n\n\n\n\nTYPE_NOTSET\n\n\n\n\n\n\n\n\nString\n\n\n\n\nTYPE_STRING\n\n\nTYPE_DIGITS\n\n\nTYPE_PATTERN_DIGITS\n\n\n\n\n\n\n\n\nBoolean\n\n\n\n\nTYPE_BOOLEAN\n\n\n\n\n\n\n\n\nNumber\n\n\n\n\nTYPE_INTEGER\n\n\nTYPE_FLOAT\n\n\nTYPE_NUMBER\n\n\n\n\n\n\n\n\nDate \n Time\n\n\n\n\nTYPE_MONTH\n\n\nTYPE_DAY\n\n\nTYPE_MINUTE\n\n\nTYPE_SECOND\n\n\nTYPE_SECOND_FRACTION\n\n\nTYPE_DAY_MINUTE1\n\n\nTYPE_DAY_MINUTE2\n\n\nTYPE_DAY_SECOND1\n\n\nTYPE_DAY_SECOND2\n\n\nTYPE_DAY_SECOND_FRACTION1\n\n\nTYPE_DAY_SECOND_FRACTION2\n\n\n\n\n\n\n\n\nRange\n\n\n\n\nTYPE_RANGE_OF_ELEMENTS:\n\n\nTYPE_RANGE_BY_END_VALUE:\n\n\n\n\n\n\n\n\nWhen Is A LCONF-Value Interpreted As One Of The LCONF-Value-Types ?\n\n\nOnly the corresponding LCONF-Schema-Definition determinates which LCONF-Value is interpreted as which LCONF-Value-Type.\n\n\n6.1. TYPE_NOTSET\n\n\nA TYPE_NOTSET Value  is the Literal Name Token \nNOTSET\n and is used to indicate the lack of a value and is different\nfrom an Empty-Value. In a LCONF-Section it is the same as if that item was not specified at all and the implemented\ndefault value will stay assigned.\n\n\n\n\nNOTSET\n is a reserved LCONF character sequence.\n\n\n\n\nThe main difference between an Empty-Value and TYPE_NOTSET is:\n\n\n\n\n\n\nA TYPE_NOTSET Value (LCONF_NOTSET) is used to indicate the lack of a value. (e.g. STRUCTURE_TABLE a missing\n    Column-Value)\n\n\n\n\n\n\nAn Empty-Value is an actual value: e.g an empty string, an empty sequence etc.\n\n\n\n\n\n\nOnly simple LCONF-Structures MAY contain TYPE_NOTSET values:\n\n\n\n\nSTRUCTURE_PAIR\n\n\nSTRUCTURE_TABLE: only individual Column-Values MAY be set to TYPE_NOTSET\n\n\nSTRUCTURE_LIST: only individual List-Values MAY be set to TYPE_NOTSET\n\n\n\n\nIt is most useful in STRUCTURE_TABLEs if there are missing data.\n\n\n___SECTION :: 4 :: LCONF :: example Value Not Set\n\nfirst :: John\nlast :: Doe\nage :: NOTSET\n\n| people_table\n    # name  | height_cm | weight_kg | age    |\n    | Tim   | 178       | 86        | 37     |\n    | Paula | 156       | NOTSET    | NOTSET |\n    | John  | 186       | 84        | 23     |\n    | Dora  | 173       | NOTSET    | 45     |\n\n- color_name_list\n    Red\n    Blue\n    NOTSET\n    Green\n\n- color_name_list :: Red, Blue, NOTSET, Green\n___END\n\n\n\n\nLCONF-Template-Structure usually will implement a TYPE_NOTSET Values as None, nothing, void.\n\n\nTYPE_NOTSET is also special that it can be used in a LCONF-Section in place of any other expected Value Type.\n\nNOTE\n: A LCONF-Schema-Definition can define that an item is required: which means it can not be set to TYPE_NOTSET.\n\n\n6.2. String\n\n\nThere a three subtypes of Strings.\n\n\n6.2.1 TYPE_STRING\n\n\nA sequence of zero or more Unicode characters. It never spans multiple lines.\n\n\nkey1 :: This is a string value of a STRUCTURE_PAIR.\n\n- example_list\n    This is a string value of a STRUCTURE_LIST.\n    This is another string value of the same STRUCTURE_LIST.\n\n\n\n\nNOTE: LCONF-Schema-Definition can further constrain TYPE_STRING e.g: require a minimum and/or maximum number of chars.\n\n\n6.2.1 TYPE_DIGITS\n\n\nA TYPE_STRING constraint to only LCONF_DIGITS (zero or more LCONF_DIGITS).\nThese can be used for very long Digit sequences for e.g Unique Identity Numbers which will be kept as string values.\n\n\nkey1 :: 19453841344987531223565469\n\n\n\n\nNOTE: LCONF-Schema-Definition can further constrain TYPE_DIGITS e.g: require a minimum and/or maximum number of chars.\n\n\n6.2.2 TYPE_PATTERN_DIGITS\n\n\nA TYPE_STRING constraint to a pattern where only the individual LCONF_DIGITS MAY change. (zero or more chars).\nThese can be used for common pattern for e.g Social Security number which will be kept as string values.\n\n\nTYPE_PATTERN_DIGITS\n format uses the LCONF_AT_SIGN \n@\n as placeholder for expected digits.\n\n\n1. Example: the LCONF-DateTime type could be also represented by a TYPE_PATTERN_DIGITS\n\n\n@@@@-@@-@@T@@:@@:@@\n\n\n2013-07-01T12:30:59\n\n\n\n\n@@@@-@@-@@ @@:@@:@@\n\n\n2013-07-01 12:30:59\n\n\n\n\n2. Example: Social Security number\n\n\nAAA-GG-SSSS\n could be a pattern \n@@@-@@-@@@@\n\n\n123-55-6678\n\n\n\n\n6.3. TYPE_BOOLEAN\n\n\nLCONF_TRUE or LCONF_FALSE.  Literal Name Token: \ntrue\n or \nfalse\n.\n\n\nitem1 :: true\n\nitem2 :: false\n\n\n\n\nA LCONF-Template-Structure usually will implement an Empty TYPE_BOOLEAN Values as TYPE_NOTSET.\n\n\n6.4. Numbers\n\n\n6.4.1. TYPE_INTEGER\n\n\nA TYPE_INTEGER MUST contain only LCONF_DIGITS. It MAY have a preceding LCONF_PLUS or LCONF_MINUS.\n\n\n\n\n64 bit (signed long) range expected (-9223372036854775808 to +9223372036854775807).\n\n\n\n\nkey1 :: 89\n\n- example_list\n    +18950\n    0\n    -800000\n\n\n\n\nLCONF-Template-Structure usually will implement an Empty LCONF-Integer Values as TYPE_NOTSET or a predefined\nInteger (e.g. zero)\n\n\nNOTE: LCONF-Schema-Definition can further constrain TYPE_INTEGER e.g: require a minimum and/or maximum value.\n\n\n6.4.2. TYPE_FLOAT\n\n\nTYPE_FLOAT supports four different notations:\n\n\n\n\nFractional: \n+3.1415\n, \n-3.1415\n\n\nExponent: \n5e+22\n, \n-2E-2\n\n\nFractional And Exponent Mixed: \n6.196E63\n, \n-1.54e-003\n\n\nFraction P/Q Of Two Integers: \n+3/4\n, \n-93/16\n, \n1/8\n, \n2789/-598\n\n\n\n\nLCONF-Template-Structure usually will implement an Empty TYPE_FLOAT as TYPE_NOTSET or a predefined Float (e.g. 0.0).\n\n\nNOTE: LCONF-Schema-Definition can further constrain TYPE_FLOAT e.g: require a minimum and/or maximum value.\n\n\n6.4.2.1. Fractional Notation\n\n\nA TYPE_INTEGER part followed by a LCONF-Number-Fractional-Part.\n\n\nkey1 :: +1.0\n\n- example_list\n    -0.01\n    3.1415\n\n\n\n\n6.4.2.2. Exponent Notation\n\n\nA TYPE_INTEGER part followed by a LCONF-Number-Exponent-Part.\n\n\nkey1 :: 5e+22\n\n- example_list\n    -1e6\n    -2E-2\n\n\n\n\n6.4.2.3. Fractional And Exponent Mixed Notation\n\n\nA TYPE_INTEGER part followed by a LCONF-Number-Fractional-Part followed by a LCONF-Number-Exponent-Part.\n\n\nkey1 :: 6.196E63\n\n- example_list\n    -1.54e-003\n    -1.54e+003\n    2.5e-4\n\n\n\n\n6.4.2.4. Fraction P/Q Of Two Integers Notation\n\n\nA TYPE_INTEGER part followed by a LCONF_SLASH followed by a TYPE_INTEGER part which MUST NOT be equal to 0 (zero).\n\n\nkey1 :: +3/4\n\n- example_list\n    -93/16\n    1/8\n    2789/-598\n\n\n\n\n6.4.3. TYPE_NUMBER\n\n\nA TYPE_NUMBER value can either be a TYPE_INTEGER or TYPE_FLOAT.\n\n\n- example_valid_number_list\n    -93/16\n    1/8\n    2789/-598\n    -1.54e-003\n    -1.54e+003\n    2.5e-4\n    5\n    -189556\n    +23\n    -0.01\n    3.1415\n\n\n\n\nNOTE: LCONF-Schema-Definition can further constrain TYPE_FLOAT e.g: require a minimum and/or maximum value.\n\n\n6.5. Date \n Time\n\n\nA LCONF Date \n Time value is based on the ISO 8601 standard and supports following notations.\n\n\nA LCONF-DateTime value is a combination of a LCONF-Date and LCONF-Time and has the LCONF-Date-Time-Separator between\nthe Date and Time part.\n\n\nLCONF-Template-Structure usually will implement an Empty LCONF Date \n Time Value as TYPE_NOTSET or a predefined\nDate \n Time Value (e.g. 1970-01, 1970-01-01, 00:00:00, 1970-01-01T00:00:00, 1970-01-01 00:00:00).\n\n\n6.5.1. TYPE_MONTH\n\n\nYYYY-MM\n:\n\n\n\n\nA LCONF-Year\n\n\nfollowed by a LCONF-Date-Separator\n\n\nfollowed by a LCONF-Month\n\n\n\n\n1932-08\n\n2015-01\n\n\n\n\n6.5.2 TYPE_DAY\n\n\nYYYY-MM-DD\n:\n\n\n\n\nA LCONF-Year\n\n\nfollowed by a LCONF-Date-Separator\n\n\nfollowed by a LCONF-Month\n\n\nfollowed by a LCONF-Date-Separator\n\n\nfollowed by a LCONF-Day\n\n\n\n\n1932-08-31\n\n2014-11-15\n\n\n\n\n6.5.3. TYPE_MINUTE\n\n\nhh:mm\n:\n\n\n\n\nA LCONF-Hour\n\n\nfollowed by a LCONF-Time-Separator\n\n\nfollowed by a LCONF-Minute\n\n\n\n\n12:30\n\n23:59\n\n\n\n\n6.5.4. TYPE_SECOND\n\n\nhh:mm:ss\n:\n\n\n\n\nA LCONF-Hour\n\n\nfollowed by a LCONF-Time-Separator\n\n\nfollowed by a LCONF-Minute\n\n\nfollowed by a LCONF-Time-Separator\n\n\nfollowed by a LCONF-Second\n\n\n\n\n02:30:42\n\n19:00:02\n\n\n\n\n6.5.5. TYPE_SECOND_FRACTION\n\n\nhh:mm:ss.fff\n:\n\n\n\n\nA LCONF-Hour\n\n\nfollowed by a LCONF-Time-Separator\n\n\nfollowed by a LCONF-Minute\n\n\nfollowed by a LCONF-Time-Separator\n\n\nfollowed by a LCONF-Second\n\n\nfollowed by a LCONF-Second-Fraction-Part\n\n\n\n\nStartFractionSecond :: 12:30:59.001\n\nStartFractionSecond :: 18:53:16.1\n\nStartFractionSecond :: 04:02:00.000156\n\n\n\n\n6.5.6. TYPE_DAY_MINUTE1\n\n\nYYYY-MM-DD hh:mm\n\n\n2013-07-01 12:30\n\n\n\n\n6.5.7. TYPE_DAY_MINUTE2\n\n\nYYYY-MM-DDThh:mm\n\n\n2013-07-01T12:30\n\n\n\n\n6.5.8. TYPE_DAY_SECOND1\n\n\nYYYY-MM-DD hh:mm:ss\n\n\n2013-07-01 12:30:59\n\n\n\n\n6.5.9. TYPE_DAY_SECOND2\n\n\nYYYY-MM-DDThh:mm:ss\n\n\n2013-07-01T12:30:59\n\n\n\n\n6.5.10. TYPE_DAY_SECOND_FRACTION1\n\n\nYYYY-MM-DD hh:mm:ss.fff\n\n\n2013-07-01 12:30:59.001\n\n2013-07-01 18:53:16.1\n\n2013-07-01 04:02:00.000156\n\n\n\n\n6.5.11. TYPE_DAY_SECOND_FRACTION2\n\n\nYYYY-MM-DDThh:mm:ss.fff\n\n\n2013-07-01T12:30:59.001\n\n2013-07-01T18:53:16.1\n\n2013-07-01T04:02:00.000156\n\n\n\n\n6.6. Range\n\n\nA range defines an arithmetic sequence where the first element is the LCONF-Range-Start-Number.\n\n\nLCONF-Template-Structure usually will implement an Empty LCONF-Range Value as TYPE_NOTSET or a predefined\nLCONF-Range Value.\n\n\nLCONF supports two types of ranges.\n\n\n6.6.1. TYPE_RANGE_OF_ELEMENTS\n\n\nA TYPE_RANGE_OF_ELEMENTS refers to an arithmetic sequence which contains as many elements as defined by the\nLCONF-Integer part of the LCONF-Range-Number-Of-Elements.\n\n\nA TYPE_RANGE_OF_ELEMENTS MUST:\n\n\n\n\nstart with a LCONF-Range-Start-Number\n\n\nfollowed by a LCONF-Range-Part-Separator\n\n\nfollowed by a LCONF-Range-Step-Number\n\n\nfollowed by a LCONF-Range-Part-Separator\n\n\nfollowed by LCONF-Range-Number-Of-Elements\n\n\n\n\ntext\n LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-Number-Of-Elements\n\n\n-10|1|*21\n\n512.4|0.125|*8\n\n\n\n\n\n\n\n\n-10|1|*21\n represents a sequence of:\n\n\n-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\n\n\n\n\n512.4|0.125|*8\n represents a sequence of:\n\n\n512.4, 512.275, 512.15, 512.025, 511.9, 511.775, 511.65, 511.525\n\n\n\n\n\n\n6.6.2. TYPE_RANGE_BY_END_VALUE\n\n\nA TYPE_RANGE_BY_END_VALUE defines an arithmetic sequence where the first element is the LCONF-Range-Start-Number.\n\n\nA TYPE_RANGE_BY_END_VALUE supports following notations:\n\n\n\n\nLCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number\n\n\n\n\nLCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number|FORCE\n\n\nTo force always the inclusion of the \nLCONF-Range-End-Number\n.\n\n\n\n\n\n\nA TYPE_RANGE_BY_END_VALUE MUST:\n\n\n\n\nstarts with a LCONF-Range-Start-Number\n\n\nfollowed by a LCONF-Range-Part-Separator\n\n\nfollowed by a LCONF-Range-Step-Number\n\n\nfollowed by a LCONF-Range-Part-Separator\n\n\nfollowed by LCONF-Range-End-Number\n\n\nfollowed optionally by a LCONF-Range-Part-Separator and LCONF_FORCE.\n\n\n\n\n6.6.2.1. Positive LCONF-Range-Step-Number\n\n\nIf the LCONF-Range-Step-Number value is greater than zero then the LCONF-Range-Start-Number MUST be less or equal to\nthe \nLCONF-Range-End-Number\n.\n\n\nThe last element is the largest\n: \nStart-Number + i * Step-Number less or equal to LCONF-Range-End-Number\n.\n\n\n-10|1|5\n\n-10|1|5|FORCE\n\n100.8|1.27|106\n\n100.8|1.27|106|FORCE\n\n\n\n\n\n\n\n\n-10|1|5\n represents a sequence of:\n\n\n-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5\n\n\n\n\n\n\n-10|1|5|FORCE\n represents a sequence of:\n\n\n-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5\n\n\n\n\n\n\n100.8|1.27|106\n represents a sequence of:\n\n\n100.8, 102.07, 103.34, 104.61, 105.88\n\n\n\n\n\n\n100.8|1.27|106|FORCE\n represents a sequence of:\n\n\n100.8, 102.07, 103.34, 104.61, 105.88, 106\n\n\n\n\n\n\n6.6.2.2. Negative LCONF-Range-Step-Number\n\n\nIf the LCONF-Range-Step-Number value is less than zero then the LCONF-Range-Start-Number MUST be greater or equal to\nthe \nLCONF-Range-End-Number\n.\n\n\nThe last element is the smallest\n: \nStart-Number + i * Step-Number greater or equal to LCONF-Range-End-Number\n.\n\n\n10|1|-5\n\n10|1|-5|FORCE\n\n100.8|-1.27|92.1\n\n100.8|-1.27|92.1|FORCE\n\n\n\n\n\n\n\n\n10|1|-5\n represents a sequence of:\n\n\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5\n\n\n\n\n\n\n10|1|-5|FORCE\n represents a sequence of:\n\n\n10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5\n\n\n\n\n\n\n100.8|-1.27|92.1\n represents a sequence of:\n\n\n100.8, 99.53, 98.26, 96.99, 95.72, 94.45, 93.18\n\n\n\n\n\n\n100.8|-1.27|92.1|FORCE\n represents a sequence of:\n\n\n100.8, 99.53, 98.26, 96.99, 95.72, 94.45, 93.18, 92.1",
            "title": "6. LCONF-Value-Types"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6-lconf-value-types",
            "text": "The set of six main value types includes NOTSET, String, Boolean, Number, Date   Time and Range.    NOTSET   TYPE_NOTSET     String   TYPE_STRING  TYPE_DIGITS  TYPE_PATTERN_DIGITS     Boolean   TYPE_BOOLEAN     Number   TYPE_INTEGER  TYPE_FLOAT  TYPE_NUMBER     Date   Time   TYPE_MONTH  TYPE_DAY  TYPE_MINUTE  TYPE_SECOND  TYPE_SECOND_FRACTION  TYPE_DAY_MINUTE1  TYPE_DAY_MINUTE2  TYPE_DAY_SECOND1  TYPE_DAY_SECOND2  TYPE_DAY_SECOND_FRACTION1  TYPE_DAY_SECOND_FRACTION2     Range   TYPE_RANGE_OF_ELEMENTS:  TYPE_RANGE_BY_END_VALUE:     When Is A LCONF-Value Interpreted As One Of The LCONF-Value-Types ?  Only the corresponding LCONF-Schema-Definition determinates which LCONF-Value is interpreted as which LCONF-Value-Type.",
            "title": "6. LCONF-Value-Types"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#61-type_notset",
            "text": "A TYPE_NOTSET Value  is the Literal Name Token  NOTSET  and is used to indicate the lack of a value and is different\nfrom an Empty-Value. In a LCONF-Section it is the same as if that item was not specified at all and the implemented\ndefault value will stay assigned.   NOTSET  is a reserved LCONF character sequence.   The main difference between an Empty-Value and TYPE_NOTSET is:    A TYPE_NOTSET Value (LCONF_NOTSET) is used to indicate the lack of a value. (e.g. STRUCTURE_TABLE a missing\n    Column-Value)    An Empty-Value is an actual value: e.g an empty string, an empty sequence etc.    Only simple LCONF-Structures MAY contain TYPE_NOTSET values:   STRUCTURE_PAIR  STRUCTURE_TABLE: only individual Column-Values MAY be set to TYPE_NOTSET  STRUCTURE_LIST: only individual List-Values MAY be set to TYPE_NOTSET   It is most useful in STRUCTURE_TABLEs if there are missing data.  ___SECTION :: 4 :: LCONF :: example Value Not Set\n\nfirst :: John\nlast :: Doe\nage :: NOTSET\n\n| people_table\n    # name  | height_cm | weight_kg | age    |\n    | Tim   | 178       | 86        | 37     |\n    | Paula | 156       | NOTSET    | NOTSET |\n    | John  | 186       | 84        | 23     |\n    | Dora  | 173       | NOTSET    | 45     |\n\n- color_name_list\n    Red\n    Blue\n    NOTSET\n    Green\n\n- color_name_list :: Red, Blue, NOTSET, Green\n___END  LCONF-Template-Structure usually will implement a TYPE_NOTSET Values as None, nothing, void.  TYPE_NOTSET is also special that it can be used in a LCONF-Section in place of any other expected Value Type. NOTE : A LCONF-Schema-Definition can define that an item is required: which means it can not be set to TYPE_NOTSET.",
            "title": "6.1. TYPE_NOTSET"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#62-string",
            "text": "There a three subtypes of Strings.",
            "title": "6.2. String"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#621-type_string",
            "text": "A sequence of zero or more Unicode characters. It never spans multiple lines.  key1 :: This is a string value of a STRUCTURE_PAIR.\n\n- example_list\n    This is a string value of a STRUCTURE_LIST.\n    This is another string value of the same STRUCTURE_LIST.  NOTE: LCONF-Schema-Definition can further constrain TYPE_STRING e.g: require a minimum and/or maximum number of chars.",
            "title": "6.2.1 TYPE_STRING"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#621-type_digits",
            "text": "A TYPE_STRING constraint to only LCONF_DIGITS (zero or more LCONF_DIGITS).\nThese can be used for very long Digit sequences for e.g Unique Identity Numbers which will be kept as string values.  key1 :: 19453841344987531223565469  NOTE: LCONF-Schema-Definition can further constrain TYPE_DIGITS e.g: require a minimum and/or maximum number of chars.",
            "title": "6.2.1 TYPE_DIGITS"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#622-type_pattern_digits",
            "text": "A TYPE_STRING constraint to a pattern where only the individual LCONF_DIGITS MAY change. (zero or more chars).\nThese can be used for common pattern for e.g Social Security number which will be kept as string values.  TYPE_PATTERN_DIGITS  format uses the LCONF_AT_SIGN  @  as placeholder for expected digits.  1. Example: the LCONF-DateTime type could be also represented by a TYPE_PATTERN_DIGITS  @@@@-@@-@@T@@:@@:@@  2013-07-01T12:30:59  @@@@-@@-@@ @@:@@:@@  2013-07-01 12:30:59  2. Example: Social Security number  AAA-GG-SSSS  could be a pattern  @@@-@@-@@@@  123-55-6678",
            "title": "6.2.2 TYPE_PATTERN_DIGITS"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#63-type_boolean",
            "text": "LCONF_TRUE or LCONF_FALSE.  Literal Name Token:  true  or  false .  item1 :: true\n\nitem2 :: false  A LCONF-Template-Structure usually will implement an Empty TYPE_BOOLEAN Values as TYPE_NOTSET.",
            "title": "6.3. TYPE_BOOLEAN"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#64-numbers",
            "text": "",
            "title": "6.4. Numbers"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#641-type_integer",
            "text": "A TYPE_INTEGER MUST contain only LCONF_DIGITS. It MAY have a preceding LCONF_PLUS or LCONF_MINUS.   64 bit (signed long) range expected (-9223372036854775808 to +9223372036854775807).   key1 :: 89\n\n- example_list\n    +18950\n    0\n    -800000  LCONF-Template-Structure usually will implement an Empty LCONF-Integer Values as TYPE_NOTSET or a predefined\nInteger (e.g. zero)  NOTE: LCONF-Schema-Definition can further constrain TYPE_INTEGER e.g: require a minimum and/or maximum value.",
            "title": "6.4.1. TYPE_INTEGER"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#642-type_float",
            "text": "TYPE_FLOAT supports four different notations:   Fractional:  +3.1415 ,  -3.1415  Exponent:  5e+22 ,  -2E-2  Fractional And Exponent Mixed:  6.196E63 ,  -1.54e-003  Fraction P/Q Of Two Integers:  +3/4 ,  -93/16 ,  1/8 ,  2789/-598   LCONF-Template-Structure usually will implement an Empty TYPE_FLOAT as TYPE_NOTSET or a predefined Float (e.g. 0.0).  NOTE: LCONF-Schema-Definition can further constrain TYPE_FLOAT e.g: require a minimum and/or maximum value.",
            "title": "6.4.2. TYPE_FLOAT"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6421-fractional-notation",
            "text": "A TYPE_INTEGER part followed by a LCONF-Number-Fractional-Part.  key1 :: +1.0\n\n- example_list\n    -0.01\n    3.1415",
            "title": "6.4.2.1. Fractional Notation"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6422-exponent-notation",
            "text": "A TYPE_INTEGER part followed by a LCONF-Number-Exponent-Part.  key1 :: 5e+22\n\n- example_list\n    -1e6\n    -2E-2",
            "title": "6.4.2.2. Exponent Notation"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6423-fractional-and-exponent-mixed-notation",
            "text": "A TYPE_INTEGER part followed by a LCONF-Number-Fractional-Part followed by a LCONF-Number-Exponent-Part.  key1 :: 6.196E63\n\n- example_list\n    -1.54e-003\n    -1.54e+003\n    2.5e-4",
            "title": "6.4.2.3. Fractional And Exponent Mixed Notation"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6424-fraction-pq-of-two-integers-notation",
            "text": "A TYPE_INTEGER part followed by a LCONF_SLASH followed by a TYPE_INTEGER part which MUST NOT be equal to 0 (zero).  key1 :: +3/4\n\n- example_list\n    -93/16\n    1/8\n    2789/-598",
            "title": "6.4.2.4. Fraction P/Q Of Two Integers Notation"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#643-type_number",
            "text": "A TYPE_NUMBER value can either be a TYPE_INTEGER or TYPE_FLOAT.  - example_valid_number_list\n    -93/16\n    1/8\n    2789/-598\n    -1.54e-003\n    -1.54e+003\n    2.5e-4\n    5\n    -189556\n    +23\n    -0.01\n    3.1415  NOTE: LCONF-Schema-Definition can further constrain TYPE_FLOAT e.g: require a minimum and/or maximum value.",
            "title": "6.4.3. TYPE_NUMBER"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#65-date-time",
            "text": "A LCONF Date   Time value is based on the ISO 8601 standard and supports following notations.  A LCONF-DateTime value is a combination of a LCONF-Date and LCONF-Time and has the LCONF-Date-Time-Separator between\nthe Date and Time part.  LCONF-Template-Structure usually will implement an Empty LCONF Date   Time Value as TYPE_NOTSET or a predefined\nDate   Time Value (e.g. 1970-01, 1970-01-01, 00:00:00, 1970-01-01T00:00:00, 1970-01-01 00:00:00).",
            "title": "6.5. Date &amp; Time"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#651-type_month",
            "text": "YYYY-MM :   A LCONF-Year  followed by a LCONF-Date-Separator  followed by a LCONF-Month   1932-08\n\n2015-01",
            "title": "6.5.1. TYPE_MONTH"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#652-type_day",
            "text": "YYYY-MM-DD :   A LCONF-Year  followed by a LCONF-Date-Separator  followed by a LCONF-Month  followed by a LCONF-Date-Separator  followed by a LCONF-Day   1932-08-31\n\n2014-11-15",
            "title": "6.5.2 TYPE_DAY"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#653-type_minute",
            "text": "hh:mm :   A LCONF-Hour  followed by a LCONF-Time-Separator  followed by a LCONF-Minute   12:30\n\n23:59",
            "title": "6.5.3. TYPE_MINUTE"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#654-type_second",
            "text": "hh:mm:ss :   A LCONF-Hour  followed by a LCONF-Time-Separator  followed by a LCONF-Minute  followed by a LCONF-Time-Separator  followed by a LCONF-Second   02:30:42\n\n19:00:02",
            "title": "6.5.4. TYPE_SECOND"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#655-type_second_fraction",
            "text": "hh:mm:ss.fff :   A LCONF-Hour  followed by a LCONF-Time-Separator  followed by a LCONF-Minute  followed by a LCONF-Time-Separator  followed by a LCONF-Second  followed by a LCONF-Second-Fraction-Part   StartFractionSecond :: 12:30:59.001\n\nStartFractionSecond :: 18:53:16.1\n\nStartFractionSecond :: 04:02:00.000156",
            "title": "6.5.5. TYPE_SECOND_FRACTION"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#656-type_day_minute1",
            "text": "YYYY-MM-DD hh:mm  2013-07-01 12:30",
            "title": "6.5.6. TYPE_DAY_MINUTE1"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#657-type_day_minute2",
            "text": "YYYY-MM-DDThh:mm  2013-07-01T12:30",
            "title": "6.5.7. TYPE_DAY_MINUTE2"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#658-type_day_second1",
            "text": "YYYY-MM-DD hh:mm:ss  2013-07-01 12:30:59",
            "title": "6.5.8. TYPE_DAY_SECOND1"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#659-type_day_second2",
            "text": "YYYY-MM-DDThh:mm:ss  2013-07-01T12:30:59",
            "title": "6.5.9. TYPE_DAY_SECOND2"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6510-type_day_second_fraction1",
            "text": "YYYY-MM-DD hh:mm:ss.fff  2013-07-01 12:30:59.001\n\n2013-07-01 18:53:16.1\n\n2013-07-01 04:02:00.000156",
            "title": "6.5.10. TYPE_DAY_SECOND_FRACTION1"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6511-type_day_second_fraction2",
            "text": "YYYY-MM-DDThh:mm:ss.fff  2013-07-01T12:30:59.001\n\n2013-07-01T18:53:16.1\n\n2013-07-01T04:02:00.000156",
            "title": "6.5.11. TYPE_DAY_SECOND_FRACTION2"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#66-range",
            "text": "A range defines an arithmetic sequence where the first element is the LCONF-Range-Start-Number.  LCONF-Template-Structure usually will implement an Empty LCONF-Range Value as TYPE_NOTSET or a predefined\nLCONF-Range Value.  LCONF supports two types of ranges.",
            "title": "6.6. Range"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#661-type_range_of_elements",
            "text": "A TYPE_RANGE_OF_ELEMENTS refers to an arithmetic sequence which contains as many elements as defined by the\nLCONF-Integer part of the LCONF-Range-Number-Of-Elements.  A TYPE_RANGE_OF_ELEMENTS MUST:   start with a LCONF-Range-Start-Number  followed by a LCONF-Range-Part-Separator  followed by a LCONF-Range-Step-Number  followed by a LCONF-Range-Part-Separator  followed by LCONF-Range-Number-Of-Elements   text\n LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-Number-Of-Elements  -10|1|*21\n\n512.4|0.125|*8    -10|1|*21  represents a sequence of:  -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10    512.4|0.125|*8  represents a sequence of:  512.4, 512.275, 512.15, 512.025, 511.9, 511.775, 511.65, 511.525",
            "title": "6.6.1. TYPE_RANGE_OF_ELEMENTS"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#662-type_range_by_end_value",
            "text": "A TYPE_RANGE_BY_END_VALUE defines an arithmetic sequence where the first element is the LCONF-Range-Start-Number.  A TYPE_RANGE_BY_END_VALUE supports following notations:   LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number   LCONF-Range-Start-Number|LCONF-Range-Step-Number|LCONF-Range-End-Number|FORCE  To force always the inclusion of the  LCONF-Range-End-Number .    A TYPE_RANGE_BY_END_VALUE MUST:   starts with a LCONF-Range-Start-Number  followed by a LCONF-Range-Part-Separator  followed by a LCONF-Range-Step-Number  followed by a LCONF-Range-Part-Separator  followed by LCONF-Range-End-Number  followed optionally by a LCONF-Range-Part-Separator and LCONF_FORCE.",
            "title": "6.6.2. TYPE_RANGE_BY_END_VALUE"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6621-positive-lconf-range-step-number",
            "text": "If the LCONF-Range-Step-Number value is greater than zero then the LCONF-Range-Start-Number MUST be less or equal to\nthe  LCONF-Range-End-Number .  The last element is the largest :  Start-Number + i * Step-Number less or equal to LCONF-Range-End-Number .  -10|1|5\n\n-10|1|5|FORCE\n\n100.8|1.27|106\n\n100.8|1.27|106|FORCE    -10|1|5  represents a sequence of:  -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5    -10|1|5|FORCE  represents a sequence of:  -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5    100.8|1.27|106  represents a sequence of:  100.8, 102.07, 103.34, 104.61, 105.88    100.8|1.27|106|FORCE  represents a sequence of:  100.8, 102.07, 103.34, 104.61, 105.88, 106",
            "title": "6.6.2.1. Positive LCONF-Range-Step-Number"
        },
        {
            "location": "/lconf-specification/6-lconf-value-types/#6622-negative-lconf-range-step-number",
            "text": "If the LCONF-Range-Step-Number value is less than zero then the LCONF-Range-Start-Number MUST be greater or equal to\nthe  LCONF-Range-End-Number .  The last element is the smallest :  Start-Number + i * Step-Number greater or equal to LCONF-Range-End-Number .  10|1|-5\n\n10|1|-5|FORCE\n\n100.8|-1.27|92.1\n\n100.8|-1.27|92.1|FORCE    10|1|-5  represents a sequence of:  10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5    10|1|-5|FORCE  represents a sequence of:  10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5    100.8|-1.27|92.1  represents a sequence of:  100.8, 99.53, 98.26, 96.99, 95.72, 94.45, 93.18    100.8|-1.27|92.1|FORCE  represents a sequence of:  100.8, 99.53, 98.26, 96.99, 95.72, 94.45, 93.18, 92.1",
            "title": "6.6.2.2. Negative LCONF-Range-Step-Number"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/",
            "text": "This file is part of the \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\n\n\n7. LCONF-Schema-Definitions\n\n\nLCONF uses LCONF-Schema-Definitions to descripe the structure and default content as well as any constraints on the\nstructure and content of a LCONF-Section, above and beyond the basic syntactical constraints imposed by LCONF itself.\nLCONF-Schema-Definitions are valid LCONF syntax.\n\n\n7.1. LCONF-Schema-Formats\n\n\nThere are two supported LCONF-Schema-Formats:\n\n\n\n\nLCONF_SCHEMA_STRICT_FORMAT: \nSTRICT\n (uses additional constraints: e.g. naming conventions)\n\n\nLCONF_SCHEMA_FLEXIBLE_FORMAT: \nFLEXIBLE\n (less constraints)\n\n\n\n\nAll LCONF-Libraries MUST support the \nLCONF_SCHEMA_STRICT_FORMAT\n and MAY implement individual \nLCONF_SCHEMA_FLEXIBLE_FORMAT\n.\n\n\nAll LCONF-Schema-Definition Sections MUST set the used LCONF-Schema-Format in the: LCONF-Section Start Line:\n\n\nLCONF-Schema-Definition Section-Start-Line MUST\n\n\n\n\nstart with the LCONF_SECTION_START token\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Indentation-Per-Level\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed be a LCONF_SCHEMA_STRICT_FORMAT or LCONF_SCHEMA_FLEXIBLE_FORMAT\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Section-Name\n\n\n\n\n___SECTION :: 4 :: STRICT :: Menu Configuration Schema Definition`\n\n\n\n\n___SECTION :: 4 :: FLEXIBLE :: Menu Configuration Schema Definition`\n\n\n\n\n7.1. 1. LCONF_SCHEMA_STRICT_FORMAT\n\n\nThis is the default LCONF-Schema-Format and MUST be supported by all LCONF-Libraries.\n\n\nNaming Convention\n\n\nA LCONF_SCHEMA_STRICT_FORMAT LCONF-Key-Name (STRUCTURE_TABLE's LCONF-Column-Name are also considered to be\nLCONF-Key-Names):\n\n\nMUST be a sequence of one or more (but maximum thirty-one '31') characters of these groups:\n\n\n\n\nLCONF_UNDERSCORE\n\n\nLCONF_CAPITAL_LETTERS\n\n\nLCONF_SMALL_LETTERS\n\n\nLCONF_DIGITS\n\n\n\n\nAdditionally constraints:\n\n\n\n\nThe first character MUST NOT be a LCONF_DIGITS\n\n\nThe name SHOULD NOT be one of LCONF's Literal Name Tokens\n\n\nThe name SHOULD NOT be one of common reserved programming words\n\n\n\n\n7.1.2. LCONF_SCHEMA_FLEXIBLE_FORMAT\n\n\nThis LCONF-Schema-Format has fewer constraints but MAY NOT be supported by all LCONF-Libraries.\n\n\nNaming Convention\n\n\nA LCONF_SCHEMA_FLEXIBLE_FORMAT LCONF-Key-Name (STRUCTURE_TABLE's LCONF-Column-Name are also considered to be\nLCONF-Key-Names) is a sequence of one or more Unicode characters and is case-sensitive. It MUST NOT contain any\nLCONF_VERTICAL_LINE \n|\n.\n\n\n7.2. Schema: \nIDENTIFIER\n Line\n\n\nEach LCONF-Schema-Definition is a \nSTRUCTURE_SINGLE_BLOCK\n where the Identifier-Line LCONF-Key-Name:\n\n\nA LCONF-Schema-Identifier-Line MUST\n\n\n\n\nstart with a STRUCTURE_SINGLE_BLOCK_IDENTIFIER\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Key-Name which MUST be the same as the LCONF-Key-Name in the final LCONF-Section it describes\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_SCHEMA_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Structure for the LCONF-Key-Name in the final LCONF-Section it describes\n\n\nand optionally followed by one LCONF_SPACE and an additional LCONF-Constrain option\n\n\n\n\nExample LCONF-Schema Identifier-Lines\n\n\n. Registered | STRUCTURE_PAIR\n\n. Colors | STRUCTURE_LIST\n\n. mobile_numbers | STRUCTURE_LIST (0,3)\n\n. mobile_numbers | STRUCTURE_LIST (0,3)\n\n. credit_cards | STRUCTURE_UNNAMED_BLOCKS (1,2)\n\n\n\n\nExample of a corresponding LCONF-Section\n\n\nRegistered :: true\n\n- Colors\n    Blue\n    Red\n\n# minimum required list items 0, maximum allowed items 3\n- mobile_numbers\n\n# minimum required blocks 1, maximum allowed blocks 2\n* credit_cards\n    .\n        issuing_network :: Visa\n        card_number :: 4639588964759877\n\n\n\n\n7.2.1. Additional Constraints\n\n\nSome elements can have \none\n additional constraint after the LCONF-Structure.\n\n\n\n\nSTRUCTURE_LIST\n\n\nSTRUCTURE_TABLE,\n\n\nSTRUCTURE_NAMED_BLOCKS\n\n\nSTRUCTURE_UNNAMED_BLOCKS\n\n\n\n\ncan set a minimum/maximum number of elements they require. (LCONF-Constrain-Min-Max)\n\n\nA LCONF-Constrain-Min-Max MUST:\n\n\n\n\nstart with a LCONF_LEFT_PARENTHESIS\n\n\nfollowed by a \nLCONF-Constrain-Min\n: TYPE_INTEGER greater than zero (0)\n\n\nfollowed by a LCONF_COMMA\n\n\nfollowed by a \nLCONF-Constrain-Max\n: TYPE_INTEGER greater than zero (0)\n\n\nfollowed by a LCONF_RIGHT_PARENTHESIS\n\n\n\n\nIMPORTANT: To not define one of the two constraints set it to TYPE_NOTSET (LCONF_NOTSET).\n\n\n# minimum required list items 2, maximum allowed items 5\n. MobileNumbers | STRUCTURE_LIST (2,5)\n\n# minimum required table rows not restricted, maximum allowed required table rows 5\n. interests | STRUCTURE_TABLE (NOTSET,5)\n\n# minimum required blocks 1, maximum allowed blocks not restricted\n. credit_cards | STRUCTURE_UNNAMED_BLOCKS (1,NOTSET)\n\n\n\n\n7.3. Schema: \nITEM\n Pair\n\n\nThis is required except STRUCTURE_SINGLE_BLOCK, STRUCTURE_NAMED_BLOCKS, STRUCTURE_UNNAMED_BLOCKS only use the\n\nLCONF-Schema Identifier-Line\n.\n\n\nThe Value for this pair is a LCONF-Item-Requirement-Option followed by a LCONF-Value-Type.\n\n\nEXCEPTION:\n STRUCTURE_TABLE uses only the LCONF-Item-Requirement-Option because LCONF-Value-Types are set per\nColumn.\n\n\nA LCONF-Schema \nITEM\n Pair MUST\n\n\n\n\nstart with a LCONF-Key-Name: \nITEM\n (U+0049 U+0054 U+0045 U+004D)\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_KEY_VALUE_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one of the LCONF-Item-Requirement-Option\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by one LCONF_SCHEMA_SEPARATOR\n\n\nfollowed by one LCONF_SPACE\n\n\nfollowed by a LCONF-Value-Type for the LCONF-Key-Name in the final LCONF-Section it describes\n\n\n\n\nand optionally followed by one LCONF_SPACE and an additional LCONF-Constrain option\n\n\n\n\nException: for TYPE_PATTERN_DIGITS this is not optional but a pattern MUST be defined\n\n\n\n\n\n\n\n\nExample LCONF-Schema \nITEM\n Pair\n\n\n. Colors | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n\n. Sex | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_STRING [Male, Female]\n\n. ports | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER [25,80,443]\n\n. credit_card_number | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_DIGITS (15,19)\n\n. telephone_number | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_PATTERN_DIGITS (+@ @@@ @@@ @@@@)\n\n. interest_rate | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT (0.5,\n10.0)\n\n. interest_rate2 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT (\n1.0,10.0)\n\n\n\n\nExample of a corresponding LCONF-Section\n\n\nRegistered :: true\n\n- Colors\n    Blue\n    Red\n\n# predefined valid values one of `Male`,` Female`\nSex :: Female\n\n# predefined valid values one of `25`, `80`, `443`\nports :: 80\n\n# minimum required chars (digits) 15, maximum allowed  chars (digits) 19\ncredit_card_number :: 4639588964759877\n\n# Pattern (+@ @@@ @@@ @@@@)\ntelephone_number :: +1 212 748 4496\n\n# minimum required value 0.5, maximum allowed value less than 10.0\ninterest_rate :: 9.9999\n\n# minimum required value greater than 1.0, maximum allowed value 10.0\ninterest_rate2 :: 10.0\n\n\n\n\n7.3.1 LCONF-Item-Requirement-Option\n\n\n\n\n\n\nOPTIONAL\n\n\n\n\nItem is NOT REQUIRED to be defined in a LCONF-Section\n\n\nItem COULD be defined but set \nNOTSET\n\n\nItem COULD be defined and set empty (which will overwrite any defaults)\n\n\nItem COULD be defined and have set a value in accordance to the expected LCONF-Value-Type\n\n\n\n\n\n\n\n\nREQUIRED (this CAN be an Empty-Value)\n\n\n\n\nItem MUST be defined in a LCONF-Section and MUST NOT be set \nNOTSET\n\n\nItem MUST be defined and can be set empty (which will overwrite any defaults)\n\n\nItem MUST be defined and can set a value in accordance to the expected LCONF-Value-Type\n\n\n\n\n\n\n\n\nREQUIRED_NOT_EMPTY (this MUST NOT be an Empty-Value)\n\n\n\n\nItem MUST be defined in a LCONF-Section and MUST NOT be set \nNOTSET\n and MUST NOT be set empty\n\n\nItem MUST be defined and MUST set a value in accordance to the expected LCONF-Value-Type\n\n\n\n\n\n\n\n\nEXCEPTION:\n STRUCTURE_TABLE uses only the Item-Requirement-Option because LCONF-Value-Types are set per Column.\n\n\n7.3.2. Additional Constraints\n\n\nSome elements can have \none\n additional constraint after the LCONF-Value-Type.\n\n\n7.3.1.1. List of Predefined Valid Values\n\n\nFor all LCONF-Value-Types one can define optional a list of predefined values (LCONF-Constrain-Predefined-Values).\n\n\nA LCONF-Constrain-Predefined-Values MUST:\n\n\n\n\nstart with a LCONF_LEFT_SQUARE_BRACKET\n\n\nfollowed by one or more \nvalid Values\n separated by LCONF_COMMA\n\n\nfollowed by a LCONF_RIGHT_SQUARE_BRACKET\n\n\n\n\nNOTE: LCONF_NOTSET and if an Empty-Value is valid is set in the LCONF-Item-Requirement-Option part.\n\n\n. Sex | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_STRING [Male, Female]\n\n. Sex2 | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_STRING [Male, Female]\n\n. ports | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER [25,80,443]\n\n\n\n\nExample of a corresponding LCONF-Section\n\n\n# predefined valid values one of `Male`,` Female`\nSex :: Female\n\n# predefined valid values one of `Male`,` Female`\n#   can also be empty\nSex ::\n\n# predefined valid values one of `25`, `80`, `443`\nports :: 80\n\n\n\n\n7.3.1.2. Digits Pattern\n\n\nFor TYPE_PATTERN_DIGITS one MUST define either a list of predefined valid values (LCONF-Constrain-Predefined-Values) or\na LCONF-Constrain-Digits-Pattern which MUST:\n\n\n\n\nstart with a LCONF_LEFT_PARENTHESIS\n\n\nfollowed by the required pattern (\n@\n are placeholders for digits)\n\n\nfollowed by a LCONF_RIGHT_PARENTHESIS\n\n\n\n\nNOTE: LCONF_NOTSET and if an Empty-Value is valid is set in the LCONF-Item-Requirement-Option part.\n\n\nExample LCONF-Schema \nITEM\n Pair\n\n\n. telephone_number | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_PATTERN_DIGITS (+@ @@@ @@@ @@@@)\n\n\n\n\nExample of a corresponding LCONF-Section\n\n\n# Pattern (+@ @@@ @@@ @@@@)\ntelephone_number :: +1 212 748 4496\n\n\n\n\n7.3.1.3. LCONF-Constrain-Min-Max\n\n\nTYPE_STRING, TYPE_DIGITS\n one MAY set a minimum/maximum LCONF-Constrain-Min-Max which MUST:\n\n\n\n\nstart with a LCONF_LEFT_PARENTHESIS\n\n\nfollowed by a \nLCONF-Constrain-Min\n: TYPE_INTEGER greater than zero (0)\n\n\nfollowed by a LCONF_COMMA\n\n\nfollowed by a \nLCONF-Constrain-Max\n: TYPE_INTEGER greater than zero (0)\n\n\nfollowed by a LCONF_RIGHT_PARENTHESIS\n\n\n\n\nIMPORTANT: To not define one of the two constraints set it to TYPE_NOTSET (LCONF_NOTSET).\n\n\nTYPE_STRING:\n the minimum is the number of required characters and the maximum allowed characters.\n\n\nTYPE_DIGITS:\n the minimum is the number of required characters (digits) and the maximum allowed characters (digits).\n\n\nExample LCONF-Schema \nITEM\n Pair\n\n\n. State | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING (2,2)\n\n. credit_card_number | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_DIGITS (15,19)\n\n\n\n\nExample of a corresponding LCONF-Section\n\n\n# minimum required chars 2, maximum allowed chars 2\nState :: NY\n\n# minimum required chars (digits) 15, maximum allowed chars (digits) 19\ncredit_card_number :: 4639588964759877\n\n\n\n\nFor \nTYPE_INTEGER, TYPE_FLOAT and TYPE_NUMBER\n  one MAY set a minimum/maximum LCONF-Constrain-Min-Max which MUST:\n\n\n\n\nstart with a LCONF_LEFT_PARENTHESIS\n\n\nfollowed by a \nLCONF-Constrain-Min\n: Optional LCONF_GREATER_THAN_SIGN followed by TYPE_INTEGER\n\n\nfollowed by a LCONF_COMMA\n\n\nfollowed by a \nLCONF-Constrain-Max\n: Optional LCONF_LESS_THAN_SIGN followed by TYPE_INTEGER\n\n\nfollowed by a LCONF_RIGHT_PARENTHESIS\n\n\n\n\nIMPORTANT: To not define one of the two constraints set it to TYPE_NOTSET (LCONF_NOTSET).\n\n\n\n\n\n\nLCONF-Constrain-Min:\n the minimum required value\n\n\n\n\nif an optional LCONF_GREATER_THAN_SIGN was defined the minimum reguired value greater than\n\n\n\n\n\n\n\n\nLCONF-Constrain-Max:\n the maximum allowed value\n\n\n\n\nif an optional LCONF_LESS_THAN_SIGN was defined the maximum allowed value less than\n\n\n\n\n\n\n\n\nExample LCONF-Schema \nITEM\n Pair\n\n\n. ZIPCode | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_INTEGER (10000,99999)\n\n. interest_rate | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT (0.5,10.0)\n\n. interest_rate2 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_NUMBER (\n1,\n10.0)\n\n. moving_balance | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT (\n-30000,NOTSET)\n\n\n\n\nExample of a corresponding LCONF-Section\n\n\n# minimum required value 10000, maximum allowed value 99999\nZIPCode :: 10022\n\n# minimum required value 0.5, maximum allowed value 10.0\ninterest_rate :: 10.0\n\n# minimum required value greater than 1, maximum allowed value less than 10.0\ninterest_rate2 :: 9.9999\n\n# minimum required value greater than -30000, maximum allowed value not defined\nmoving_balance :: -29999.9999\n\n\n\n\n7.4. Schema: \nDEFAULT\n \n \nEMPTY_REPLACEMENT\n Pairs\n\n\nDEFAULT and EMPTY_REPLACEMENT are optional items depending on the LCONF-STRUCTURE.\n\n\n7.4.1. LCONF-Schema: \nSTRUCTURE_PAIR\n\n\nDEFAULT and EMPTY_REPLACEMENT are optional items.\n\n\nIf not set it is for both assumed:\n\n\n\n\nfor TYPE_STRING, TYPE_DIGITS, TYPE_PATTERN_DIGITS it is assumed a LCONF_EMPTY_STRING: \n\n    \nDEFAULT ::\n and \nEMPTY_REPLACEMENT ::\n\n\nfor all other TYPES it is assumed to be LCONF_NOTSET: \n\n    \nDEFAULT :: NOTSET\n and \nEMPTY_REPLACEMENT :: NOTSET\n\n\n\n\nExamples:\n\n\n. registered1 | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_STRING\n    DEFAULT ::\n    EMPTY_REPLACEMENT ::\n\n. registered2 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_BOOLEAN\n    DEFAULT :: NOTSET\n    EMPTY_REPLACEMENT :: NOTSET\n\n# Set DEFAULT and EMPTY_REPLACEMENT\n. registered3 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_BOOLEAN\n    DEFAULT :: true\n    EMPTY_REPLACEMENT :: false\n\n\n\n\n7.4.2. LCONF-Schema: \nSTRUCTURE_LIST\n\n\nDEFAULT is an optional item and EMPTY_REPLACEMENT is not a STRUCTURE_LIST LCONF-Schema item.\n\n\nIf not set it is assumed an empty list (without any values - an empty sequence) LCONF_EMPTY_LIST: \n- DEFAULT\n\n\nExamples:\n\n\n. colors | STRUCTURE_LIST\n    ITEM :: REQUIRED | TYPE_STRING\n    - DEFAULT\n\n# Set DEFAULT\n. registered1 | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n    - DEFAULT\n        Red,\n        blue\n\n# Set DEFAULT: Compact notation\n. registered2 | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n    - DEFAULT :: Red, blue\n\n\n\n\n7.4.3. LCONF-Schema: \nSTRUCTURE_TABLE\n\n\nDEFAULT is an optional item and EMPTY_REPLACEMENT is not a STRUCTURE_TABLE LCONF-Schema item.\n\n\nIf not set it is assumed a LCONF_EMPTY_TABLE (without any rows - an empty sequence): \n| DEFAULT\n\n\nCOLUMNS\n: This is required and only used for STRUCTURE_TABLE and is a STRUCTURE_LIST where each value line has the\nformat of:\n\n\nColumn NAME | Column DEFAULT | Column EMPTY_REPLACEMENT | Column Value-REQUIRED | Column TYPE \n any CONSTRAINTS\n\n\nLeading and ending whitespace of individual parts is stripped.\n\n\nExamples:\n\n\n. favorite1s | STRUCTURE_TABLE\n    ITEM :: OPTIONAL\n    - COLUMNS\n        # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE \n any CONSTRAINTS\n        # ------ | ------- | ----------------- | ------------------ | -----------------------\n        food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n        sport    |         |                   | OPTIONAL           | TYPE_STRING\n        color    |         |                   | OPTIONAL           | TYPE_STRING\n        number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER (\n0,\n100)\n\n    | DEFAULT\n\n. favorites2 | STRUCTURE_TABLE\n    ITEM :: OPTIONAL\n    - COLUMNS\n        # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE \n any CONSTRAINTS\n        # ------ | ------- | ----------------- | ------------------ | -----------------------\n        food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n        sport    |         |                   | OPTIONAL           | TYPE_STRING\n        color    |         |                   | OPTIONAL           | TYPE_STRING\n        number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER (\n0,\n100)\n\n    | DEFAULT\n        # food          | sport          | color  | number |\n        # ------------- | -------------- | ------ | ------ |\n        | Stroganoff    | figure skating | violet | 0.0    |\n        | Rice          | ballet         | orange | NOTSET |\n        | French fries  |                |        |        |\n        | Fried Chicken | NOTSET         |        | 89.9   |\n\n\n\n\n7.5 LCONF-Schema-Comment-Lines\n\n\nIf a LCONF-Schema-Line first none whitespace character is a LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER it is considered a\nLCONF-Schema-Comment-Line which are parsed.\nThe purpose of such LCONF-Schema-Comment-Lines is to emit an example LCONF-Section with additional information.\n\n\nNOTE\n: LCONF-Schema MAY also contain regular LCONF-Section-Comment-Line which are not parsed.\n\n\n7.5.1 Auto-generated Comment-Lines\n\n\nLCONF-Libraries MUST implement an option to auto-generate for each LCONF-Schema-Definition Comment-Lines which MUST\ncontain info like:\n\n\n\n\nLCONF-Key-Name which it referes too and \noptional the LCONF-Structure\n\n\nLCONF-Item-Requirement-Option\n\n\nLCONF-Value-Type with any constraints\n\n\nDefault-Value\n\n\nEmpty-Default-Value\n\n\n\n\nNOTE\n STRUCTURE_TABLE needs to aut-generate also the COLUMNS info.\n\n\nExample LCONF-Schema-Definition\n\n\n. registered | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_BOOLEAN\n    DEFAULT :: true\n    EMPTY_REPLACEMENT :: false\n\n. interest_rate | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_FLOAT (0.5,10.0)\n\n\n\n\nExample default output: \nThe output format is not defined and are here just as an example.\n\n\n# \nregistered\n OPTIONAL | TYPE_BOOLEAN\n#   Default: \ntrue\n | Empty-Default: \nfalse\n\nregistered :: true\n\n# \ninterest_rate\n REQUIRED | TYPE_FLOAT (0.5,10.0)\n#   Default: \nNOTSET\n | Empty-Default: \nNOTSET\n\ninterest_rate :: NOTSET\n\n\n\n\n7.5.1.1 STRUCTURE_TABLE\n\n\nFor STRUCTURE_TABLE the auto-generated LCONF-Schema-Comment-Lines MUST also include the Columns definitions.\n\n\nExample LCONF-Schema-Definition\n\n\n. favorites | STRUCTURE_TABLE\n    ITEM :: OPTIONAL\n    - COLUMNS\n        # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE \n any CONSTRAINTS\n        # ------ | ------- | ----------------- | ------------------ | -----------------------\n        food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n        sport    |         |                   | OPTIONAL           | TYPE_STRING\n        color    |         |                   | OPTIONAL           | TYPE_STRING\n        number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER (\n0,\n100)\n\n    | DEFAULT\n        # food          | sport          | color  | number |\n        # ------------- | -------------- | ------ | ------ |\n        | Stroganoff    | figure skating | violet | 0.0    |\n        | Rice          | ballet         | orange | NOTSET |\n        | French fries  |                |        |        |\n        | Fried Chicken | NOTSET         |        | 89.9   |\n\n\n\n\nExample default output: \nThe output format is not defined and are here just as an example.\n\n\n# \nfavorites\n OPTIONAL\n# COLUMNS # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE \n any CONSTRAINTS\n#         # ------ | ------- | ----------------- | ------------------ | -----------------------\n#         food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n#         sport    |         |                   | OPTIONAL           | TYPE_STRING\n#         color    |         |                   | OPTIONAL           | TYPE_STRING\n#         number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER (\n0,\n100)\n| DEFAULT\n    # food          | sport          | color  | number |\n    # ------------- | -------------- | ------ | ------ |\n    | Stroganoff    | figure skating | violet | 0.0    |\n    | Rice          | ballet         | orange | NOTSET |\n    | French fries  |                |        |        |\n    | Fried Chicken | NOTSET         |        | 89.9   |\n\n\n\n\n7.5.2 LCONF-Section Comment Emit Options\n\n\n\n\n\n\n\n\nName\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nEMIT_NO_COMMENTS\n\n\nAbsolute no comments are emitted.\n\n\n\n\n\n\nEMIT_ONLY_MANUAL_COMMENTS\n\n\nOnly manual LCONF-Schema-Comment-Lines are emitted.\n\n\n\n\n\n\nEMIT_ALL_COMMENTS\n\n\nAuto generated and manual LCONF-Schema-Comment-Lines are emitted.\n\n\n\n\n\n\n\n\n7.6. LCONF-Libraries Schema Requirements\n\n\n\n\n\n\nAll LCONF-Libraries MUST support the \nLCONF_SCHEMA_STRICT_FORMAT\n and MAY implement individual\n    \nLCONF_SCHEMA_FLEXIBLE_FORMAT\n.\n\n\n\n\n\n\nLCONF-Libraries SHOULD implement an option to generate optimized copy/past source code from a parsed LCONF_SCHEMA and\n    to emit it which removes the need of parsing each time the LCONF_SCHEMA.\n\n\n\n\n\n\nLCONF-Libraries MUST implement an option to emit a parsed LCONF_SCHEMA inclusive any LCONF-Schema-Comment-Lines.\n\n\n\n\n\n\nLCONF-Libraries MUST implement an option to emit a LCONF-Section inclusive any LCONF-Schema-Comment-Lines.\n\n\n\n\n\n\nIt is RECOMMENDE that LCONF-Libraries implement an option to generate a generic basic LCONF-Schema from any parsed\n    LCONF-Section which could be used as starting point for a corresponding final LCONF-Schema.",
            "title": "7. LCONF-Schema-Definition"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#7-lconf-schema-definitions",
            "text": "LCONF uses LCONF-Schema-Definitions to descripe the structure and default content as well as any constraints on the\nstructure and content of a LCONF-Section, above and beyond the basic syntactical constraints imposed by LCONF itself.\nLCONF-Schema-Definitions are valid LCONF syntax.",
            "title": "7. LCONF-Schema-Definitions"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#71-lconf-schema-formats",
            "text": "There are two supported LCONF-Schema-Formats:   LCONF_SCHEMA_STRICT_FORMAT:  STRICT  (uses additional constraints: e.g. naming conventions)  LCONF_SCHEMA_FLEXIBLE_FORMAT:  FLEXIBLE  (less constraints)   All LCONF-Libraries MUST support the  LCONF_SCHEMA_STRICT_FORMAT  and MAY implement individual  LCONF_SCHEMA_FLEXIBLE_FORMAT .  All LCONF-Schema-Definition Sections MUST set the used LCONF-Schema-Format in the: LCONF-Section Start Line:  LCONF-Schema-Definition Section-Start-Line MUST   start with the LCONF_SECTION_START token  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF-Indentation-Per-Level  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed be a LCONF_SCHEMA_STRICT_FORMAT or LCONF_SCHEMA_FLEXIBLE_FORMAT  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF-Section-Name   ___SECTION :: 4 :: STRICT :: Menu Configuration Schema Definition`  ___SECTION :: 4 :: FLEXIBLE :: Menu Configuration Schema Definition`",
            "title": "7.1. LCONF-Schema-Formats"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#71-1-lconf_schema_strict_format",
            "text": "This is the default LCONF-Schema-Format and MUST be supported by all LCONF-Libraries.  Naming Convention  A LCONF_SCHEMA_STRICT_FORMAT LCONF-Key-Name (STRUCTURE_TABLE's LCONF-Column-Name are also considered to be\nLCONF-Key-Names):  MUST be a sequence of one or more (but maximum thirty-one '31') characters of these groups:   LCONF_UNDERSCORE  LCONF_CAPITAL_LETTERS  LCONF_SMALL_LETTERS  LCONF_DIGITS   Additionally constraints:   The first character MUST NOT be a LCONF_DIGITS  The name SHOULD NOT be one of LCONF's Literal Name Tokens  The name SHOULD NOT be one of common reserved programming words",
            "title": "7.1. 1. LCONF_SCHEMA_STRICT_FORMAT"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#712-lconf_schema_flexible_format",
            "text": "This LCONF-Schema-Format has fewer constraints but MAY NOT be supported by all LCONF-Libraries.  Naming Convention  A LCONF_SCHEMA_FLEXIBLE_FORMAT LCONF-Key-Name (STRUCTURE_TABLE's LCONF-Column-Name are also considered to be\nLCONF-Key-Names) is a sequence of one or more Unicode characters and is case-sensitive. It MUST NOT contain any\nLCONF_VERTICAL_LINE  | .",
            "title": "7.1.2. LCONF_SCHEMA_FLEXIBLE_FORMAT"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#72-schema-identifier-line",
            "text": "Each LCONF-Schema-Definition is a  STRUCTURE_SINGLE_BLOCK  where the Identifier-Line LCONF-Key-Name:  A LCONF-Schema-Identifier-Line MUST   start with a STRUCTURE_SINGLE_BLOCK_IDENTIFIER  followed by one LCONF_SPACE  followed by a LCONF-Key-Name which MUST be the same as the LCONF-Key-Name in the final LCONF-Section it describes  followed by one LCONF_SPACE  followed by one LCONF_SCHEMA_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF-Structure for the LCONF-Key-Name in the final LCONF-Section it describes  and optionally followed by one LCONF_SPACE and an additional LCONF-Constrain option   Example LCONF-Schema Identifier-Lines  . Registered | STRUCTURE_PAIR\n\n. Colors | STRUCTURE_LIST\n\n. mobile_numbers | STRUCTURE_LIST (0,3)\n\n. mobile_numbers | STRUCTURE_LIST (0,3)\n\n. credit_cards | STRUCTURE_UNNAMED_BLOCKS (1,2)  Example of a corresponding LCONF-Section  Registered :: true\n\n- Colors\n    Blue\n    Red\n\n# minimum required list items 0, maximum allowed items 3\n- mobile_numbers\n\n# minimum required blocks 1, maximum allowed blocks 2\n* credit_cards\n    .\n        issuing_network :: Visa\n        card_number :: 4639588964759877",
            "title": "7.2. Schema: IDENTIFIER Line"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#721-additional-constraints",
            "text": "Some elements can have  one  additional constraint after the LCONF-Structure.   STRUCTURE_LIST  STRUCTURE_TABLE,  STRUCTURE_NAMED_BLOCKS  STRUCTURE_UNNAMED_BLOCKS   can set a minimum/maximum number of elements they require. (LCONF-Constrain-Min-Max)  A LCONF-Constrain-Min-Max MUST:   start with a LCONF_LEFT_PARENTHESIS  followed by a  LCONF-Constrain-Min : TYPE_INTEGER greater than zero (0)  followed by a LCONF_COMMA  followed by a  LCONF-Constrain-Max : TYPE_INTEGER greater than zero (0)  followed by a LCONF_RIGHT_PARENTHESIS   IMPORTANT: To not define one of the two constraints set it to TYPE_NOTSET (LCONF_NOTSET).  # minimum required list items 2, maximum allowed items 5\n. MobileNumbers | STRUCTURE_LIST (2,5)\n\n# minimum required table rows not restricted, maximum allowed required table rows 5\n. interests | STRUCTURE_TABLE (NOTSET,5)\n\n# minimum required blocks 1, maximum allowed blocks not restricted\n. credit_cards | STRUCTURE_UNNAMED_BLOCKS (1,NOTSET)",
            "title": "7.2.1. Additional Constraints"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#73-schema-item-pair",
            "text": "This is required except STRUCTURE_SINGLE_BLOCK, STRUCTURE_NAMED_BLOCKS, STRUCTURE_UNNAMED_BLOCKS only use the LCONF-Schema Identifier-Line .  The Value for this pair is a LCONF-Item-Requirement-Option followed by a LCONF-Value-Type.  EXCEPTION:  STRUCTURE_TABLE uses only the LCONF-Item-Requirement-Option because LCONF-Value-Types are set per\nColumn.  A LCONF-Schema  ITEM  Pair MUST   start with a LCONF-Key-Name:  ITEM  (U+0049 U+0054 U+0045 U+004D)  followed by one LCONF_SPACE  followed by one LCONF_KEY_VALUE_SEPARATOR  followed by one LCONF_SPACE  followed by one of the LCONF-Item-Requirement-Option  followed by one LCONF_SPACE  followed by one LCONF_SCHEMA_SEPARATOR  followed by one LCONF_SPACE  followed by a LCONF-Value-Type for the LCONF-Key-Name in the final LCONF-Section it describes   and optionally followed by one LCONF_SPACE and an additional LCONF-Constrain option   Exception: for TYPE_PATTERN_DIGITS this is not optional but a pattern MUST be defined     Example LCONF-Schema  ITEM  Pair  . Colors | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n\n. Sex | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_STRING [Male, Female]\n\n. ports | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER [25,80,443]\n\n. credit_card_number | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_DIGITS (15,19)\n\n. telephone_number | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_PATTERN_DIGITS (+@ @@@ @@@ @@@@)\n\n. interest_rate | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT (0.5, 10.0)\n\n. interest_rate2 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT ( 1.0,10.0)  Example of a corresponding LCONF-Section  Registered :: true\n\n- Colors\n    Blue\n    Red\n\n# predefined valid values one of `Male`,` Female`\nSex :: Female\n\n# predefined valid values one of `25`, `80`, `443`\nports :: 80\n\n# minimum required chars (digits) 15, maximum allowed  chars (digits) 19\ncredit_card_number :: 4639588964759877\n\n# Pattern (+@ @@@ @@@ @@@@)\ntelephone_number :: +1 212 748 4496\n\n# minimum required value 0.5, maximum allowed value less than 10.0\ninterest_rate :: 9.9999\n\n# minimum required value greater than 1.0, maximum allowed value 10.0\ninterest_rate2 :: 10.0",
            "title": "7.3. Schema: ITEM Pair"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#731-lconf-item-requirement-option",
            "text": "OPTIONAL   Item is NOT REQUIRED to be defined in a LCONF-Section  Item COULD be defined but set  NOTSET  Item COULD be defined and set empty (which will overwrite any defaults)  Item COULD be defined and have set a value in accordance to the expected LCONF-Value-Type     REQUIRED (this CAN be an Empty-Value)   Item MUST be defined in a LCONF-Section and MUST NOT be set  NOTSET  Item MUST be defined and can be set empty (which will overwrite any defaults)  Item MUST be defined and can set a value in accordance to the expected LCONF-Value-Type     REQUIRED_NOT_EMPTY (this MUST NOT be an Empty-Value)   Item MUST be defined in a LCONF-Section and MUST NOT be set  NOTSET  and MUST NOT be set empty  Item MUST be defined and MUST set a value in accordance to the expected LCONF-Value-Type     EXCEPTION:  STRUCTURE_TABLE uses only the Item-Requirement-Option because LCONF-Value-Types are set per Column.",
            "title": "7.3.1 LCONF-Item-Requirement-Option"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#732-additional-constraints",
            "text": "Some elements can have  one  additional constraint after the LCONF-Value-Type.",
            "title": "7.3.2. Additional Constraints"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#7311-list-of-predefined-valid-values",
            "text": "For all LCONF-Value-Types one can define optional a list of predefined values (LCONF-Constrain-Predefined-Values).  A LCONF-Constrain-Predefined-Values MUST:   start with a LCONF_LEFT_SQUARE_BRACKET  followed by one or more  valid Values  separated by LCONF_COMMA  followed by a LCONF_RIGHT_SQUARE_BRACKET   NOTE: LCONF_NOTSET and if an Empty-Value is valid is set in the LCONF-Item-Requirement-Option part.  . Sex | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_STRING [Male, Female]\n\n. Sex2 | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_STRING [Male, Female]\n\n. ports | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_INTEGER [25,80,443]  Example of a corresponding LCONF-Section  # predefined valid values one of `Male`,` Female`\nSex :: Female\n\n# predefined valid values one of `Male`,` Female`\n#   can also be empty\nSex ::\n\n# predefined valid values one of `25`, `80`, `443`\nports :: 80",
            "title": "7.3.1.1. List of Predefined Valid Values"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#7312-digits-pattern",
            "text": "For TYPE_PATTERN_DIGITS one MUST define either a list of predefined valid values (LCONF-Constrain-Predefined-Values) or\na LCONF-Constrain-Digits-Pattern which MUST:   start with a LCONF_LEFT_PARENTHESIS  followed by the required pattern ( @  are placeholders for digits)  followed by a LCONF_RIGHT_PARENTHESIS   NOTE: LCONF_NOTSET and if an Empty-Value is valid is set in the LCONF-Item-Requirement-Option part.  Example LCONF-Schema  ITEM  Pair  . telephone_number | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_PATTERN_DIGITS (+@ @@@ @@@ @@@@)  Example of a corresponding LCONF-Section  # Pattern (+@ @@@ @@@ @@@@)\ntelephone_number :: +1 212 748 4496",
            "title": "7.3.1.2. Digits Pattern"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#7313-lconf-constrain-min-max",
            "text": "TYPE_STRING, TYPE_DIGITS  one MAY set a minimum/maximum LCONF-Constrain-Min-Max which MUST:   start with a LCONF_LEFT_PARENTHESIS  followed by a  LCONF-Constrain-Min : TYPE_INTEGER greater than zero (0)  followed by a LCONF_COMMA  followed by a  LCONF-Constrain-Max : TYPE_INTEGER greater than zero (0)  followed by a LCONF_RIGHT_PARENTHESIS   IMPORTANT: To not define one of the two constraints set it to TYPE_NOTSET (LCONF_NOTSET).  TYPE_STRING:  the minimum is the number of required characters and the maximum allowed characters.  TYPE_DIGITS:  the minimum is the number of required characters (digits) and the maximum allowed characters (digits).  Example LCONF-Schema  ITEM  Pair  . State | STRUCTURE_PAIR\n    ITEM :: REQUIRED_NOT_EMPTY | TYPE_STRING (2,2)\n\n. credit_card_number | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_DIGITS (15,19)  Example of a corresponding LCONF-Section  # minimum required chars 2, maximum allowed chars 2\nState :: NY\n\n# minimum required chars (digits) 15, maximum allowed chars (digits) 19\ncredit_card_number :: 4639588964759877  For  TYPE_INTEGER, TYPE_FLOAT and TYPE_NUMBER   one MAY set a minimum/maximum LCONF-Constrain-Min-Max which MUST:   start with a LCONF_LEFT_PARENTHESIS  followed by a  LCONF-Constrain-Min : Optional LCONF_GREATER_THAN_SIGN followed by TYPE_INTEGER  followed by a LCONF_COMMA  followed by a  LCONF-Constrain-Max : Optional LCONF_LESS_THAN_SIGN followed by TYPE_INTEGER  followed by a LCONF_RIGHT_PARENTHESIS   IMPORTANT: To not define one of the two constraints set it to TYPE_NOTSET (LCONF_NOTSET).    LCONF-Constrain-Min:  the minimum required value   if an optional LCONF_GREATER_THAN_SIGN was defined the minimum reguired value greater than     LCONF-Constrain-Max:  the maximum allowed value   if an optional LCONF_LESS_THAN_SIGN was defined the maximum allowed value less than     Example LCONF-Schema  ITEM  Pair  . ZIPCode | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_INTEGER (10000,99999)\n\n. interest_rate | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT (0.5,10.0)\n\n. interest_rate2 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_NUMBER ( 1, 10.0)\n\n. moving_balance | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_FLOAT ( -30000,NOTSET)  Example of a corresponding LCONF-Section  # minimum required value 10000, maximum allowed value 99999\nZIPCode :: 10022\n\n# minimum required value 0.5, maximum allowed value 10.0\ninterest_rate :: 10.0\n\n# minimum required value greater than 1, maximum allowed value less than 10.0\ninterest_rate2 :: 9.9999\n\n# minimum required value greater than -30000, maximum allowed value not defined\nmoving_balance :: -29999.9999",
            "title": "7.3.1.3. LCONF-Constrain-Min-Max"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#74-schema-default-empty_replacement-pairs",
            "text": "DEFAULT and EMPTY_REPLACEMENT are optional items depending on the LCONF-STRUCTURE.",
            "title": "7.4. Schema: DEFAULT &amp; EMPTY_REPLACEMENT Pairs"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#741-lconf-schema-structure_pair",
            "text": "DEFAULT and EMPTY_REPLACEMENT are optional items.  If not set it is for both assumed:   for TYPE_STRING, TYPE_DIGITS, TYPE_PATTERN_DIGITS it is assumed a LCONF_EMPTY_STRING:  \n     DEFAULT ::  and  EMPTY_REPLACEMENT ::  for all other TYPES it is assumed to be LCONF_NOTSET:  \n     DEFAULT :: NOTSET  and  EMPTY_REPLACEMENT :: NOTSET   Examples:  . registered1 | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_STRING\n    DEFAULT ::\n    EMPTY_REPLACEMENT ::\n\n. registered2 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_BOOLEAN\n    DEFAULT :: NOTSET\n    EMPTY_REPLACEMENT :: NOTSET\n\n# Set DEFAULT and EMPTY_REPLACEMENT\n. registered3 | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_BOOLEAN\n    DEFAULT :: true\n    EMPTY_REPLACEMENT :: false",
            "title": "7.4.1. LCONF-Schema: STRUCTURE_PAIR"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#742-lconf-schema-structure_list",
            "text": "DEFAULT is an optional item and EMPTY_REPLACEMENT is not a STRUCTURE_LIST LCONF-Schema item.  If not set it is assumed an empty list (without any values - an empty sequence) LCONF_EMPTY_LIST:  - DEFAULT  Examples:  . colors | STRUCTURE_LIST\n    ITEM :: REQUIRED | TYPE_STRING\n    - DEFAULT\n\n# Set DEFAULT\n. registered1 | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n    - DEFAULT\n        Red,\n        blue\n\n# Set DEFAULT: Compact notation\n. registered2 | STRUCTURE_LIST\n    ITEM :: OPTIONAL | TYPE_STRING\n    - DEFAULT :: Red, blue",
            "title": "7.4.2. LCONF-Schema: STRUCTURE_LIST"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#743-lconf-schema-structure_table",
            "text": "DEFAULT is an optional item and EMPTY_REPLACEMENT is not a STRUCTURE_TABLE LCONF-Schema item.  If not set it is assumed a LCONF_EMPTY_TABLE (without any rows - an empty sequence):  | DEFAULT  COLUMNS : This is required and only used for STRUCTURE_TABLE and is a STRUCTURE_LIST where each value line has the\nformat of:  Column NAME | Column DEFAULT | Column EMPTY_REPLACEMENT | Column Value-REQUIRED | Column TYPE   any CONSTRAINTS  Leading and ending whitespace of individual parts is stripped.  Examples:  . favorite1s | STRUCTURE_TABLE\n    ITEM :: OPTIONAL\n    - COLUMNS\n        # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE   any CONSTRAINTS\n        # ------ | ------- | ----------------- | ------------------ | -----------------------\n        food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n        sport    |         |                   | OPTIONAL           | TYPE_STRING\n        color    |         |                   | OPTIONAL           | TYPE_STRING\n        number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER ( 0, 100)\n\n    | DEFAULT\n\n. favorites2 | STRUCTURE_TABLE\n    ITEM :: OPTIONAL\n    - COLUMNS\n        # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE   any CONSTRAINTS\n        # ------ | ------- | ----------------- | ------------------ | -----------------------\n        food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n        sport    |         |                   | OPTIONAL           | TYPE_STRING\n        color    |         |                   | OPTIONAL           | TYPE_STRING\n        number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER ( 0, 100)\n\n    | DEFAULT\n        # food          | sport          | color  | number |\n        # ------------- | -------------- | ------ | ------ |\n        | Stroganoff    | figure skating | violet | 0.0    |\n        | Rice          | ballet         | orange | NOTSET |\n        | French fries  |                |        |        |\n        | Fried Chicken | NOTSET         |        | 89.9   |",
            "title": "7.4.3. LCONF-Schema: STRUCTURE_TABLE"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#75-lconf-schema-comment-lines",
            "text": "If a LCONF-Schema-Line first none whitespace character is a LCONF_SCHEMA_COMMENT_LINE_IDENTIFIER it is considered a\nLCONF-Schema-Comment-Line which are parsed.\nThe purpose of such LCONF-Schema-Comment-Lines is to emit an example LCONF-Section with additional information.  NOTE : LCONF-Schema MAY also contain regular LCONF-Section-Comment-Line which are not parsed.",
            "title": "7.5 LCONF-Schema-Comment-Lines"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#751-auto-generated-comment-lines",
            "text": "LCONF-Libraries MUST implement an option to auto-generate for each LCONF-Schema-Definition Comment-Lines which MUST\ncontain info like:   LCONF-Key-Name which it referes too and  optional the LCONF-Structure  LCONF-Item-Requirement-Option  LCONF-Value-Type with any constraints  Default-Value  Empty-Default-Value   NOTE  STRUCTURE_TABLE needs to aut-generate also the COLUMNS info.  Example LCONF-Schema-Definition  . registered | STRUCTURE_PAIR\n    ITEM :: OPTIONAL | TYPE_BOOLEAN\n    DEFAULT :: true\n    EMPTY_REPLACEMENT :: false\n\n. interest_rate | STRUCTURE_PAIR\n    ITEM :: REQUIRED | TYPE_FLOAT (0.5,10.0)  Example default output:  The output format is not defined and are here just as an example.  #  registered  OPTIONAL | TYPE_BOOLEAN\n#   Default:  true  | Empty-Default:  false \nregistered :: true\n\n#  interest_rate  REQUIRED | TYPE_FLOAT (0.5,10.0)\n#   Default:  NOTSET  | Empty-Default:  NOTSET \ninterest_rate :: NOTSET",
            "title": "7.5.1 Auto-generated Comment-Lines"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#7511-structure_table",
            "text": "For STRUCTURE_TABLE the auto-generated LCONF-Schema-Comment-Lines MUST also include the Columns definitions.  Example LCONF-Schema-Definition  . favorites | STRUCTURE_TABLE\n    ITEM :: OPTIONAL\n    - COLUMNS\n        # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE   any CONSTRAINTS\n        # ------ | ------- | ----------------- | ------------------ | -----------------------\n        food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n        sport    |         |                   | OPTIONAL           | TYPE_STRING\n        color    |         |                   | OPTIONAL           | TYPE_STRING\n        number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER ( 0, 100)\n\n    | DEFAULT\n        # food          | sport          | color  | number |\n        # ------------- | -------------- | ------ | ------ |\n        | Stroganoff    | figure skating | violet | 0.0    |\n        | Rice          | ballet         | orange | NOTSET |\n        | French fries  |                |        |        |\n        | Fried Chicken | NOTSET         |        | 89.9   |  Example default output:  The output format is not defined and are here just as an example.  #  favorites  OPTIONAL\n# COLUMNS # NAME   | DEFAULT | EMPTY_REPLACEMENT | Value-REQUIRED     | TYPE   any CONSTRAINTS\n#         # ------ | ------- | ----------------- | ------------------ | -----------------------\n#         food     |         |                   | REQUIRED_NOT_EMPTY | TYPE_STRING (NOTSET,25)\n#         sport    |         |                   | OPTIONAL           | TYPE_STRING\n#         color    |         |                   | OPTIONAL           | TYPE_STRING\n#         number   | NOTSET  | 0                 | OPTIONAL           | TYPE_INTEGER ( 0, 100)\n| DEFAULT\n    # food          | sport          | color  | number |\n    # ------------- | -------------- | ------ | ------ |\n    | Stroganoff    | figure skating | violet | 0.0    |\n    | Rice          | ballet         | orange | NOTSET |\n    | French fries  |                |        |        |\n    | Fried Chicken | NOTSET         |        | 89.9   |",
            "title": "7.5.1.1 STRUCTURE_TABLE"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#752-lconf-section-comment-emit-options",
            "text": "Name  Definition      EMIT_NO_COMMENTS  Absolute no comments are emitted.    EMIT_ONLY_MANUAL_COMMENTS  Only manual LCONF-Schema-Comment-Lines are emitted.    EMIT_ALL_COMMENTS  Auto generated and manual LCONF-Schema-Comment-Lines are emitted.",
            "title": "7.5.2 LCONF-Section Comment Emit Options"
        },
        {
            "location": "/lconf-specification/7-lconf-schema-definition/#76-lconf-libraries-schema-requirements",
            "text": "All LCONF-Libraries MUST support the  LCONF_SCHEMA_STRICT_FORMAT  and MAY implement individual\n     LCONF_SCHEMA_FLEXIBLE_FORMAT .    LCONF-Libraries SHOULD implement an option to generate optimized copy/past source code from a parsed LCONF_SCHEMA and\n    to emit it which removes the need of parsing each time the LCONF_SCHEMA.    LCONF-Libraries MUST implement an option to emit a parsed LCONF_SCHEMA inclusive any LCONF-Schema-Comment-Lines.    LCONF-Libraries MUST implement an option to emit a LCONF-Section inclusive any LCONF-Schema-Comment-Lines.    It is RECOMMENDE that LCONF-Libraries implement an option to generate a generic basic LCONF-Schema from any parsed\n    LCONF-Section which could be used as starting point for a corresponding final LCONF-Schema.",
            "title": "7.6. LCONF-Libraries Schema Requirements"
        },
        {
            "location": "/about/readme/",
            "text": "LCONF-Data-Serialization-Format-Standard\n\n\nThe official LCONF-Data-Serialization-Format-Standard.\n\n\nWeb Presence\n\n\n\n\nLCONF-Data-Serialization-Format-Standard \nweb site\n\n\nLCONF-Data-Serialization-Format-Standard \ngithub repository",
            "title": "Readme"
        },
        {
            "location": "/about/readme/#lconf-data-serialization-format-standard",
            "text": "The official LCONF-Data-Serialization-Format-Standard.",
            "title": "LCONF-Data-Serialization-Format-Standard"
        },
        {
            "location": "/about/readme/#web-presence",
            "text": "LCONF-Data-Serialization-Format-Standard  web site  LCONF-Data-Serialization-Format-Standard  github repository",
            "title": "Web Presence"
        },
        {
            "location": "/about/license/",
            "text": "Copyrights \n Licenses\n\n\nThe \nLCONF-Data-Serialization-Format-Standard Documentation\n and associated documentation\nfiles (the \"DOCUMENTATION\") is licensed under the following terms:\n\n\n\n\nCopyright (c) 2014 - 2015, \npeter1000\n  \nhttps://github.com/peter1000\n.\n\n\nThe DOCUMENTATION may be freely copied, published and distributed to\nothers, provided that the above copyright notice and this Copyright\nLicense are included on all such copies or substantial portions of the\nDOCUMENTATION.\n\n\nHowever, the content of this DOCUMENTATION itself may not be modified\nin any way, including by removing the copyright notice, except as\nrequired to translate it into languages other than English or into a\ndifferent format.\nIn the event of discrepancies between a translated version and the\nofficial English version, the official English version shall govern.\n\n\nTHIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED\n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE\nUSE OF THE INFORMATION HEREIN.",
            "title": "License"
        },
        {
            "location": "/about/license/#copyrights-licenses",
            "text": "The  LCONF-Data-Serialization-Format-Standard Documentation  and associated documentation\nfiles (the \"DOCUMENTATION\") is licensed under the following terms:   Copyright (c) 2014 - 2015,  peter1000    https://github.com/peter1000 .  The DOCUMENTATION may be freely copied, published and distributed to\nothers, provided that the above copyright notice and this Copyright\nLicense are included on all such copies or substantial portions of the\nDOCUMENTATION.  However, the content of this DOCUMENTATION itself may not be modified\nin any way, including by removing the copyright notice, except as\nrequired to translate it into languages other than English or into a\ndifferent format.\nIn the event of discrepancies between a translated version and the\nofficial English version, the official English version shall govern.  THIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED\n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE\nUSE OF THE INFORMATION HEREIN.",
            "title": "Copyrights &amp; Licenses"
        },
        {
            "location": "/about/changelog/",
            "text": "v0.1.0 (2015-09-09)\n\n\nThis is the first draft of the renamed and reversioned \nLCONF-Data-Serialization-Format-Standard Documentation\n.\n\n\nSummary\n\n\nA short summary of the most important changes (see \nHistory\n below for the early beginnings):\n\n\n\n\nChanged to P-Versioning Based On \nSemantic Versioning\n. Restart with version \n0.1.0\n.\n\n\nThe \nLCONF-Data-Serialization-Format-Standard Documentation\n was completely rewritten.\n\n\n\n\nSeveral items are renamed:\n\n\n\n\nRenamed \nLCONF\n to \nLCONF-Data-Serialization-Format\n.\n\n\nRenamed \nKey-Value-Mapping\n to \nSTRUCTURE_SINGLE_BLOCK\n.\n\n\nRenamed \nList-Of-Tuple\n to \nSTRUCTURE_TABLE\n which have also a slightly different syntax.\n\n\nRenamed \nKey :: Value-List\n to \nCompact_STRUCTURE_LIST\n and Leading or ending whitespace is now stripped from\n    each individual Compact_STRUCTURE_LIST Value.\n\n\nRenamed \nRepeated-Block\n to two subforms \nSTRUCTURE_NAMED_BLOCKS\n and \nSTRUCTURE_UNNAMED_BLOCKS\n which\n    increases LCONF-Data-Serialization-Format compatibility with other data serialization formats like yaml or\n    json.\n\n\nRenamed \nDefault-Comment/Empty Lines\n to \nLCONF-Schema-Comment-Lines\n which got also a own indentifier.\n\n\n\n\n\n\n\n\nLCONF-Indentation is now configurable within the LCONF-Section-Start-Line minimum 2 and maximum 8 spaces per level.\n\n\n\n\nOfficial support for a varity of LCONF-Value-Types is added.\n\n\nSTRUCTURE_LISTs can now also contain TYPE_NOTSET values.\n\n\nLCONF-Key-Name naming convention is added.\n\n\nLCONF-Comment-Lines: changed the indentation requirement from MUST to SHOULD have the indentation level of the\n    following LCONF_NONE_BLANK_LINE.\n\n\nLCONF-Schema-Definitions are now part of the \nLCONF-Data-Serialization-Format\n\n\n\n\nHistory\n\n\n\n\n\n\nIn early 2014 \npeter1000\n \nhttps://github.com/peter1000/\n released a first \nLCONF\n specification and an\n    implementation as python library.\n\n\n\n\n\n\n2014-10-08 the last \nLCONF\n Version 7.0.0  was released by \npeter1000\n.\n\n\n\n\n\n\n\n\nP-Versioning Based On \nSemantic Versioning\n\n\nIMPORTANT DIFFERENCE\n to the \nSemantic Versioning 2.0.0\n \n\n\n\n\n\n\nA pre-release version MUST NOT be added.\n\n\n\n\n\n\nBuild metadata MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain any hyphen.\n\n\n\n\n\n\nPackage Versioning\n\n\n\n\n\n\nSoftware and related packages using this modified Semantic Versioning MUST declare a public API.\n This API could\n    be declared in the code itself or exist strictly in documentation. However it is done, it should be precise and\n    comprehensive.\n\n\n\n\n\n\nA normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain\n    leading zeroes. X is the major version, Y is the minor version, and Z is the patch version.\n    Each element MUST increase numerically. For instance: 1.9.0 -\n 1.10.0 -\n 1.11.0.\n\n\n\n\n\n\nOnce a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications\n    MUST be released as a new version.\n\n\n\n\n\n\nMajor version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be\n    considered stable.\n\n\n\n\n\n\nVersion 1.0.0 defines the public API. The way in which the version number is incremented after this release is\n    dependent on this public API and how it changes.\n\n\n\n\n\n\nPatch version Z (x.y.Z | x \n 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix\n    is defined as an internal change that fixes incorrect behavior.\n\n\n\n\n\n\nMinor version Y (x.Y.z | x \n 0) MUST be incremented if new, backwards compatible functionality is introduced to the\n    public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented\n    if substantial new functionality or improvements are introduced within the private code. It MAY include patch level\n    changes. Patch version MUST be reset to 0 when minor version is incremented.\n\n\n\n\n\n\nMajor version X (X.y.z | X \n 0) MUST be incremented if any backwards incompatible changes are introduced to the\n    public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major\n    version is incremented.\n\n\n\n\n\n\nBuild metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers immediately\n    following the patch version. Identifiers MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain\n    hyphen. Identifiers MUST NOT be empty. Build metadata SHOULD be ignored when determining version precedence. Thus\n    two versions that differ only in the build metadata, have the same precedence.  \n\n    Examples: 1.0.0+001, 1.0.0+20130313144700, 1.0.0+exp.sha.5114f85, 1.0.7+r128.g4560914.\n\n\n\n\n\n\nWhat do I do if I accidentally release a backwards incompatible change as a minor version?\n\n\nAs soon as you realize that you've broken the Semantic Versioning spec, fix the problem and release a new minor\nversion that corrects the problem and restores backwards compatibility. Even under this circumstance, it is\nunacceptable to modify versioned releases. If it's appropriate, document the offending version and inform your\nusers of the problem so that they are aware of the offending version.\n\n\n\n\n\n\nHow should I handle deprecating functionality?\n\n\nDeprecating existing functionality is a normal part of software development and is often required to make forward\nprogress. When you deprecate part of your public API, you should do two things:\n\n\n\n\nupdate your documentation to let users know about the change,\n\n\nissue a new minor release with the deprecation in place. Before you completely remove the functionality in a new\n    major release there should be at least one minor release that contains the deprecation so that users can\n    smoothly transition to the new API.",
            "title": "Changelog"
        },
        {
            "location": "/about/changelog/#v010-2015-09-09",
            "text": "This is the first draft of the renamed and reversioned  LCONF-Data-Serialization-Format-Standard Documentation .",
            "title": "v0.1.0 (2015-09-09)"
        },
        {
            "location": "/about/changelog/#summary",
            "text": "A short summary of the most important changes (see  History  below for the early beginnings):   Changed to P-Versioning Based On  Semantic Versioning . Restart with version  0.1.0 .  The  LCONF-Data-Serialization-Format-Standard Documentation  was completely rewritten.   Several items are renamed:   Renamed  LCONF  to  LCONF-Data-Serialization-Format .  Renamed  Key-Value-Mapping  to  STRUCTURE_SINGLE_BLOCK .  Renamed  List-Of-Tuple  to  STRUCTURE_TABLE  which have also a slightly different syntax.  Renamed  Key :: Value-List  to  Compact_STRUCTURE_LIST  and Leading or ending whitespace is now stripped from\n    each individual Compact_STRUCTURE_LIST Value.  Renamed  Repeated-Block  to two subforms  STRUCTURE_NAMED_BLOCKS  and  STRUCTURE_UNNAMED_BLOCKS  which\n    increases LCONF-Data-Serialization-Format compatibility with other data serialization formats like yaml or\n    json.  Renamed  Default-Comment/Empty Lines  to  LCONF-Schema-Comment-Lines  which got also a own indentifier.     LCONF-Indentation is now configurable within the LCONF-Section-Start-Line minimum 2 and maximum 8 spaces per level.   Official support for a varity of LCONF-Value-Types is added.  STRUCTURE_LISTs can now also contain TYPE_NOTSET values.  LCONF-Key-Name naming convention is added.  LCONF-Comment-Lines: changed the indentation requirement from MUST to SHOULD have the indentation level of the\n    following LCONF_NONE_BLANK_LINE.  LCONF-Schema-Definitions are now part of the  LCONF-Data-Serialization-Format",
            "title": "Summary"
        },
        {
            "location": "/about/changelog/#history",
            "text": "In early 2014  peter1000   https://github.com/peter1000/  released a first  LCONF  specification and an\n    implementation as python library.    2014-10-08 the last  LCONF  Version 7.0.0  was released by  peter1000 .",
            "title": "History"
        },
        {
            "location": "/about/changelog/#p-versioning-based-on-semantic-versioning",
            "text": "IMPORTANT DIFFERENCE  to the  Semantic Versioning 2.0.0      A pre-release version MUST NOT be added.    Build metadata MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain any hyphen.",
            "title": "P-Versioning Based On Semantic Versioning"
        },
        {
            "location": "/about/changelog/#package-versioning",
            "text": "Software and related packages using this modified Semantic Versioning MUST declare a public API.  This API could\n    be declared in the code itself or exist strictly in documentation. However it is done, it should be precise and\n    comprehensive.    A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain\n    leading zeroes. X is the major version, Y is the minor version, and Z is the patch version.\n    Each element MUST increase numerically. For instance: 1.9.0 -  1.10.0 -  1.11.0.    Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications\n    MUST be released as a new version.    Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be\n    considered stable.    Version 1.0.0 defines the public API. The way in which the version number is incremented after this release is\n    dependent on this public API and how it changes.    Patch version Z (x.y.Z | x   0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix\n    is defined as an internal change that fixes incorrect behavior.    Minor version Y (x.Y.z | x   0) MUST be incremented if new, backwards compatible functionality is introduced to the\n    public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented\n    if substantial new functionality or improvements are introduced within the private code. It MAY include patch level\n    changes. Patch version MUST be reset to 0 when minor version is incremented.    Major version X (X.y.z | X   0) MUST be incremented if any backwards incompatible changes are introduced to the\n    public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major\n    version is incremented.    Build metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers immediately\n    following the patch version. Identifiers MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain\n    hyphen. Identifiers MUST NOT be empty. Build metadata SHOULD be ignored when determining version precedence. Thus\n    two versions that differ only in the build metadata, have the same precedence.   \n    Examples: 1.0.0+001, 1.0.0+20130313144700, 1.0.0+exp.sha.5114f85, 1.0.7+r128.g4560914.    What do I do if I accidentally release a backwards incompatible change as a minor version?  As soon as you realize that you've broken the Semantic Versioning spec, fix the problem and release a new minor\nversion that corrects the problem and restores backwards compatibility. Even under this circumstance, it is\nunacceptable to modify versioned releases. If it's appropriate, document the offending version and inform your\nusers of the problem so that they are aware of the offending version.    How should I handle deprecating functionality?  Deprecating existing functionality is a normal part of software development and is often required to make forward\nprogress. When you deprecate part of your public API, you should do two things:   update your documentation to let users know about the change,  issue a new minor release with the deprecation in place. Before you completely remove the functionality in a new\n    major release there should be at least one minor release that contains the deprecation so that users can\n    smoothly transition to the new API.",
            "title": "Package Versioning"
        }
    ]
}